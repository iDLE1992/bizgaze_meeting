var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
!function (e, t) { "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.JitsiMeetJS = t() : e.JitsiMeetJS = t(); }(window, (function () {
    return function (e) { var t = {}; function n(i) { if (t[i])
        return t[i].exports; var r = t[i] = { i: i, l: !1, exports: {} }; return e[i].call(r.exports, r, r.exports, n), r.l = !0, r.exports; } return n.m = e, n.c = t, n.d = function (e, t, i) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: i }); }, n.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }); }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t)
        return e; if (4 & t && "object" == typeof e && e && e.__esModule)
        return e; var i = Object.create(null); if (n.r(i), Object.defineProperty(i, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e)
        for (var r in e)
            n.d(i, r, function (t) { return e[t]; }.bind(null, r)); return i; }, n.n = function (e) { var t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, "a", t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = "", n(n.s = 149); }([function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "AUDIO_INPUT_STATE_CHANGE", (function () { return i; })), n.d(t, "AUTH_STATUS_CHANGED", (function () { return r; })), n.d(t, "BEFORE_STATISTICS_DISPOSED", (function () { return s; })), n.d(t, "CONFERENCE_ERROR", (function () { return o; })), n.d(t, "CONFERENCE_FAILED", (function () { return a; })), n.d(t, "CONFERENCE_JOINED", (function () { return c; })), n.d(t, "CONFERENCE_LEFT", (function () { return d; })), n.d(t, "CONFERENCE_UNIQUE_ID_SET", (function () { return u; })), n.d(t, "CONNECTION_ESTABLISHED", (function () { return l; })), n.d(t, "CONNECTION_INTERRUPTED", (function () { return h; })), n.d(t, "CONNECTION_RESTORED", (function () { return p; })), n.d(t, "DATA_CHANNEL_OPENED", (function () { return m; })), n.d(t, "DISPLAY_NAME_CHANGED", (function () { return f; })), n.d(t, "DOMINANT_SPEAKER_CHANGED", (function () { return g; })), n.d(t, "CONFERENCE_CREATED_TIMESTAMP", (function () { return _; })), n.d(t, "DTMF_SUPPORT_CHANGED", (function () { return v; })), n.d(t, "ENDPOINT_MESSAGE_RECEIVED", (function () { return S; })), n.d(t, "ENDPOINT_STATS_RECEIVED", (function () { return y; })), n.d(t, "JVB121_STATUS", (function () { return E; })), n.d(t, "KICKED", (function () { return b; })), n.d(t, "PARTICIPANT_KICKED", (function () { return T; })), n.d(t, "LAST_N_ENDPOINTS_CHANGED", (function () { return C; })), n.d(t, "LOCK_STATE_CHANGED", (function () { return R; })), n.d(t, "SERVER_REGION_CHANGED", (function () { return A; })), n.d(t, "_MEDIA_SESSION_STARTED", (function () { return w; })), n.d(t, "_MEDIA_SESSION_ACTIVE_CHANGED", (function () { return I; })), n.d(t, "MEMBERS_ONLY_CHANGED", (function () { return P; })), n.d(t, "MESSAGE_RECEIVED", (function () { return O; })), n.d(t, "NO_AUDIO_INPUT", (function () { return D; })), n.d(t, "NOISY_MIC", (function () { return N; })), n.d(t, "PRIVATE_MESSAGE_RECEIVED", (function () { return M; })), n.d(t, "PARTICIPANT_CONN_STATUS_CHANGED", (function () { return k; })), n.d(t, "PARTCIPANT_FEATURES_CHANGED", (function () { return L; })), n.d(t, "PARTICIPANT_PROPERTY_CHANGED", (function () { return x; })), n.d(t, "P2P_STATUS", (function () { return F; })), n.d(t, "PHONE_NUMBER_CHANGED", (function () { return j; })), n.d(t, "PROPERTIES_CHANGED", (function () { return U; })), n.d(t, "RECORDER_STATE_CHANGED", (function () { return H; })), n.d(t, "VIDEO_SIP_GW_AVAILABILITY_CHANGED", (function () { return B; })), n.d(t, "VIDEO_SIP_GW_SESSION_STATE_CHANGED", (function () { return J; })), n.d(t, "START_MUTED_POLICY_CHANGED", (function () { return V; })), n.d(t, "STARTED_MUTED", (function () { return G; })), n.d(t, "SUBJECT_CHANGED", (function () { return $; })), n.d(t, "SUSPEND_DETECTED", (function () { return K; })), n.d(t, "TALK_WHILE_MUTED", (function () { return q; })), n.d(t, "TRACK_ADDED", (function () { return W; })), n.d(t, "TRACK_AUDIO_LEVEL_CHANGED", (function () { return z; })), n.d(t, "TRACK_MUTE_CHANGED", (function () { return Q; })), n.d(t, "TRACK_REMOVED", (function () { return X; })), n.d(t, "TRANSCRIPTION_STATUS_CHANGED", (function () { return Y; })), n.d(t, "USER_JOINED", (function () { return Z; })), n.d(t, "USER_LEFT", (function () { return ee; })), n.d(t, "USER_ROLE_CHANGED", (function () { return te; })), n.d(t, "USER_STATUS_CHANGED", (function () { return ne; })), n.d(t, "BOT_TYPE_CHANGED", (function () { return ie; })), n.d(t, "LOBBY_USER_JOINED", (function () { return re; })), n.d(t, "LOBBY_USER_UPDATED", (function () { return se; })), n.d(t, "LOBBY_USER_LEFT", (function () { return oe; }));
            var i = "conference.audio_input_state_changed", r = "conference.auth_status_changed", s = "conference.beforeStatisticsDisposed", o = "conference.error", a = "conference.failed", c = "conference.joined", d = "conference.left", u = "conference.unique_id_set", l = "conference.connectionEstablished", h = "conference.connectionInterrupted", p = "conference.connectionRestored", m = "conference.dataChannelOpened", f = "conference.displayNameChanged", g = "conference.dominantSpeaker", _ = "conference.createdTimestamp", v = "conference.dtmfSupportChanged", S = "conference.endpoint_message_received", y = "conference.endpoint_stats_received", E = "conference.jvb121Status", b = "conference.kicked", T = "conference.participant_kicked", C = "conference.lastNEndpointsChanged", R = "conference.lock_state_changed", A = "conference.server_region_changed", w = "conference.media_session.started", I = "conference.media_session.active_changed", P = "conference.membersOnlyChanged", O = "conference.messageReceived", D = "conference.no_audio_input", N = "conference.noisy_mic", M = "conference.privateMessageReceived", k = "conference.participant_conn_status_changed", L = "conference.partcipant_features_changed", x = "conference.participant_property_changed", F = "conference.p2pStatus", j = "conference.phoneNumberChanged", U = "conference.propertiesChanged", H = "conference.recorderStateChanged", B = "conference.videoSIPGWAvailabilityChanged", J = "conference.videoSIPGWSessionStateChanged", V = "conference.start_muted_policy_changed", G = "conference.started_muted", $ = "conference.subjectChanged", K = "conference.suspendDetected", q = "conference.talk_while_muted", W = "conference.trackAdded", z = "conference.audioLevelsChanged", Q = "conference.trackMuteChanged", X = "conference.trackRemoved", Y = "conference.transcriptionStatusChanged", Z = "conference.userJoined", ee = "conference.userLeft", te = "conference.roleChanged", ne = "conference.statusChanged", ie = "conference.bot_type_changed", re = "conference.lobby.userJoined", se = "conference.lobby.userUpdated", oe = "conference.lobby.userLeft";
        }, function (e, t) { e.exports = { ADD_ICE_CANDIDATE_FAILED: "xmpp.add_ice_candidate_failed", AUDIO_MUTED_BY_FOCUS: "xmpp.audio_muted_by_focus", VIDEO_MUTED_BY_FOCUS: "xmpp.video_muted_by_focus", AUTHENTICATION_REQUIRED: "xmpp.authentication_required", BRIDGE_DOWN: "xmpp.bridge_down", CALL_ACCEPTED: "xmpp.callaccepted.jingle", CALL_INCOMING: "xmpp.callincoming.jingle", CALL_ENDED: "xmpp.callended.jingle", CHAT_ERROR_RECEIVED: "xmpp.chat_error_received", CONFERENCE_PROPERTIES_CHANGED: "xmpp.conference_properties_changed", CONNECTION_ESTABLISHED: "xmpp.connection.connected", CONNECTION_FAILED: "xmpp.connection.failed", CONNECTION_INTERRUPTED: "xmpp.connection.interrupted", CONNECTION_RESTORED: "xmpp.connection.restored", CONNECTION_ICE_FAILED: "xmpp.connection.ice.failed", CONNECTION_RESTARTED: "xmpp.connection.restart", CONNECTION_STATUS_CHANGED: "xmpp.connection.status.changed", DISPLAY_NAME_CHANGED: "xmpp.display_name_changed", EMUC_ROOM_ADDED: "xmpp.emuc_room_added", EMUC_ROOM_REMOVED: "xmpp.emuc_room_removed", ETHERPAD: "xmpp.etherpad", FOCUS_DISCONNECTED: "xmpp.focus_disconnected", FOCUS_LEFT: "xmpp.focus_left", GRACEFUL_SHUTDOWN: "xmpp.graceful_shutdown", ICE_RESTARTING: "rtc.ice_restarting", ICE_RESTART_SUCCESS: "rtc.ice_restart_success", KICKED: "xmpp.kicked", LOCAL_ROLE_CHANGED: "xmpp.localrole_changed", MEETING_ID_SET: "xmpp.meeting_id_set", MESSAGE_RECEIVED: "xmpp.message_received", INVITE_MESSAGE_RECEIVED: "xmpp.invite_message_received", PRIVATE_MESSAGE_RECEIVED: "xmpp.private_message_received", MUC_MEMBER_BOT_TYPE_CHANGED: "xmpp.muc_member_bot_type_changed", MUC_DESTROYED: "xmpp.muc_destroyed", MUC_JOINED: "xmpp.muc_joined", MUC_MEMBER_JOINED: "xmpp.muc_member_joined", MUC_MEMBER_LEFT: "xmpp.muc_member_left", MUC_LOBBY_MEMBER_JOINED: "xmpp.muc_lobby_member_joined", MUC_LOBBY_MEMBER_UPDATED: "xmpp.muc_lobby_member_updated", MUC_LOBBY_MEMBER_LEFT: "xmpp.muc_lobby_member_left", MUC_DENIED_ACCESS: "xmpp.muc_denied access", MUC_LEFT: "xmpp.muc_left", MUC_ROLE_CHANGED: "xmpp.muc_role_changed", MUC_LOCK_CHANGED: "xmpp.muc_lock_changed", MUC_MEMBERS_ONLY_CHANGED: "xmpp.muc_members_only_changed", PARTICIPANT_AUDIO_MUTED: "xmpp.audio_muted", PARTICIPANT_VIDEO_MUTED: "xmpp.video_muted", PARTICIPANT_VIDEO_TYPE_CHANGED: "xmpp.video_type", PARTICIPANT_FEATURES_CHANGED: "xmpp.participant_features_changed", PASSWORD_REQUIRED: "xmpp.password_required", PHONE_NUMBER_CHANGED: "conference.phoneNumberChanged", PRESENCE_RECEIVED: "xmpp.presence_received", PRESENCE_STATUS: "xmpp.presence_status", PROMPT_FOR_LOGIN: "xmpp.prompt_for_login", READY_TO_JOIN: "xmpp.ready_to_join", RECORDER_STATE_CHANGED: "xmpp.recorderStateChanged", REMOTE_STATS: "xmpp.remote_stats", RENEGOTIATION_FAILED: "xmpp.renegotiation_failed", RESERVATION_ERROR: "xmpp.room_reservation_error", ROOM_CONNECT_ERROR: "xmpp.room_connect_error", ROOM_CONNECT_NOT_ALLOWED_ERROR: "xmpp.room_connect_error.not_allowed", ROOM_JOIN_ERROR: "xmpp.room_join_error", ROOM_CONNECT_MEMBERS_ONLY_ERROR: "xmpp.room_connect_error.members_only", ROOM_MAX_USERS_ERROR: "xmpp.room_max_users_error", SENDING_CHAT_MESSAGE: "xmpp.sending_chat_message", SENDING_PRIVATE_CHAT_MESSAGE: "xmpp.sending_private_chat_message", SESSION_ACCEPT_TIMEOUT: "xmpp.session_accept_timeout", SPEAKER_STATS_RECEIVED: "xmpp.speaker_stats_received", CONFERENCE_TIMESTAMP_RECEIVED: "xmpp.conference_timestamp_received", START_MUTED_FROM_FOCUS: "xmpp.start_muted_from_focus", SUBJECT_CHANGED: "xmpp.subject_changed", SUSPEND_DETECTED: "xmpp.suspend_detected", TRANSCRIPTION_STATUS_CHANGED: "xmpp.transcription_status_changed", TRANSPORT_INFO: "xmpp.transportinfo.jingle", VIDEO_SIP_GW_AVAILABILITY_CHANGED: "xmpp.videoSIPGWAvailabilityChanged", VIDEO_SIP_GW_SESSION_STATE_CHANGED: "xmpp.videoSIPGWSessionStateChanged", ICE_CONNECTION_STATE_CHANGED: "xmpp.ice_connection_state_changed", JSON_MESSAGE_RECEIVED: "xmmp.json_message_received" }; }, function (e, t, n) { (function (t) { var n; n = function () {
            "use strict";
            var e = void 0 !== t ? t : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {};
            function n(e) { return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; })(e); }
            function i(e) { return function (e) { if (Array.isArray(e)) {
                for (var t = 0, n = new Array(e.length); t < e.length; t++)
                    n[t] = e[t];
                return n;
            } }(e) || function (e) { if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e))
                return Array.from(e); }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance"); }(); }
            var r = function (e, t) { var n = (65535 & e) + (65535 & t); return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n; }, s = function (e) { if ("string" != typeof e)
                throw new Error("str2binl was passed a non-string"); for (var t = [], n = 0; n < 8 * e.length; n += 8)
                t[n >> 5] |= (255 & e.charCodeAt(n / 8)) << n % 32; return t; }, o = function (e, t, n, i, s, o) { return r((a = r(r(t, e), r(i, o))) << (c = s) | a >>> 32 - c, n); var a, c; }, a = function (e, t, n, i, r, s, a) { return o(t & n | ~t & i, e, t, r, s, a); }, c = function (e, t, n, i, r, s, a) { return o(t & i | n & ~i, e, t, r, s, a); }, d = function (e, t, n, i, r, s, a) { return o(t ^ n ^ i, e, t, r, s, a); }, u = function (e, t, n, i, r, s, a) { return o(n ^ (t | ~i), e, t, r, s, a); }, l = function (e, t) { e[t >> 5] |= 128 << t % 32, e[14 + (t + 64 >>> 9 << 4)] = t; for (var n, i, s, o, l = 1732584193, h = -271733879, p = -1732584194, m = 271733878, f = 0; f < e.length; f += 16)
                n = l, i = h, s = p, o = m, l = a(l, h, p, m, e[f + 0], 7, -680876936), m = a(m, l, h, p, e[f + 1], 12, -389564586), p = a(p, m, l, h, e[f + 2], 17, 606105819), h = a(h, p, m, l, e[f + 3], 22, -1044525330), l = a(l, h, p, m, e[f + 4], 7, -176418897), m = a(m, l, h, p, e[f + 5], 12, 1200080426), p = a(p, m, l, h, e[f + 6], 17, -1473231341), h = a(h, p, m, l, e[f + 7], 22, -45705983), l = a(l, h, p, m, e[f + 8], 7, 1770035416), m = a(m, l, h, p, e[f + 9], 12, -1958414417), p = a(p, m, l, h, e[f + 10], 17, -42063), h = a(h, p, m, l, e[f + 11], 22, -1990404162), l = a(l, h, p, m, e[f + 12], 7, 1804603682), m = a(m, l, h, p, e[f + 13], 12, -40341101), p = a(p, m, l, h, e[f + 14], 17, -1502002290), h = a(h, p, m, l, e[f + 15], 22, 1236535329), l = c(l, h, p, m, e[f + 1], 5, -165796510), m = c(m, l, h, p, e[f + 6], 9, -1069501632), p = c(p, m, l, h, e[f + 11], 14, 643717713), h = c(h, p, m, l, e[f + 0], 20, -373897302), l = c(l, h, p, m, e[f + 5], 5, -701558691), m = c(m, l, h, p, e[f + 10], 9, 38016083), p = c(p, m, l, h, e[f + 15], 14, -660478335), h = c(h, p, m, l, e[f + 4], 20, -405537848), l = c(l, h, p, m, e[f + 9], 5, 568446438), m = c(m, l, h, p, e[f + 14], 9, -1019803690), p = c(p, m, l, h, e[f + 3], 14, -187363961), h = c(h, p, m, l, e[f + 8], 20, 1163531501), l = c(l, h, p, m, e[f + 13], 5, -1444681467), m = c(m, l, h, p, e[f + 2], 9, -51403784), p = c(p, m, l, h, e[f + 7], 14, 1735328473), h = c(h, p, m, l, e[f + 12], 20, -1926607734), l = d(l, h, p, m, e[f + 5], 4, -378558), m = d(m, l, h, p, e[f + 8], 11, -2022574463), p = d(p, m, l, h, e[f + 11], 16, 1839030562), h = d(h, p, m, l, e[f + 14], 23, -35309556), l = d(l, h, p, m, e[f + 1], 4, -1530992060), m = d(m, l, h, p, e[f + 4], 11, 1272893353), p = d(p, m, l, h, e[f + 7], 16, -155497632), h = d(h, p, m, l, e[f + 10], 23, -1094730640), l = d(l, h, p, m, e[f + 13], 4, 681279174), m = d(m, l, h, p, e[f + 0], 11, -358537222), p = d(p, m, l, h, e[f + 3], 16, -722521979), h = d(h, p, m, l, e[f + 6], 23, 76029189), l = d(l, h, p, m, e[f + 9], 4, -640364487), m = d(m, l, h, p, e[f + 12], 11, -421815835), p = d(p, m, l, h, e[f + 15], 16, 530742520), h = d(h, p, m, l, e[f + 2], 23, -995338651), l = u(l, h, p, m, e[f + 0], 6, -198630844), m = u(m, l, h, p, e[f + 7], 10, 1126891415), p = u(p, m, l, h, e[f + 14], 15, -1416354905), h = u(h, p, m, l, e[f + 5], 21, -57434055), l = u(l, h, p, m, e[f + 12], 6, 1700485571), m = u(m, l, h, p, e[f + 3], 10, -1894986606), p = u(p, m, l, h, e[f + 10], 15, -1051523), h = u(h, p, m, l, e[f + 1], 21, -2054922799), l = u(l, h, p, m, e[f + 8], 6, 1873313359), m = u(m, l, h, p, e[f + 15], 10, -30611744), p = u(p, m, l, h, e[f + 6], 15, -1560198380), h = u(h, p, m, l, e[f + 13], 21, 1309151649), l = u(l, h, p, m, e[f + 4], 6, -145523070), m = u(m, l, h, p, e[f + 11], 10, -1120210379), p = u(p, m, l, h, e[f + 2], 15, 718787259), h = u(h, p, m, l, e[f + 9], 21, -343485551), l = r(l, n), h = r(h, i), p = r(p, s), m = r(m, o); return [l, h, p, m]; }, h = { hexdigest: function (e) { return function (e) { for (var t = "", n = 0; n < 4 * e.length; n++)
                    t += "0123456789abcdef".charAt(e[n >> 2] >> n % 4 * 8 + 4 & 15) + "0123456789abcdef".charAt(e[n >> 2] >> n % 4 * 8 & 15); return t; }(l(s(e), 8 * e.length)); }, hash: function (e) { return function (e) { for (var t = "", n = 0; n < 32 * e.length; n += 8)
                    t += String.fromCharCode(e[n >> 5] >>> n % 32 & 255); return t; }(l(s(e), 8 * e.length)); } };
            function p(e, t) { e[t >> 5] |= 128 << 24 - t % 32, e[15 + (t + 64 >> 9 << 4)] = t; var n, i, r, s, o, a, c, d, u = new Array(80), l = 1732584193, h = -271733879, p = -1732584194, g = 271733878, S = -1009589776; for (n = 0; n < e.length; n += 16) {
                for (s = l, o = h, a = p, c = g, d = S, i = 0; i < 80; i++)
                    u[i] = i < 16 ? e[n + i] : v(u[i - 3] ^ u[i - 8] ^ u[i - 14] ^ u[i - 16], 1), r = _(_(v(l, 5), m(i, h, p, g)), _(_(S, u[i]), f(i))), S = g, g = p, p = v(h, 30), h = l, l = r;
                l = _(l, s), h = _(h, o), p = _(p, a), g = _(g, c), S = _(S, d);
            } return [l, h, p, g, S]; }
            function m(e, t, n, i) { return e < 20 ? t & n | ~t & i : e < 40 ? t ^ n ^ i : e < 60 ? t & n | t & i | n & i : t ^ n ^ i; }
            function f(e) { return e < 20 ? 1518500249 : e < 40 ? 1859775393 : e < 60 ? -1894007588 : -899497514; }
            function g(e, t) { var n = S(e); n.length > 16 && (n = p(n, 8 * e.length)); for (var i = new Array(16), r = new Array(16), s = 0; s < 16; s++)
                i[s] = 909522486 ^ n[s], r[s] = 1549556828 ^ n[s]; var o = p(i.concat(S(t)), 512 + 8 * t.length); return p(r.concat(o), 672); }
            function _(e, t) { var n = (65535 & e) + (65535 & t); return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n; }
            function v(e, t) { return e << t | e >>> 32 - t; }
            function S(e) { for (var t = [], n = 0; n < 8 * e.length; n += 8)
                t[n >> 5] |= (255 & e.charCodeAt(n / 8)) << 24 - n % 32; return t; }
            function y(e) { for (var t, n, i = "", r = 0; r < 4 * e.length; r += 3)
                for (t = (e[r >> 2] >> 8 * (3 - r % 4) & 255) << 16 | (e[r + 1 >> 2] >> 8 * (3 - (r + 1) % 4) & 255) << 8 | e[r + 2 >> 2] >> 8 * (3 - (r + 2) % 4) & 255, n = 0; n < 4; n++)
                    8 * r + 6 * n > 32 * e.length ? i += "=" : i += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t >> 6 * (3 - n) & 63); return i; }
            function E(e) { for (var t = "", n = 0; n < 32 * e.length; n += 8)
                t += String.fromCharCode(e[n >> 5] >>> 24 - n % 32 & 255); return t; }
            var b = { b64_hmac_sha1: function (e, t) { return y(g(e, t)); }, b64_sha1: function (e) { return y(p(S(e), 8 * e.length)); }, binb2str: E, core_hmac_sha1: g, str_hmac_sha1: function (e, t) { return E(g(e, t)); }, str_sha1: function (e) { return E(p(S(e), 8 * e.length)); } }, T = function (e) { var t, n, i = "", r = e.length; for (t = 0; t < r; t++)
                (n = e.charCodeAt(t)) >= 0 && n <= 127 ? i += e.charAt(t) : n > 2047 ? (i += String.fromCharCode(224 | n >> 12 & 15), i += String.fromCharCode(128 | n >> 6 & 63), i += String.fromCharCode(128 | n >> 0 & 63)) : (i += String.fromCharCode(192 | n >> 6 & 31), i += String.fromCharCode(128 | n >> 0 & 63)); return i; }, C = function (e) { for (var t in e = e || {})
                if (Object.prototype.hasOwnProperty.call(e, t)) {
                    var i = "", r = "", s = "", o = e[t], a = "object" === n(o), c = escape(unescape(a ? o.value : o));
                    a && (i = o.expires ? ";expires=" + o.expires : "", r = o.domain ? ";domain=" + o.domain : "", s = o.path ? ";path=" + o.path : ""), document.cookie = t + "=" + c + i + r + s;
                } };
            function R(e, t) { return new I.Builder(e, t); }
            function A(e) { return new I.Builder("iq", e); }
            function w(e) { return new I.Builder("presence", e); }
            var I = { VERSION: "@VERSION@", NS: { HTTPBIND: "http://jabber.org/protocol/httpbind", BOSH: "urn:xmpp:xbosh", CLIENT: "jabber:client", AUTH: "jabber:iq:auth", ROSTER: "jabber:iq:roster", PROFILE: "jabber:iq:profile", DISCO_INFO: "http://jabber.org/protocol/disco#info", DISCO_ITEMS: "http://jabber.org/protocol/disco#items", MUC: "http://jabber.org/protocol/muc", SASL: "urn:ietf:params:xml:ns:xmpp-sasl", STREAM: "http://etherx.jabber.org/streams", FRAMING: "urn:ietf:params:xml:ns:xmpp-framing", BIND: "urn:ietf:params:xml:ns:xmpp-bind", SESSION: "urn:ietf:params:xml:ns:xmpp-session", VERSION: "jabber:iq:version", STANZAS: "urn:ietf:params:xml:ns:xmpp-stanzas", XHTML_IM: "http://jabber.org/protocol/xhtml-im", XHTML: "http://www.w3.org/1999/xhtml" }, XHTML: { tags: ["a", "blockquote", "br", "cite", "em", "img", "li", "ol", "p", "span", "strong", "ul", "body"], attributes: { a: ["href"], blockquote: ["style"], br: [], cite: ["style"], em: [], img: ["src", "alt", "style", "height", "width"], li: ["style"], ol: ["style"], p: ["style"], span: ["style"], strong: [], ul: ["style"], body: [] }, css: ["background-color", "color", "font-family", "font-size", "font-style", "font-weight", "margin-left", "margin-right", "text-align", "text-decoration"], validTag: function (e) { for (var t = 0; t < I.XHTML.tags.length; t++)
                        if (e === I.XHTML.tags[t])
                            return !0; return !1; }, validAttribute: function (e, t) { if (void 0 !== I.XHTML.attributes[e] && I.XHTML.attributes[e].length > 0)
                        for (var n = 0; n < I.XHTML.attributes[e].length; n++)
                            if (t === I.XHTML.attributes[e][n])
                                return !0; return !1; }, validCSS: function (e) { for (var t = 0; t < I.XHTML.css.length; t++)
                        if (e === I.XHTML.css[t])
                            return !0; return !1; } }, Status: { ERROR: 0, CONNECTING: 1, CONNFAIL: 2, AUTHENTICATING: 3, AUTHFAIL: 4, CONNECTED: 5, DISCONNECTED: 6, DISCONNECTING: 7, ATTACHED: 8, REDIRECT: 9, CONNTIMEOUT: 10, BINDREQUIRED: 11 }, ErrorCondition: { BAD_FORMAT: "bad-format", CONFLICT: "conflict", MISSING_JID_NODE: "x-strophe-bad-non-anon-jid", NO_AUTH_MECH: "no-auth-mech", UNKNOWN_REASON: "unknown" }, LogLevel: { DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, FATAL: 4 }, ElementType: { NORMAL: 1, TEXT: 3, CDATA: 4, FRAGMENT: 11 }, TIMEOUT: 1.1, SECONDARY_TIMEOUT: .1, addNamespace: function (e, t) { I.NS[e] = t; }, forEachChild: function (e, t, n) { for (var i = 0; i < e.childNodes.length; i++) {
                    var r = e.childNodes[i];
                    r.nodeType !== I.ElementType.NORMAL || t && !this.isTagEqual(r, t) || n(r);
                } }, isTagEqual: function (e, t) { return e.tagName === t; }, _xmlGenerator: null, _makeGenerator: function () { var e; return void 0 === document.implementation.createDocument || document.implementation.createDocument && document.documentMode && document.documentMode < 10 ? (e = this._getIEXmlDom()).appendChild(e.createElement("strophe")) : e = document.implementation.createDocument("jabber:client", "strophe", null), e; }, xmlGenerator: function () { return I._xmlGenerator || (I._xmlGenerator = I._makeGenerator()), I._xmlGenerator; }, _getIEXmlDom: function () { for (var e = null, t = ["Msxml2.DOMDocument.6.0", "Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "MSXML2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"], n = 0; n < t.length && null === e; n++)
                    try {
                        e = new ActiveXObject(t[n]);
                    }
                    catch (t) {
                        e = null;
                    } return e; }, xmlElement: function (e) { if (!e)
                    return null; for (var t = I.xmlGenerator().createElement(e), i = 1; i < arguments.length; i++) {
                    var r = arguments[i];
                    if (r)
                        if ("string" == typeof r || "number" == typeof r)
                            t.appendChild(I.xmlTextNode(r));
                        else if ("object" === n(r) && "function" == typeof r.sort)
                            for (var s = 0; s < r.length; s++) {
                                var o = r[s];
                                "object" === n(o) && "function" == typeof o.sort && void 0 !== o[1] && null !== o[1] && t.setAttribute(o[0], o[1]);
                            }
                        else if ("object" === n(r))
                            for (var a in r)
                                Object.prototype.hasOwnProperty.call(r, a) && void 0 !== r[a] && null !== r[a] && t.setAttribute(a, r[a]);
                } return t; }, xmlescape: function (e) { return e = (e = (e = (e = (e = e.replace(/\&/g, "&amp;")).replace(/</g, "&lt;")).replace(/>/g, "&gt;")).replace(/'/g, "&apos;")).replace(/"/g, "&quot;"); }, xmlunescape: function (e) { return e = (e = (e = (e = (e = e.replace(/\&amp;/g, "&")).replace(/&lt;/g, "<")).replace(/&gt;/g, ">")).replace(/&apos;/g, "'")).replace(/&quot;/g, '"'); }, xmlTextNode: function (e) { return I.xmlGenerator().createTextNode(e); }, xmlHtmlNode: function (e) { var t; return DOMParser ? t = (new DOMParser).parseFromString(e, "text/xml") : ((t = new ActiveXObject("Microsoft.XMLDOM")).async = "false", t.loadXML(e)), t; }, getText: function (e) { if (!e)
                    return null; var t = ""; 0 === e.childNodes.length && e.nodeType === I.ElementType.TEXT && (t += e.nodeValue); for (var n = 0; n < e.childNodes.length; n++)
                    e.childNodes[n].nodeType === I.ElementType.TEXT && (t += e.childNodes[n].nodeValue); return I.xmlescape(t); }, copyElement: function (e) { var t; if (e.nodeType === I.ElementType.NORMAL) {
                    t = I.xmlElement(e.tagName);
                    for (var n = 0; n < e.attributes.length; n++)
                        t.setAttribute(e.attributes[n].nodeName, e.attributes[n].value);
                    for (var i = 0; i < e.childNodes.length; i++)
                        t.appendChild(I.copyElement(e.childNodes[i]));
                }
                else
                    e.nodeType === I.ElementType.TEXT && (t = I.xmlGenerator().createTextNode(e.nodeValue)); return t; }, createHtml: function (e) { var t; if (e.nodeType === I.ElementType.NORMAL) {
                    var i = e.nodeName.toLowerCase();
                    if (I.XHTML.validTag(i))
                        try {
                            t = I.xmlElement(i);
                            for (var r = 0; r < I.XHTML.attributes[i].length; r++) {
                                var s = I.XHTML.attributes[i][r], o = e.getAttribute(s);
                                if (null != o && "" !== o && !1 !== o && 0 !== o)
                                    if ("style" === s && "object" === n(o) && void 0 !== o.cssText && (o = o.cssText), "style" === s) {
                                        for (var a = [], c = o.split(";"), d = 0; d < c.length; d++) {
                                            var u = c[d].split(":"), l = u[0].replace(/^\s*/, "").replace(/\s*$/, "").toLowerCase();
                                            if (I.XHTML.validCSS(l)) {
                                                var h = u[1].replace(/^\s*/, "").replace(/\s*$/, "");
                                                a.push(l + ": " + h);
                                            }
                                        }
                                        a.length > 0 && (o = a.join("; "), t.setAttribute(s, o));
                                    }
                                    else
                                        t.setAttribute(s, o);
                            }
                            for (var p = 0; p < e.childNodes.length; p++)
                                t.appendChild(I.createHtml(e.childNodes[p]));
                        }
                        catch (e) {
                            t = I.xmlTextNode("");
                        }
                    else {
                        t = I.xmlGenerator().createDocumentFragment();
                        for (var m = 0; m < e.childNodes.length; m++)
                            t.appendChild(I.createHtml(e.childNodes[m]));
                    }
                }
                else if (e.nodeType === I.ElementType.FRAGMENT) {
                    t = I.xmlGenerator().createDocumentFragment();
                    for (var f = 0; f < e.childNodes.length; f++)
                        t.appendChild(I.createHtml(e.childNodes[f]));
                }
                else
                    e.nodeType === I.ElementType.TEXT && (t = I.xmlTextNode(e.nodeValue)); return t; }, escapeNode: function (e) { return "string" != typeof e ? e : e.replace(/^\s+|\s+$/g, "").replace(/\\/g, "\\5c").replace(/ /g, "\\20").replace(/\"/g, "\\22").replace(/\&/g, "\\26").replace(/\'/g, "\\27").replace(/\//g, "\\2f").replace(/:/g, "\\3a").replace(/</g, "\\3c").replace(/>/g, "\\3e").replace(/@/g, "\\40"); }, unescapeNode: function (e) { return "string" != typeof e ? e : e.replace(/\\20/g, " ").replace(/\\22/g, '"').replace(/\\26/g, "&").replace(/\\27/g, "'").replace(/\\2f/g, "/").replace(/\\3a/g, ":").replace(/\\3c/g, "<").replace(/\\3e/g, ">").replace(/\\40/g, "@").replace(/\\5c/g, "\\"); }, getNodeFromJid: function (e) { return e.indexOf("@") < 0 ? null : e.split("@")[0]; }, getDomainFromJid: function (e) { var t = I.getBareJidFromJid(e); if (t.indexOf("@") < 0)
                    return t; var n = t.split("@"); return n.splice(0, 1), n.join("@"); }, getResourceFromJid: function (e) { if (!e)
                    return null; var t = e.split("/"); return t.length < 2 ? null : (t.splice(0, 1), t.join("/")); }, getBareJidFromJid: function (e) { return e ? e.split("/")[0] : null; }, _handleError: function (e) { void 0 !== e.stack && I.fatal(e.stack), e.sourceURL ? I.fatal("error: " + this.handler + " " + e.sourceURL + ":" + e.line + " - " + e.name + ": " + e.message) : e.fileName ? I.fatal("error: " + this.handler + " " + e.fileName + ":" + e.lineNumber + " - " + e.name + ": " + e.message) : I.fatal("error: " + e.message); }, log: function (e, t) { e === this.LogLevel.FATAL && "object" === n(window.console) && "function" == typeof window.console.error && window.console.error(t); }, debug: function (e) { this.log(this.LogLevel.DEBUG, e); }, info: function (e) { this.log(this.LogLevel.INFO, e); }, warn: function (e) { this.log(this.LogLevel.WARN, e); }, error: function (e) { this.log(this.LogLevel.ERROR, e); }, fatal: function (e) { this.log(this.LogLevel.FATAL, e); }, serialize: function (e) { if (!e)
                    return null; "function" == typeof e.tree && (e = e.tree()); var t = i(Array(e.attributes.length).keys()).map((function (t) { return e.attributes[t].nodeName; })); t.sort(); var n = t.reduce((function (t, n) { return "".concat(t, " ").concat(n, '="').concat(I.xmlescape(e.attributes.getNamedItem(n).value), '"'); }), "<".concat(e.nodeName)); if (e.childNodes.length > 0) {
                    n += ">";
                    for (var r = 0; r < e.childNodes.length; r++) {
                        var s = e.childNodes[r];
                        switch (s.nodeType) {
                            case I.ElementType.NORMAL:
                                n += I.serialize(s);
                                break;
                            case I.ElementType.TEXT:
                                n += I.xmlescape(s.nodeValue);
                                break;
                            case I.ElementType.CDATA: n += "<![CDATA[" + s.nodeValue + "]]>";
                        }
                    }
                    n += "</" + e.nodeName + ">";
                }
                else
                    n += "/>"; return n; }, _requestId: 0, _connectionPlugins: {}, addConnectionPlugin: function (e, t) { I._connectionPlugins[e] = t; }, Builder: function (e, t) { "presence" !== e && "message" !== e && "iq" !== e || (t && !t.xmlns ? t.xmlns = I.NS.CLIENT : t || (t = { xmlns: I.NS.CLIENT })), this.nodeTree = I.xmlElement(e, t), this.node = this.nodeTree; } };
            I.Builder.prototype = { tree: function () { return this.nodeTree; }, toString: function () { return I.serialize(this.nodeTree); }, up: function () { return this.node = this.node.parentNode, this; }, root: function () { return this.node = this.nodeTree, this; }, attrs: function (e) { for (var t in e)
                    Object.prototype.hasOwnProperty.call(e, t) && (void 0 === e[t] ? this.node.removeAttribute(t) : this.node.setAttribute(t, e[t])); return this; }, c: function (e, t, n) { var i = I.xmlElement(e, t, n); return this.node.appendChild(i), "string" != typeof n && "number" != typeof n && (this.node = i), this; }, cnode: function (e) { var t, n = I.xmlGenerator(); try {
                    t = void 0 !== n.importNode;
                }
                catch (e) {
                    t = !1;
                } var i = t ? n.importNode(e, !0) : I.copyElement(e); return this.node.appendChild(i), this.node = i, this; }, t: function (e) { var t = I.xmlTextNode(e); return this.node.appendChild(t), this; }, h: function (e) { var t = document.createElement("body"); t.innerHTML = e; for (var n = I.createHtml(t); n.childNodes.length > 0;)
                    this.node.appendChild(n.childNodes[0]); return this; } }, I.Handler = function (e, t, n, i, r, s, o) { this.handler = e, this.ns = t, this.name = n, this.type = i, this.id = r, this.options = o || { matchBareFromJid: !1, ignoreNamespaceFragment: !1 }, this.options.matchBare && (I.warn('The "matchBare" option is deprecated, use "matchBareFromJid" instead.'), this.options.matchBareFromJid = this.options.matchBare, delete this.options.matchBare), this.options.matchBareFromJid ? this.from = s ? I.getBareJidFromJid(s) : null : this.from = s, this.user = !0; }, I.Handler.prototype = { getNamespace: function (e) { var t = e.getAttribute("xmlns"); return t && this.options.ignoreNamespaceFragment && (t = t.split("#")[0]), t; }, namespaceMatch: function (e) { var t = this, n = !1; return !this.ns || (I.forEachChild(e, null, (function (e) { t.getNamespace(e) === t.ns && (n = !0); })), n || this.getNamespace(e) === this.ns); }, isMatch: function (e) { var t = e.getAttribute("from"); this.options.matchBareFromJid && (t = I.getBareJidFromJid(t)); var n = e.getAttribute("type"); return !(!this.namespaceMatch(e) || this.name && !I.isTagEqual(e, this.name) || this.type && (Array.isArray(this.type) ? -1 === this.type.indexOf(n) : n !== this.type) || this.id && e.getAttribute("id") !== this.id || this.from && t !== this.from); }, run: function (e) { var t = null; try {
                    t = this.handler(e);
                }
                catch (e) {
                    throw I._handleError(e), e;
                } return t; }, toString: function () { return "{Handler: " + this.handler + "(" + this.name + "," + this.id + "," + this.ns + ")}"; } }, I.TimedHandler = function (e, t) { this.period = e, this.handler = t, this.lastCalled = (new Date).getTime(), this.user = !0; }, I.TimedHandler.prototype = { run: function () { return this.lastCalled = (new Date).getTime(), this.handler(); }, reset: function () { this.lastCalled = (new Date).getTime(); }, toString: function () { return "{TimedHandler: " + this.handler + "(" + this.period + ")}"; } }, I.Connection = function (e, t) { var n = this; this.service = e, this.options = t || {}; var i = this.options.protocol || ""; for (var r in 0 === e.indexOf("ws:") || 0 === e.indexOf("wss:") || 0 === i.indexOf("ws") ? this._proto = new I.Websocket(this) : this._proto = new I.Bosh(this), this.jid = "", this.domain = null, this.features = null, this._sasl_data = {}, this.do_session = !1, this.do_bind = !1, this.timedHandlers = [], this.handlers = [], this.removeTimeds = [], this.removeHandlers = [], this.addTimeds = [], this.addHandlers = [], this.protocolErrorHandlers = { HTTP: {}, websocket: {} }, this._idleTimeout = null, this._disconnectTimeout = null, this.authenticated = !1, this.connected = !1, this.disconnecting = !1, this.do_authentication = !0, this.paused = !1, this.restored = !1, this._data = [], this._uniqueId = 0, this._sasl_success_handler = null, this._sasl_failure_handler = null, this._sasl_challenge_handler = null, this.maxRetries = 5, this._idleTimeout = setTimeout((function () { return n._onIdle(); }), 100), C(this.options.cookies), this.registerSASLMechanisms(this.options.mechanisms), I._connectionPlugins)
                if (Object.prototype.hasOwnProperty.call(I._connectionPlugins, r)) {
                    var s = function () { };
                    s.prototype = I._connectionPlugins[r], this[r] = new s, this[r].init(this);
                } }, I.Connection.prototype = { reset: function () { this._proto._reset(), this.do_session = !1, this.do_bind = !1, this.timedHandlers = [], this.handlers = [], this.removeTimeds = [], this.removeHandlers = [], this.addTimeds = [], this.addHandlers = [], this.authenticated = !1, this.connected = !1, this.disconnecting = !1, this.restored = !1, this._data = [], this._requests = [], this._uniqueId = 0; }, pause: function () { this.paused = !0; }, resume: function () { this.paused = !1; }, getUniqueId: function (e) { var t = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (e) { var t = 16 * Math.random() | 0; return ("x" === e ? t : 3 & t | 8).toString(16); })); return "string" == typeof e || "number" == typeof e ? t + ":" + e : t + ""; }, addProtocolErrorHandler: function (e, t, n) { this.protocolErrorHandlers[e][t] = n; }, connect: function (e, t, n, i, r, s, o) { this.jid = e, this.authzid = I.getBareJidFromJid(this.jid), this.authcid = o || I.getNodeFromJid(this.jid), this.pass = t, this.servtype = "xmpp", this.connect_callback = n, this.disconnecting = !1, this.connected = !1, this.authenticated = !1, this.restored = !1, this.domain = I.getDomainFromJid(this.jid), this._changeConnectStatus(I.Status.CONNECTING, null), this._proto._connect(i, r, s); }, attach: function (e, t, n, i, r, s, o) { if (!(this._proto instanceof I.Bosh)) {
                    var a = new Error('The "attach" method can only be used with a BOSH connection.');
                    throw a.name = "StropheSessionError", a;
                } this._proto._attach(e, t, n, i, r, s, o); }, restore: function (e, t, n, i, r) { if (!this._sessionCachingSupported()) {
                    var s = new Error('The "restore" method can only be used with a BOSH connection.');
                    throw s.name = "StropheSessionError", s;
                } this._proto._restore(e, t, n, i, r); }, _sessionCachingSupported: function () { if (this._proto instanceof I.Bosh) {
                    if (!JSON)
                        return !1;
                    try {
                        sessionStorage.setItem("_strophe_", "_strophe_"), sessionStorage.removeItem("_strophe_");
                    }
                    catch (e) {
                        return !1;
                    }
                    return !0;
                } return !1; }, xmlInput: function (e) { }, xmlOutput: function (e) { }, rawInput: function (e) { }, rawOutput: function (e) { }, nextValidRid: function (e) { }, send: function (e) { if (null !== e) {
                    if ("function" == typeof e.sort)
                        for (var t = 0; t < e.length; t++)
                            this._queueData(e[t]);
                    else
                        "function" == typeof e.tree ? this._queueData(e.tree()) : this._queueData(e);
                    this._proto._send();
                } }, flush: function () { clearTimeout(this._idleTimeout), this._onIdle(); }, sendPresence: function (e, t, n, i) { var r = this, s = null; "function" == typeof e.tree && (e = e.tree()); var o = e.getAttribute("id"); if (o || (o = this.getUniqueId("sendPresence"), e.setAttribute("id", o)), "function" == typeof t || "function" == typeof n) {
                    var a = this.addHandler((function (e) { s && r.deleteTimedHandler(s), "error" === e.getAttribute("type") ? n && n(e) : t && t(e); }), null, "presence", null, o);
                    i && (s = this.addTimedHandler(i, (function () { return r.deleteHandler(a), n && n(null), !1; })));
                } return this.send(e), o; }, sendIQ: function (e, t, n, i) { var r = this, s = null; "function" == typeof e.tree && (e = e.tree()); var o = e.getAttribute("id"); if (o || (o = this.getUniqueId("sendIQ"), e.setAttribute("id", o)), "function" == typeof t || "function" == typeof n) {
                    var a = this.addHandler((function (e) { s && r.deleteTimedHandler(s); var i = e.getAttribute("type"); if ("result" === i)
                        t && t(e);
                    else {
                        if ("error" !== i) {
                            var o = new Error("Got bad IQ type of ".concat(i));
                            throw o.name = "StropheError", o;
                        }
                        n && n(e);
                    } }), null, "iq", ["error", "result"], o);
                    i && (s = this.addTimedHandler(i, (function () { return r.deleteHandler(a), n && n(null), !1; })));
                } return this.send(e), o; }, _queueData: function (e) { if (null === e || !e.tagName || !e.childNodes) {
                    var t = new Error("Cannot queue non-DOMElement.");
                    throw t.name = "StropheError", t;
                } this._data.push(e); }, _sendRestart: function () { var e = this; this._data.push("restart"), this._proto._sendRestart(), this._idleTimeout = setTimeout((function () { return e._onIdle(); }), 100); }, addTimedHandler: function (e, t) { var n = new I.TimedHandler(e, t); return this.addTimeds.push(n), n; }, deleteTimedHandler: function (e) { this.removeTimeds.push(e); }, addHandler: function (e, t, n, i, r, s, o) { var a = new I.Handler(e, t, n, i, r, s, o); return this.addHandlers.push(a), a; }, deleteHandler: function (e) { this.removeHandlers.push(e); var t = this.addHandlers.indexOf(e); t >= 0 && this.addHandlers.splice(t, 1); }, registerSASLMechanisms: function (e) { this.mechanisms = {}, (e = e || [I.SASLAnonymous, I.SASLExternal, I.SASLMD5, I.SASLOAuthBearer, I.SASLXOAuth2, I.SASLPlain, I.SASLSHA1]).forEach(this.registerSASLMechanism.bind(this)); }, registerSASLMechanism: function (e) { this.mechanisms[e.prototype.name] = e; }, disconnect: function (e) { if (this._changeConnectStatus(I.Status.DISCONNECTING, e), I.warn("Disconnect was called because: " + e), this.connected) {
                    var t = !1;
                    this.disconnecting = !0, this.authenticated && (t = w({ xmlns: I.NS.CLIENT, type: "unavailable" })), this._disconnectTimeout = this._addSysTimedHandler(3e3, this._onDisconnectTimeout.bind(this)), this._proto._disconnect(t);
                }
                else
                    I.warn("Disconnect was called before Strophe connected to the server"), this._proto._abortAllRequests(), this._doDisconnect(); }, _changeConnectStatus: function (e, t, n) { for (var i in I._connectionPlugins)
                    if (Object.prototype.hasOwnProperty.call(I._connectionPlugins, i)) {
                        var r = this[i];
                        if (r.statusChanged)
                            try {
                                r.statusChanged(e, t);
                            }
                            catch (e) {
                                I.error("".concat(i, " plugin caused an exception changing status: ").concat(e));
                            }
                    } if (this.connect_callback)
                    try {
                        this.connect_callback(e, t, n);
                    }
                    catch (e) {
                        I._handleError(e), I.error("User connection callback caused an exception: ".concat(e));
                    } }, _doDisconnect: function (e) { "number" == typeof this._idleTimeout && clearTimeout(this._idleTimeout), null !== this._disconnectTimeout && (this.deleteTimedHandler(this._disconnectTimeout), this._disconnectTimeout = null), I.debug("_doDisconnect was called"), this._proto._doDisconnect(), this.authenticated = !1, this.disconnecting = !1, this.restored = !1, this.handlers = [], this.timedHandlers = [], this.removeTimeds = [], this.removeHandlers = [], this.addTimeds = [], this.addHandlers = [], this._changeConnectStatus(I.Status.DISCONNECTED, e), this.connected = !1; }, _dataRecv: function (e, t) { var n = this; I.debug("_dataRecv called"); var i = this._proto._reqToData(e); if (null !== i) {
                    for (this.xmlInput !== I.Connection.prototype.xmlInput && (i.nodeName === this._proto.strip && i.childNodes.length ? this.xmlInput(i.childNodes[0]) : this.xmlInput(i)), this.rawInput !== I.Connection.prototype.rawInput && (t ? this.rawInput(t) : this.rawInput(I.serialize(i))); this.removeHandlers.length > 0;) {
                        var r = this.removeHandlers.pop(), s = this.handlers.indexOf(r);
                        s >= 0 && this.handlers.splice(s, 1);
                    }
                    for (; this.addHandlers.length > 0;)
                        this.handlers.push(this.addHandlers.pop());
                    if (this.disconnecting && this._proto._emptyQueue())
                        this._doDisconnect();
                    else {
                        var o = i.getAttribute("type");
                        if (null !== o && "terminate" === o) {
                            if (this.disconnecting)
                                return;
                            var a = i.getAttribute("condition"), c = i.getElementsByTagName("conflict");
                            return null !== a ? ("remote-stream-error" === a && c.length > 0 && (a = "conflict"), this._changeConnectStatus(I.Status.CONNFAIL, a)) : this._changeConnectStatus(I.Status.CONNFAIL, I.ErrorCondition.UNKOWN_REASON), void this._doDisconnect(a);
                        }
                        I.forEachChild(i, null, (function (e) { var t = n.handlers; n.handlers = []; for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            try {
                                (!r.isMatch(e) || !n.authenticated && r.user || r.run(e)) && n.handlers.push(r);
                            }
                            catch (e) {
                                I.warn("Removing Strophe handlers due to uncaught exception: " + e.message);
                            }
                        } }));
                    }
                } }, mechanisms: {}, _connect_cb: function (e, t, n) { var i; I.debug("_connect_cb was called"), this.connected = !0; try {
                    i = this._proto._reqToData(e);
                }
                catch (e) {
                    if (e.name !== I.ErrorCondition.BAD_FORMAT)
                        throw e;
                    this._changeConnectStatus(I.Status.CONNFAIL, I.ErrorCondition.BAD_FORMAT), this._doDisconnect(I.ErrorCondition.BAD_FORMAT);
                } if (i && (this.xmlInput !== I.Connection.prototype.xmlInput && (i.nodeName === this._proto.strip && i.childNodes.length ? this.xmlInput(i.childNodes[0]) : this.xmlInput(i)), this.rawInput !== I.Connection.prototype.rawInput && (n ? this.rawInput(n) : this.rawInput(I.serialize(i))), this._proto._connect_cb(i) !== I.Status.CONNFAIL))
                    if (i.getElementsByTagNameNS ? i.getElementsByTagNameNS(I.NS.STREAM, "features").length > 0 : i.getElementsByTagName("stream:features").length > 0 || i.getElementsByTagName("features").length > 0) {
                        var r = [], s = i.getElementsByTagName("mechanism");
                        if (s.length > 0)
                            for (var o = 0; o < s.length; o++) {
                                var a = I.getText(s[o]);
                                this.mechanisms[a] && r.push(this.mechanisms[a]);
                            }
                        0 !== r.length || 0 !== i.getElementsByTagName("auth").length ? !1 !== this.do_authentication && this.authenticate(r) : this._proto._no_auth_received(t);
                    }
                    else
                        this._proto._no_auth_received(t); }, sortMechanismsByPriority: function (e) { for (var t = 0; t < e.length - 1; ++t) {
                    for (var n = t, i = t + 1; i < e.length; ++i)
                        e[i].prototype.priority > e[n].prototype.priority && (n = i);
                    if (n !== t) {
                        var r = e[t];
                        e[t] = e[n], e[n] = r;
                    }
                } return e; }, authenticate: function (e) { this._attemptSASLAuth(e) || this._attemptLegacyAuth(); }, _attemptSASLAuth: function (e) { e = this.sortMechanismsByPriority(e || []); for (var t = !1, n = 0; n < e.length; ++n)
                    if (e[n].prototype.test(this)) {
                        this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, "success", null, null), this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, "failure", null, null), this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, "challenge", null, null), this._sasl_mechanism = new e[n], this._sasl_mechanism.onStart(this);
                        var i = R("auth", { xmlns: I.NS.SASL, mechanism: this._sasl_mechanism.name });
                        if (this._sasl_mechanism.isClientFirst) {
                            var r = this._sasl_mechanism.onChallenge(this, null);
                            i.t(btoa(r));
                        }
                        this.send(i.tree()), t = !0;
                        break;
                    } return t; }, _sasl_challenge_cb: function (e) { var t = atob(I.getText(e)), n = this._sasl_mechanism.onChallenge(this, t), i = R("response", { xmlns: I.NS.SASL }); return "" !== n && i.t(btoa(n)), this.send(i.tree()), !0; }, _attemptLegacyAuth: function () { null === I.getNodeFromJid(this.jid) ? (this._changeConnectStatus(I.Status.CONNFAIL, I.ErrorCondition.MISSING_JID_NODE), this.disconnect(I.ErrorCondition.MISSING_JID_NODE)) : (this._changeConnectStatus(I.Status.AUTHENTICATING, null), this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, "_auth_1"), this.send(A({ type: "get", to: this.domain, id: "_auth_1" }).c("query", { xmlns: I.NS.AUTH }).c("username", {}).t(I.getNodeFromJid(this.jid)).tree())); }, _onLegacyAuthIQResult: function (e) { var t = A({ type: "set", id: "_auth_2" }).c("query", { xmlns: I.NS.AUTH }).c("username", {}).t(I.getNodeFromJid(this.jid)).up().c("password").t(this.pass); return I.getResourceFromJid(this.jid) || (this.jid = I.getBareJidFromJid(this.jid) + "/strophe"), t.up().c("resource", {}).t(I.getResourceFromJid(this.jid)), this._addSysHandler(this._auth2_cb.bind(this), null, null, null, "_auth_2"), this.send(t.tree()), !1; }, _sasl_success_cb: function (e) { var t = this; if (this._sasl_data["server-signature"]) {
                    var n, i = atob(I.getText(e)).match(/([a-z]+)=([^,]+)(,|$)/);
                    if ("v" === i[1] && (n = i[2]), n !== this._sasl_data["server-signature"])
                        return this.deleteHandler(this._sasl_failure_handler), this._sasl_failure_handler = null, this._sasl_challenge_handler && (this.deleteHandler(this._sasl_challenge_handler), this._sasl_challenge_handler = null), this._sasl_data = {}, this._sasl_failure_cb(null);
                } I.info("SASL authentication succeeded."), this._sasl_mechanism && this._sasl_mechanism.onSuccess(), this.deleteHandler(this._sasl_failure_handler), this._sasl_failure_handler = null, this._sasl_challenge_handler && (this.deleteHandler(this._sasl_challenge_handler), this._sasl_challenge_handler = null); var r = [], s = function (e, n) { for (; e.length;)
                    t.deleteHandler(e.pop()); return t._onStreamFeaturesAfterSASL(n), !1; }; return r.push(this._addSysHandler((function (e) { return s(r, e); }), null, "stream:features", null, null)), r.push(this._addSysHandler((function (e) { return s(r, e); }), I.NS.STREAM, "features", null, null)), this._sendRestart(), !1; }, _onStreamFeaturesAfterSASL: function (e) { this.features = e; for (var t = 0; t < e.childNodes.length; t++) {
                    var n = e.childNodes[t];
                    "bind" === n.nodeName && (this.do_bind = !0), "session" === n.nodeName && (this.do_session = !0);
                } return this.do_bind ? (this.options.explicitResourceBinding ? this._changeConnectStatus(I.Status.BINDREQUIRED, null) : this.bind(), !1) : (this._changeConnectStatus(I.Status.AUTHFAIL, null), !1); }, bind: function () { if (this.do_bind) {
                    this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, "_bind_auth_2");
                    var e = I.getResourceFromJid(this.jid);
                    e ? this.send(A({ type: "set", id: "_bind_auth_2" }).c("bind", { xmlns: I.NS.BIND }).c("resource", {}).t(e).tree()) : this.send(A({ type: "set", id: "_bind_auth_2" }).c("bind", { xmlns: I.NS.BIND }).tree());
                }
                else
                    I.log(I.LogLevel.INFO, 'Strophe.Connection.prototype.bind called but "do_bind" is false'); }, _onResourceBindResultIQ: function (e) { var t; if ("error" === e.getAttribute("type"))
                    return I.warn("Resource binding failed."), e.getElementsByTagName("conflict").length > 0 && (t = I.ErrorCondition.CONFLICT), this._changeConnectStatus(I.Status.AUTHFAIL, t, e), !1; var n = e.getElementsByTagName("bind"); if (!(n.length > 0))
                    return I.warn("Resource binding failed."), this._changeConnectStatus(I.Status.AUTHFAIL, null, e), !1; var i = n[0].getElementsByTagName("jid"); i.length > 0 && (this.jid = I.getText(i[0]), this.do_session ? this._establishSession() : (this.authenticated = !0, this._changeConnectStatus(I.Status.CONNECTED, null))); }, _establishSession: function () { if (!this.do_session)
                    throw new Error("Strophe.Connection.prototype._establishSession " + "called but apparently ".concat(I.NS.SESSION, " wasn't advertised by the server")); this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, "_session_auth_2"), this.send(A({ type: "set", id: "_session_auth_2" }).c("session", { xmlns: I.NS.SESSION }).tree()); }, _onSessionResultIQ: function (e) { if ("result" === e.getAttribute("type"))
                    this.authenticated = !0, this._changeConnectStatus(I.Status.CONNECTED, null);
                else if ("error" === e.getAttribute("type"))
                    return I.warn("Session creation failed."), this._changeConnectStatus(I.Status.AUTHFAIL, null, e), !1; return !1; }, _sasl_failure_cb: function (e) { return this._sasl_success_handler && (this.deleteHandler(this._sasl_success_handler), this._sasl_success_handler = null), this._sasl_challenge_handler && (this.deleteHandler(this._sasl_challenge_handler), this._sasl_challenge_handler = null), this._sasl_mechanism && this._sasl_mechanism.onFailure(), this._changeConnectStatus(I.Status.AUTHFAIL, null, e), !1; }, _auth2_cb: function (e) { return "result" === e.getAttribute("type") ? (this.authenticated = !0, this._changeConnectStatus(I.Status.CONNECTED, null)) : "error" === e.getAttribute("type") && (this._changeConnectStatus(I.Status.AUTHFAIL, null, e), this.disconnect("authentication failed")), !1; }, _addSysTimedHandler: function (e, t) { var n = new I.TimedHandler(e, t); return n.user = !1, this.addTimeds.push(n), n; }, _addSysHandler: function (e, t, n, i, r) { var s = new I.Handler(e, t, n, i, r); return s.user = !1, this.addHandlers.push(s), s; }, _onDisconnectTimeout: function () { return I.debug("_onDisconnectTimeout was called"), this._changeConnectStatus(I.Status.CONNTIMEOUT, null), this._proto._onDisconnectTimeout(), this._doDisconnect(), !1; }, _onIdle: function () { for (var e = this; this.addTimeds.length > 0;)
                    this.timedHandlers.push(this.addTimeds.pop()); for (; this.removeTimeds.length > 0;) {
                    var t = this.removeTimeds.pop(), n = this.timedHandlers.indexOf(t);
                    n >= 0 && this.timedHandlers.splice(n, 1);
                } for (var i = (new Date).getTime(), r = [], s = 0; s < this.timedHandlers.length; s++) {
                    var o = this.timedHandlers[s];
                    !this.authenticated && o.user || (o.lastCalled + o.period - i <= 0 ? o.run() && r.push(o) : r.push(o));
                } this.timedHandlers = r, clearTimeout(this._idleTimeout), this._proto._onIdle(), this.connected && (this._idleTimeout = setTimeout((function () { return e._onIdle(); }), 100)); } }, I.SASLMechanism = function (e, t, n) { this.name = e, this.isClientFirst = t, this.priority = n; }, I.SASLMechanism.prototype = { test: function (e) { return !0; }, onStart: function (e) { this._connection = e; }, onChallenge: function (e, t) { throw new Error("You should implement challenge handling!"); }, onFailure: function () { this._connection = null; }, onSuccess: function () { this._connection = null; } }, I.SASLAnonymous = function () { }, I.SASLAnonymous.prototype = new I.SASLMechanism("ANONYMOUS", !1, 20), I.SASLAnonymous.prototype.test = function (e) { return null === e.authcid; }, I.SASLPlain = function () { }, I.SASLPlain.prototype = new I.SASLMechanism("PLAIN", !0, 50), I.SASLPlain.prototype.test = function (e) { return null !== e.authcid; }, I.SASLPlain.prototype.onChallenge = function (e) { var t = e.authzid; return t += "\0", t += e.authcid, t += "\0", t += e.pass, T(t); }, I.SASLSHA1 = function () { }, I.SASLSHA1.prototype = new I.SASLMechanism("SCRAM-SHA-1", !0, 70), I.SASLSHA1.prototype.test = function (e) { return null !== e.authcid; }, I.SASLSHA1.prototype.onChallenge = function (e, t, n) { var i = n || h.hexdigest("" + 1234567890 * Math.random()), r = "n=" + T(e.authcid); return r += ",r=", r += i, e._sasl_data.cnonce = i, e._sasl_data["client-first-message-bare"] = r, r = "n,," + r, this.onChallenge = function (e, t) { for (var n, i, r, s, o, a, c, d, u = "c=biws,", l = "".concat(e._sasl_data["client-first-message-bare"], ",").concat(t, ","), h = e._sasl_data.cnonce, p = /([a-z]+)=([^,]+)(,|$)/; t.match(p);) {
                var m = t.match(p);
                switch (t = t.replace(m[0], ""), m[1]) {
                    case "r":
                        n = m[2];
                        break;
                    case "s":
                        i = m[2];
                        break;
                    case "i": r = m[2];
                }
            } if (n.substr(0, h.length) !== h)
                return e._sasl_data = {}, e._sasl_failure_cb(); l += u += "r=" + n, i = atob(i), i += "\0\0\0"; var f = T(e.pass); for (s = a = b.core_hmac_sha1(f, i), c = 1; c < r; c++) {
                for (o = b.core_hmac_sha1(f, b.binb2str(a)), d = 0; d < 5; d++)
                    s[d] ^= o[d];
                a = o;
            } s = b.binb2str(s); var g = b.core_hmac_sha1(s, "Client Key"), _ = b.str_hmac_sha1(s, "Server Key"), v = b.core_hmac_sha1(b.str_sha1(b.binb2str(g)), l); for (e._sasl_data["server-signature"] = b.b64_hmac_sha1(_, l), d = 0; d < 5; d++)
                g[d] ^= v[d]; return u += ",p=" + btoa(b.binb2str(g)); }, r; }, I.SASLMD5 = function () { }, I.SASLMD5.prototype = new I.SASLMechanism("DIGEST-MD5", !1, 60), I.SASLMD5.prototype.test = function (e) { return null !== e.authcid; }, I.SASLMD5.prototype._quote = function (e) { return '"' + e.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"'; }, I.SASLMD5.prototype.onChallenge = function (e, t, n) { for (var i = /([a-z]+)=("[^"]+"|[^,"]+)(?:,|$)/, r = n || h.hexdigest("" + 1234567890 * Math.random()), s = "", o = null, a = ""; t.match(i);) {
                var c = t.match(i);
                switch (t = t.replace(c[0], ""), c[2] = c[2].replace(/^"(.+)"$/, "$1"), c[1]) {
                    case "realm":
                        s = c[2];
                        break;
                    case "nonce":
                        a = c[2];
                        break;
                    case "qop":
                        c[2];
                        break;
                    case "host": o = c[2];
                }
            } var d = e.servtype + "/" + e.domain; null !== o && (d = d + "/" + o); var u = T(e.authcid + ":" + s + ":" + this._connection.pass), l = h.hash(u) + ":" + a + ":" + r, p = "AUTHENTICATE:" + d, m = ""; return m += "charset=utf-8,", m += "username=" + this._quote(T(e.authcid)) + ",", m += "realm=" + this._quote(s) + ",", m += "nonce=" + this._quote(a) + ",", m += "nc=00000001,", m += "cnonce=" + this._quote(r) + ",", m += "digest-uri=" + this._quote(d) + ",", m += "response=" + h.hexdigest(h.hexdigest(l) + ":" + a + ":00000001:" + r + ":auth:" + h.hexdigest(p)) + ",", m += "qop=auth", this.onChallenge = function () { return ""; }, m; }, I.SASLOAuthBearer = function () { }, I.SASLOAuthBearer.prototype = new I.SASLMechanism("OAUTHBEARER", !0, 40), I.SASLOAuthBearer.prototype.test = function (e) { return null !== e.pass; }, I.SASLOAuthBearer.prototype.onChallenge = function (e) { var t = "n,"; return null !== e.authcid && (t = t + "a=" + e.authzid), t += ",", t += "", t += "auth=Bearer ", t += e.pass, t += "", T(t += ""); }, I.SASLExternal = function () { }, I.SASLExternal.prototype = new I.SASLMechanism("EXTERNAL", !0, 10), I.SASLExternal.prototype.onChallenge = function (e) { return e.authcid === e.authzid ? "" : e.authzid; }, I.SASLXOAuth2 = function () { }, I.SASLXOAuth2.prototype = new I.SASLMechanism("X-OAUTH2", !0, 30), I.SASLXOAuth2.prototype.test = function (e) { return null !== e.pass; }, I.SASLXOAuth2.prototype.onChallenge = function (e) { var t = "\0"; return null !== e.authcid && (t += e.authzid), t += "\0", t += e.pass, T(t); };
            var P = { Strophe: I, $build: R, $iq: A, $msg: function (e) { return new I.Builder("message", e); }, $pres: w, SHA1: b, MD5: h, b64_hmac_sha1: b.b64_hmac_sha1, b64_sha1: b.b64_sha1, str_hmac_sha1: b.str_hmac_sha1, str_sha1: b.str_sha1 }, O = P.Strophe, D = P.$build;
            O.Request = function (e, t, n, i) { this.id = ++O._requestId, this.xmlData = e, this.data = O.serialize(e), this.origFunc = t, this.func = t, this.rid = n, this.date = NaN, this.sends = i || 0, this.abort = !1, this.dead = null, this.age = function () { return this.date ? (new Date - this.date) / 1e3 : 0; }, this.timeDead = function () { return this.dead ? (new Date - this.dead) / 1e3 : 0; }, this.xhr = this._newXHR(); }, O.Request.prototype = { getResponse: function () { var e = null; if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {
                    if ("parsererror" === (e = this.xhr.responseXML.documentElement).tagName)
                        throw O.error("invalid response received"), O.error("responseText: " + this.xhr.responseText), O.error("responseXML: " + O.serialize(this.xhr.responseXML)), new Error("parsererror");
                }
                else if (this.xhr.responseText) {
                    if (O.debug("Got responseText but no responseXML; attempting to parse it with DOMParser..."), !(e = (new DOMParser).parseFromString(this.xhr.responseText, "application/xml").documentElement))
                        throw new Error("Parsing produced null node");
                    if (e.querySelector("parsererror")) {
                        O.error("invalid response received: " + e.querySelector("parsererror").textContent), O.error("responseText: " + this.xhr.responseText);
                        var t = new Error;
                        throw t.name = O.ErrorCondition.BAD_FORMAT, t;
                    }
                } return e; }, _newXHR: function () { var e = null; return window.XMLHttpRequest ? (e = new XMLHttpRequest).overrideMimeType && e.overrideMimeType("text/xml; charset=utf-8") : window.ActiveXObject && (e = new ActiveXObject("Microsoft.XMLHTTP")), e.onreadystatechange = this.func.bind(null, this), e; } }, O.Bosh = function (e) { this._conn = e, this.rid = Math.floor(4294967295 * Math.random()), this.sid = null, this.hold = 1, this.wait = 60, this.window = 5, this.errors = 0, this.inactivity = null, this.lastResponseHeaders = null, this._requests = []; }, O.Bosh.prototype = { strip: null, _buildBody: function () { var e = D("body", { rid: this.rid++, xmlns: O.NS.HTTPBIND }); return null !== this.sid && e.attrs({ sid: this.sid }), this._conn.options.keepalive && this._conn._sessionCachingSupported() && this._cacheSession(), e; }, _reset: function () { this.rid = Math.floor(4294967295 * Math.random()), this.sid = null, this.errors = 0, this._conn._sessionCachingSupported() && window.sessionStorage.removeItem("strophe-bosh-session"), this._conn.nextValidRid(this.rid); }, _connect: function (e, t, n) { this.wait = e || this.wait, this.hold = t || this.hold, this.errors = 0; var i = this._buildBody().attrs({ to: this._conn.domain, "xml:lang": "en", wait: this.wait, hold: this.hold, content: "text/xml; charset=utf-8", ver: "1.6", "xmpp:version": "1.0", "xmlns:xmpp": O.NS.BOSH }); n && i.attrs({ route: n }); var r = this._conn._connect_cb; this._requests.push(new O.Request(i.tree(), this._onRequestStateChange.bind(this, r.bind(this._conn)), i.tree().getAttribute("rid"))), this._throttledRequestHandler(); }, _attach: function (e, t, n, i, r, s, o) { this._conn.jid = e, this.sid = t, this.rid = n, this._conn.connect_callback = i, this._conn.domain = O.getDomainFromJid(this._conn.jid), this._conn.authenticated = !0, this._conn.connected = !0, this.wait = r || this.wait, this.hold = s || this.hold, this.window = o || this.window, this._conn._changeConnectStatus(O.Status.ATTACHED, null); }, _restore: function (e, t, n, i, r) { var s = JSON.parse(window.sessionStorage.getItem("strophe-bosh-session")); if (!(null != s && s.rid && s.sid && s.jid && (null == e || O.getBareJidFromJid(s.jid) === O.getBareJidFromJid(e) || null === O.getNodeFromJid(e) && O.getDomainFromJid(s.jid) === e))) {
                    var o = new Error("_restore: no restoreable session.");
                    throw o.name = "StropheSessionError", o;
                } this._conn.restored = !0, this._attach(s.jid, s.sid, s.rid, t, n, i, r); }, _cacheSession: function () { this._conn.authenticated ? this._conn.jid && this.rid && this.sid && window.sessionStorage.setItem("strophe-bosh-session", JSON.stringify({ jid: this._conn.jid, rid: this.rid, sid: this.sid })) : window.sessionStorage.removeItem("strophe-bosh-session"); }, _connect_cb: function (e) { var t = e.getAttribute("type"); if (null !== t && "terminate" === t) {
                    var n = e.getAttribute("condition");
                    O.error("BOSH-Connection failed: " + n);
                    var i = e.getElementsByTagName("conflict");
                    return null !== n ? ("remote-stream-error" === n && i.length > 0 && (n = "conflict"), this._conn._changeConnectStatus(O.Status.CONNFAIL, n)) : this._conn._changeConnectStatus(O.Status.CONNFAIL, "unknown"), this._conn._doDisconnect(n), O.Status.CONNFAIL;
                } this.sid || (this.sid = e.getAttribute("sid")); var r = e.getAttribute("requests"); r && (this.window = parseInt(r, 10)); var s = e.getAttribute("hold"); s && (this.hold = parseInt(s, 10)); var o = e.getAttribute("wait"); o && (this.wait = parseInt(o, 10)); var a = e.getAttribute("inactivity"); a && (this.inactivity = parseInt(a, 10)); }, _disconnect: function (e) { this._sendTerminate(e); }, _doDisconnect: function () { this.sid = null, this.rid = Math.floor(4294967295 * Math.random()), this._conn._sessionCachingSupported() && window.sessionStorage.removeItem("strophe-bosh-session"), this._conn.nextValidRid(this.rid); }, _emptyQueue: function () { return 0 === this._requests.length; }, _callProtocolErrorHandlers: function (e) { var t = this._getRequestStatus(e), n = this._conn.protocolErrorHandlers.HTTP[t]; n && n.call(this, t); }, _hitError: function (e) { this.errors++, O.warn("request errored, status: " + e + ", number of errors: " + this.errors), this.errors > 4 && this._conn._onDisconnectTimeout(); }, _no_auth_received: function (e) { O.warn("Server did not yet offer a supported authentication mechanism. Sending a blank poll request."), e = e ? e.bind(this._conn) : this._conn._connect_cb.bind(this._conn); var t = this._buildBody(); this._requests.push(new O.Request(t.tree(), this._onRequestStateChange.bind(this, e), t.tree().getAttribute("rid"))), this._throttledRequestHandler(); }, _onDisconnectTimeout: function () { this._abortAllRequests(); }, _abortAllRequests: function () { for (; this._requests.length > 0;) {
                    var e = this._requests.pop();
                    e.abort = !0, e.xhr.abort(), e.xhr.onreadystatechange = function () { };
                } }, _onIdle: function () { var e = this._conn._data; if (this._conn.authenticated && 0 === this._requests.length && 0 === e.length && !this._conn.disconnecting && (O.debug("no requests during idle cycle, sending blank request"), e.push(null)), !this._conn.paused) {
                    if (this._requests.length < 2 && e.length > 0) {
                        for (var t = this._buildBody(), n = 0; n < e.length; n++)
                            null !== e[n] && ("restart" === e[n] ? t.attrs({ to: this._conn.domain, "xml:lang": "en", "xmpp:restart": "true", "xmlns:xmpp": O.NS.BOSH }) : t.cnode(e[n]).up());
                        delete this._conn._data, this._conn._data = [], this._requests.push(new O.Request(t.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), t.tree().getAttribute("rid"))), this._throttledRequestHandler();
                    }
                    if (this._requests.length > 0) {
                        var i = this._requests[0].age();
                        null !== this._requests[0].dead && this._requests[0].timeDead() > Math.floor(O.SECONDARY_TIMEOUT * this.wait) && this._throttledRequestHandler(), i > Math.floor(O.TIMEOUT * this.wait) && (O.warn("Request " + this._requests[0].id + " timed out, over " + Math.floor(O.TIMEOUT * this.wait) + " seconds since last activity"), this._throttledRequestHandler());
                    }
                } }, _getRequestStatus: function (e, t) { var n; if (4 === e.xhr.readyState)
                    try {
                        n = e.xhr.status;
                    }
                    catch (e) {
                        O.error("Caught an error while retrieving a request's status, reqStatus: " + n);
                    } return void 0 === n && (n = "number" == typeof t ? t : 0), n; }, _onRequestStateChange: function (e, t) { if (O.debug("request id " + t.id + "." + t.sends + " state changed to " + t.xhr.readyState), t.abort)
                    t.abort = !1;
                else if (4 === t.xhr.readyState) {
                    var n = this._getRequestStatus(t);
                    if (this.lastResponseHeaders = t.xhr.getAllResponseHeaders(), this.disconnecting && n >= 400)
                        return this._hitError(n), void this._callProtocolErrorHandlers(t);
                    var i = n > 0 && n < 500, r = t.sends > this._conn.maxRetries;
                    if ((i || r) && (this._removeRequest(t), O.debug("request id " + t.id + " should now be removed")), 200 === n) {
                        var s = this._requests[0] === t;
                        (this._requests[1] === t || s && this._requests.length > 0 && this._requests[0].age() > Math.floor(O.SECONDARY_TIMEOUT * this.wait)) && this._restartRequest(0), this._conn.nextValidRid(Number(t.rid) + 1), O.debug("request id " + t.id + "." + t.sends + " got 200"), e(t), this.errors = 0;
                    }
                    else
                        0 === n || n >= 400 && n < 600 || n >= 12e3 ? (O.error("request id " + t.id + "." + t.sends + " error " + n + " happened"), this._hitError(n), this._callProtocolErrorHandlers(t), n >= 400 && n < 500 && (this._conn._changeConnectStatus(O.Status.DISCONNECTING, null), this._conn._doDisconnect())) : O.error("request id " + t.id + "." + t.sends + " error " + n + " happened");
                    i || r ? r && !this._conn.connected && this._conn._changeConnectStatus(O.Status.CONNFAIL, "giving-up") : this._throttledRequestHandler();
                } }, _processRequest: function (e) { var t = this, n = this._requests[e], i = this._getRequestStatus(n, -1); if (n.sends > this._conn.maxRetries)
                    this._conn._onDisconnectTimeout();
                else {
                    var r = n.age(), s = !isNaN(r) && r > Math.floor(O.TIMEOUT * this.wait), o = null !== n.dead && n.timeDead() > Math.floor(O.SECONDARY_TIMEOUT * this.wait), a = 4 === n.xhr.readyState && (i < 1 || i >= 500);
                    if ((s || o || a) && (o && O.error("Request ".concat(this._requests[e].id, " timed out (secondary), restarting")), n.abort = !0, n.xhr.abort(), n.xhr.onreadystatechange = function () { }, this._requests[e] = new O.Request(n.xmlData, n.origFunc, n.rid, n.sends), n = this._requests[e]), 0 === n.xhr.readyState) {
                        O.debug("request id " + n.id + "." + n.sends + " posting");
                        try {
                            var c = this._conn.options.contentType || "text/xml; charset=utf-8";
                            n.xhr.open("POST", this._conn.service, !this._conn.options.sync), void 0 !== n.xhr.setRequestHeader && n.xhr.setRequestHeader("Content-Type", c), this._conn.options.withCredentials && (n.xhr.withCredentials = !0);
                        }
                        catch (e) {
                            return O.error("XHR open failed: " + e.toString()), this._conn.connected || this._conn._changeConnectStatus(O.Status.CONNFAIL, "bad-service"), void this._conn.disconnect();
                        }
                        var d = function () { if (n.date = new Date, t._conn.options.customHeaders) {
                            var e = t._conn.options.customHeaders;
                            for (var i in e)
                                Object.prototype.hasOwnProperty.call(e, i) && n.xhr.setRequestHeader(i, e[i]);
                        } n.xhr.send(n.data); };
                        if (n.sends > 1) {
                            var u = 1e3 * Math.min(Math.floor(O.TIMEOUT * this.wait), Math.pow(n.sends, 3));
                            setTimeout((function () { d(); }), u);
                        }
                        else
                            d();
                        n.sends++, this._conn.xmlOutput !== O.Connection.prototype.xmlOutput && (n.xmlData.nodeName === this.strip && n.xmlData.childNodes.length ? this._conn.xmlOutput(n.xmlData.childNodes[0]) : this._conn.xmlOutput(n.xmlData)), this._conn.rawOutput !== O.Connection.prototype.rawOutput && this._conn.rawOutput(n.data);
                    }
                    else
                        O.debug("_processRequest: " + (0 === e ? "first" : "second") + " request has readyState of " + n.xhr.readyState);
                } }, _removeRequest: function (e) { O.debug("removing request"); for (var t = this._requests.length - 1; t >= 0; t--)
                    e === this._requests[t] && this._requests.splice(t, 1); e.xhr.onreadystatechange = function () { }, this._throttledRequestHandler(); }, _restartRequest: function (e) { var t = this._requests[e]; null === t.dead && (t.dead = new Date), this._processRequest(e); }, _reqToData: function (e) { try {
                    return e.getResponse();
                }
                catch (e) {
                    if ("parsererror" !== e.message)
                        throw e;
                    this._conn.disconnect("strophe-parsererror");
                } }, _sendTerminate: function (e) { O.debug("_sendTerminate was called"); var t = this._buildBody().attrs({ type: "terminate" }); e && t.cnode(e.tree()); var n = new O.Request(t.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), t.tree().getAttribute("rid")); this._requests.push(n), this._throttledRequestHandler(); }, _send: function () { var e = this; clearTimeout(this._conn._idleTimeout), this._throttledRequestHandler(), this._conn._idleTimeout = setTimeout((function () { return e._conn._onIdle(); }), 100); }, _sendRestart: function () { this._throttledRequestHandler(), clearTimeout(this._conn._idleTimeout); }, _throttledRequestHandler: function () { this._requests ? O.debug("_throttledRequestHandler called with " + this._requests.length + " requests") : O.debug("_throttledRequestHandler called with undefined requests"), this._requests && 0 !== this._requests.length && (this._requests.length > 0 && this._processRequest(0), this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window && this._processRequest(1)); } };
            var N = P.Strophe, M = P.$build;
            return N.Websocket = function (e) { this._conn = e, this.strip = "wrapper"; var t = e.service; if (0 !== t.indexOf("ws:") && 0 !== t.indexOf("wss:")) {
                var n = "";
                "ws" === e.options.protocol && "https:" !== window.location.protocol ? n += "ws" : n += "wss", n += "://" + window.location.host, 0 !== t.indexOf("/") ? n += window.location.pathname + t : n += t, e.service = n;
            } }, N.Websocket.prototype = { _buildStream: function () { return M("open", { xmlns: N.NS.FRAMING, to: this._conn.domain, version: "1.0" }); }, _check_streamerror: function (e, t) { var n; if (0 === (n = e.getElementsByTagNameNS ? e.getElementsByTagNameNS(N.NS.STREAM, "error") : e.getElementsByTagName("stream:error")).length)
                    return !1; for (var i = n[0], r = "", s = "", o = 0; o < i.childNodes.length; o++) {
                    var a = i.childNodes[o];
                    if ("urn:ietf:params:xml:ns:xmpp-streams" !== a.getAttribute("xmlns"))
                        break;
                    "text" === a.nodeName ? s = a.textContent : r = a.nodeName;
                } var c = "WebSocket stream error: "; return c += r || "unknown", s && (c += " - " + s), N.error(c), this._conn._changeConnectStatus(t, r), this._conn._doDisconnect(), !0; }, _reset: function () { }, _connect: function () { this._closeSocket(), this.socket = new WebSocket(this._conn.service, "xmpp"), this.socket.onopen = this._onOpen.bind(this), this.socket.onerror = this._onError.bind(this), this.socket.onclose = this._onClose.bind(this), this.socket.onmessage = this._connect_cb_wrapper.bind(this); }, _connect_cb: function (e) { if (this._check_streamerror(e, N.Status.CONNFAIL))
                    return N.Status.CONNFAIL; }, _handleStreamStart: function (e) { var t = !1, n = e.getAttribute("xmlns"); "string" != typeof n ? t = "Missing xmlns in <open />" : n !== N.NS.FRAMING && (t = "Wrong xmlns in <open />: " + n); var i = e.getAttribute("version"); return "string" != typeof i ? t = "Missing version in <open />" : "1.0" !== i && (t = "Wrong version in <open />: " + i), !t || (this._conn._changeConnectStatus(N.Status.CONNFAIL, t), this._conn._doDisconnect(), !1); }, _connect_cb_wrapper: function (e) { if (0 === e.data.indexOf("<open ") || 0 === e.data.indexOf("<?xml")) {
                    var t = e.data.replace(/^(<\?.*?\?>\s*)*/, "");
                    if ("" === t)
                        return;
                    var n = (new DOMParser).parseFromString(t, "text/xml").documentElement;
                    this._conn.xmlInput(n), this._conn.rawInput(e.data), this._handleStreamStart(n) && this._connect_cb(n);
                }
                else if (0 === e.data.indexOf("<close ")) {
                    var i = (new DOMParser).parseFromString(e.data, "text/xml").documentElement;
                    this._conn.xmlInput(i), this._conn.rawInput(e.data);
                    var r = i.getAttribute("see-other-uri");
                    if (r) {
                        var s = this._conn.service;
                        (s.indexOf("wss:") >= 0 && r.indexOf("wss:") >= 0 || s.indexOf("ws:") >= 0) && (this._conn._changeConnectStatus(N.Status.REDIRECT, "Received see-other-uri, resetting connection"), this._conn.reset(), this._conn.service = r, this._connect());
                    }
                    else
                        this._conn._changeConnectStatus(N.Status.CONNFAIL, "Received closing stream"), this._conn._doDisconnect();
                }
                else {
                    var o = this._streamWrap(e.data), a = (new DOMParser).parseFromString(o, "text/xml").documentElement;
                    this.socket.onmessage = this._onMessage.bind(this), this._conn._connect_cb(a, null, e.data);
                } }, _disconnect: function (e) { if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {
                    e && this._conn.send(e);
                    var t = M("close", { xmlns: N.NS.FRAMING });
                    this._conn.xmlOutput(t.tree());
                    var n = N.serialize(t);
                    this._conn.rawOutput(n);
                    try {
                        this.socket.send(n);
                    }
                    catch (e) {
                        N.warn("Couldn't send <close /> tag.");
                    }
                } this._conn._doDisconnect(); }, _doDisconnect: function () { N.debug("WebSockets _doDisconnect was called"), this._closeSocket(); }, _streamWrap: function (e) { return "<wrapper>" + e + "</wrapper>"; }, _closeSocket: function () { if (this.socket)
                    try {
                        this.socket.onclose = null, this.socket.onerror = null, this.socket.onmessage = null, this.socket.close();
                    }
                    catch (e) {
                        N.debug(e.message);
                    } this.socket = null; }, _emptyQueue: function () { return !0; }, _onClose: function (e) { this._conn.connected && !this._conn.disconnecting ? (N.error("Websocket closed unexpectedly"), this._conn._doDisconnect()) : e && 1006 === e.code && !this._conn.connected && this.socket ? (N.error("Websocket closed unexcectedly"), this._conn._changeConnectStatus(N.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected."), this._conn._doDisconnect()) : N.debug("Websocket closed"); }, _no_auth_received: function (e) { N.error("Server did not offer a supported authentication mechanism"), this._conn._changeConnectStatus(N.Status.CONNFAIL, N.ErrorCondition.NO_AUTH_MECH), e && e.call(this._conn), this._conn._doDisconnect(); }, _onDisconnectTimeout: function () { }, _abortAllRequests: function () { }, _onError: function (e) { N.error("Websocket error " + e), this._conn._changeConnectStatus(N.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected."), this._disconnect(); }, _onIdle: function () { var e = this._conn._data; if (e.length > 0 && !this._conn.paused) {
                    for (var t = 0; t < e.length; t++)
                        if (null !== e[t]) {
                            var n = void 0;
                            n = "restart" === e[t] ? this._buildStream().tree() : e[t];
                            var i = N.serialize(n);
                            this._conn.xmlOutput(n), this._conn.rawOutput(i), this.socket.send(i);
                        }
                    this._conn._data = [];
                } }, _onMessage: function (e) { var t, n = '<close xmlns="urn:ietf:params:xml:ns:xmpp-framing" />'; if (e.data === n)
                    return this._conn.rawInput(n), this._conn.xmlInput(e), void (this._conn.disconnecting || this._conn._doDisconnect()); if (0 === e.data.search("<open ")) {
                    if (t = (new DOMParser).parseFromString(e.data, "text/xml").documentElement, !this._handleStreamStart(t))
                        return;
                }
                else {
                    var i = this._streamWrap(e.data);
                    t = (new DOMParser).parseFromString(i, "text/xml").documentElement;
                } return this._check_streamerror(t, N.Status.ERROR) ? void 0 : this._conn.disconnecting && "presence" === t.firstChild.nodeName && "unavailable" === t.firstChild.getAttribute("type") ? (this._conn.xmlInput(t), void this._conn.rawInput(N.serialize(t))) : void this._conn._dataRecv(t, e.data); }, _onOpen: function () { N.debug("Websocket open"); var e = this._buildStream(); this._conn.xmlOutput(e.tree()); var t = N.serialize(e); this._conn.rawOutput(t), this.socket.send(t); }, _reqToData: function (e) { return e; }, _send: function () { this._conn.flush(); }, _sendRestart: function () { clearTimeout(this._conn._idleTimeout), this._conn._onIdle.bind(this._conn)(); } }, e.Strophe = P.Strophe, e.$build = P.$build, e.$iq = P.$iq, e.$msg = P.$msg, e.$pres = P.$pres, P;
        }, e.exports = n(); }).call(this, n(46)); }, function (e, t, n) {
            "use strict";
            var i = n(86);
            t.a = new i.a;
        }, function (e, t, n) { var i = n(79), r = n(151), s = {}, o = [], a = i.levels.TRACE; e.exports = { addGlobalTransport: function (e) { i.addGlobalTransport(e); }, removeGlobalTransport: function (e) { i.removeGlobalTransport(e); }, setGlobalOptions: function (e) { i.setGlobalOptions(e); }, getLogger: function (e, t, n) { var r = new i(a, e, t, n); return e ? (s[e] = s[e] || [], s[e].push(r)) : o.push(r), r; }, setLogLevelById: function (e, t) { for (var n = t ? s[t] || [] : o, i = 0; i < n.length; i++)
                n[i].setLevel(e); }, setLogLevel: function (e) { a = e; for (var t = 0; t < o.length; t++)
                o[t].setLevel(e); for (var n in s) {
                var i = s[n] || [];
                for (t = 0; t < i.length; t++)
                    i[t].setLevel(e);
            } }, levels: i.levels, LogCollector: r }; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; })), n.d(t, "b", (function () { return r; })), n.d(t, "c", (function () { return s; }));
            var i = "audio", r = "presenter", s = "video";
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return b; })); var i = n(18), r = n.n(i), s = n(0), o = n(19), a = n(8), c = n(24), d = n(3), u = n(50), l = n.n(u), h = n(88), p = n(37), m = n(61), f = n(89), g = n(90), _ = n(44); var v = n(4).getLogger(e); var S, y = !1; function E(e) { p.a.isBackendInitialized() || p.a.initBackend({ callStatsID: e.callStatsID, callStatsSecret: e.callStatsSecret, userName: e.userName, aliasName: e.aliasName, applicationName: e.applicationName, getWiFiStatsMethod: e.getWiFiStatsMethod, confID: e.confID, siteID: e.siteID }) || v.error("CallStats Backend initialization failed bad"); } function b(e, t) { this.rtpStatsMap = new Map, this.eventEmitter = new r.a, this.xmpp = e, this.options = t || {}, this.callStatsIntegrationEnabled = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats && !0 !== b.disableThirdPartyRequests, this.callStatsIntegrationEnabled && (this.callStatsApplicationLogsDisabled = this.options.callStatsApplicationLogsDisabled, d.a.isReactNative() ? E(this.options) : function (e) { y || (l.a.loadScript(e.customScriptUrl || _.a, !0, !0, void 0, function () { return E(e); }), y = !0); }(this.options), this.options.confID || v.warn('"confID" is not defined')), this.callsStatsInstances = new Map, b.instances.add(this); } b.init = function (e) { b.audioLevelsEnabled = !e.disableAudioLevels, "number" == typeof e.pcStatsInterval && (b.pcStatsInterval = e.pcStatsInterval), "number" == typeof e.audioLevelsInterval && (b.audioLevelsInterval = e.audioLevelsInterval), "number" == typeof e.longTasksStatsInterval && (b.longTasksStatsInterval = e.longTasksStatsInterval), b.disableThirdPartyRequests = e.disableThirdPartyRequests; }, b.audioLevelsEnabled = !1, b.audioLevelsInterval = 200, b.pcStatsInterval = 1e4, b.disableThirdPartyRequests = !1, b.analytics = h.a, Object.defineProperty(b, "instances", { get: function () { return (S || (S = new Set), S); } }), b.prototype.startRemoteStats = function (e) { this.stopRemoteStats(e); try {
                var t_1 = new g.a(e, b.audioLevelsInterval, b.pcStatsInterval, this.eventEmitter);
                t_1.start(b.audioLevelsEnabled), this.rtpStatsMap.set(e.id, t_1);
            }
            catch (e) {
                v.error("Failed to start collecting remote statistics: " + e);
            } }, b.localStats = [], b.startLocalStats = function (e, t) { if (!b.audioLevelsEnabled)
                return; var n = new m.a(e, b.audioLevelsInterval, t); this.localStats.push(n), n.start(); }, b.prototype.addAudioLevelListener = function (e) { b.audioLevelsEnabled && this.eventEmitter.on(c.a, e); }, b.prototype.removeAudioLevelListener = function (e) { b.audioLevelsEnabled && this.eventEmitter.removeListener(c.a, e); }, b.prototype.addBeforeDisposedListener = function (e) { this.eventEmitter.on(c.b, e); }, b.prototype.removeBeforeDisposedListener = function (e) { this.eventEmitter.removeListener(c.b, e); }, b.prototype.addConnectionStatsListener = function (e) { this.eventEmitter.on(c.d, e); }, b.prototype.removeConnectionStatsListener = function (e) { this.eventEmitter.removeListener(c.d, e); }, b.prototype.addByteSentStatsListener = function (e) { this.eventEmitter.on(c.c, e); }, b.prototype.removeByteSentStatsListener = function (e) { this.eventEmitter.removeListener(c.c, e); }, b.prototype.addLongTasksStatsListener = function (e) { this.eventEmitter.on(c.e, e); }, b.prototype.attachLongTasksStats = function (e) {
                var _this = this;
                d.a.supportsPerformanceObserver() ? (this.performanceObserverStats = new f.a(this.eventEmitter, b.longTasksStatsInterval), e.on(s.CONFERENCE_JOINED, function () { return _this.performanceObserverStats.startObserver(); }), e.on(s.CONFERENCE_LEFT, function () { return _this.performanceObserverStats.stopObserver(); })) : v.warn("Performance observer for long tasks not supported by browser!");
            }, b.prototype.getLongTasksStats = function () { return this.performanceObserverStats ? this.performanceObserverStats.getLongTasksStats() : null; }, b.prototype.removeLongTasksStatsListener = function (e) { this.eventEmitter.removeListener(c.e, e); }, b.prototype.setSpeakerList = function (e) { for (var _i = 0, _a = Array.from(this.rtpStatsMap.values()); _i < _a.length; _i++) {
                var t_2 = _a[_i];
                t_2.peerconnection.isP2P || t_2.setSpeakerList(e);
            } }, b.prototype.dispose = function () { try {
                this.callsStatsInstances.size || this.eventEmitter.emit(c.b);
                for (var _i = 0, _a = this.callsStatsInstances.values(); _i < _a.length; _i++) {
                    var e_1 = _a[_i];
                    this.stopCallStats(e_1.tpc);
                }
                for (var _b = 0, _d = this.rtpStatsMap.keys(); _b < _d.length; _b++) {
                    var e_2 = _d[_b];
                    this._stopRemoteStats(e_2);
                }
                this.eventEmitter && this.eventEmitter.removeAllListeners();
            }
            finally {
                b.instances.delete(this);
            } }, b.stopLocalStats = function (e) { if (b.audioLevelsEnabled)
                for (var t_3 = 0; t_3 < b.localStats.length; t_3++)
                    if (b.localStats[t_3].stream === e) {
                        b.localStats.splice(t_3, 1)[0].stop();
                        break;
                    } }, b.prototype._stopRemoteStats = function (e) { var t = this.rtpStatsMap.get(e); t && (t.stop(), this.rtpStatsMap.delete(e)); }, b.prototype.stopRemoteStats = function (e) { this._stopRemoteStats(e.id); }, b.prototype.startCallStats = function (e, t) { if (!this.callStatsIntegrationEnabled)
                return; if (this.callsStatsInstances.has(e.id))
                return void v.error("CallStats instance for ${tpc} exists already"); v.info("Starting CallStats for " + e + "..."); var n = new p.a(e, { confID: this.options.confID, remoteUserID: t }); this.callsStatsInstances.set(e.id, n); }, b._getAllCallStatsInstances = function () { var e = new Set; for (var _i = 0, _a = b.instances; _i < _a.length; _i++) {
                var t_4 = _a[_i];
                for (var _b = 0, _d = t_4.callsStatsInstances.values(); _b < _d.length; _b++) {
                    var n_1 = _d[_b];
                    e.add(n_1);
                }
            } return e; }, b.prototype.stopCallStats = function (e) { var t = this.callsStatsInstances.get(e.id); t && (1 === this.callsStatsInstances.size && this.eventEmitter.emit(c.b), this.callsStatsInstances.delete(e.id), t.sendTerminateEvent()); }, b.prototype.isCallstatsEnabled = function () { return this.callStatsIntegrationEnabled; }, b.prototype.sendConnectionResumeOrHoldEvent = function (e, t) { var n = this.callsStatsInstances.get(e.id); n && n.sendResumeOrHoldEvent(t); }, b.prototype.sendIceConnectionFailedEvent = function (e) { var t = this.callsStatsInstances.get(e.id); t && t.sendIceConnectionFailedEvent(); }, b.prototype.sendMuteEvent = function (e, t, n) { var i = e && this.callsStatsInstances.get(e.id); p.a.sendMuteEvent(t, n, i); }, b.prototype.sendScreenSharingEvent = function (e, t) { for (var _i = 0, _a = this.callsStatsInstances.values(); _i < _a.length; _i++) {
                var n_2 = _a[_i];
                n_2.sendScreenSharingEvent(e, t);
            } }, b.prototype.sendDominantSpeakerEvent = function (e) { for (var _i = 0, _a = this.callsStatsInstances.values(); _i < _a.length; _i++) {
                var e_3 = _a[_i];
                e_3.sendDominantSpeakerEvent();
            } this.xmpp.sendDominantSpeakerEvent(e); }, b.sendActiveDeviceListEvent = function (e) { var t = b._getAllCallStatsInstances(); if (t.size)
                for (var _i = 0, t_5 = t; _i < t_5.length; _i++) {
                    var n_3 = t_5[_i];
                    p.a.sendActiveDeviceListEvent(e, n_3);
                }
            else
                p.a.sendActiveDeviceListEvent(e, null); }, b.prototype.associateStreamWithVideoTag = function (e, t, n, i, r, s) { var o = this.callsStatsInstances.get(e.id); o && o.associateStreamWithVideoTag(t, n, i, r, s); }, b.sendGetUserMediaFailed = function (e) { var t = e instanceof o.a ? function (e) { var t = new Error; return t.stack = e.stack, t.name = (e.name || "Unknown error") + (e.gum && e.gum.error && e.gum.error.name ? " - " + e.gum.error.name : ""), t.constraintName = e.gum && e.gum.constraints ? JSON.stringify(e.gum.constraints) : "", t.message = e.message, t; }(e) : e, n = b._getAllCallStatsInstances(); if (n.size)
                for (var _i = 0, n_4 = n; _i < n_4.length; _i++) {
                    var e_4 = n_4[_i];
                    p.a.sendGetUserMediaFailed(t, e_4);
                }
            else
                p.a.sendGetUserMediaFailed(t, null); }, b.prototype.sendCreateOfferFailed = function (e, t) { var n = this.callsStatsInstances.get(t.id); n && n.sendCreateOfferFailed(e); }, b.prototype.sendCreateAnswerFailed = function (e, t) { var n = this.callsStatsInstances.get(t.id); n && n.sendCreateAnswerFailed(e); }, b.prototype.sendSetLocalDescFailed = function (e, t) { var n = this.callsStatsInstances.get(t.id); n && n.sendSetLocalDescFailed(e); }, b.prototype.sendSetRemoteDescFailed = function (e, t) { var n = this.callsStatsInstances.get(t.id); n && n.sendSetRemoteDescFailed(e); }, b.prototype.sendAddIceCandidateFailed = function (e, t) { var n = this.callsStatsInstances.get(t.id); n && n.sendAddIceCandidateFailed(e); }, b.sendLog = function (e) { var t = new Set; for (var _i = 0, _a = b.instances; _i < _a.length; _i++) {
                var e_5 = _a[_i];
                if (e_5.callStatsApplicationLogsDisabled)
                    return;
                e_5.callsStatsInstances.size && t.add(e_5.callsStatsInstances.values().next().value);
            } if (t.size)
                for (var _b = 0, t_6 = t; _b < t_6.length; _b++) {
                    var n_5 = t_6[_b];
                    p.a.sendApplicationLog(e, n_5);
                }
            else
                p.a.sendApplicationLog(e, null); }, b.prototype.sendFeedback = function (e, t) { return b.analytics.sendEvent(a.n, { rating: e, comment: t }), p.a.sendFeedback(this.options.confID, e, t); }, b.LOCAL_JID = n(154).LOCAL_JID, b.reportGlobalError = function (e) { e instanceof o.a && e.gum ? b.sendGetUserMediaFailed(e) : b.sendLog(e); }, b.sendAnalyticsAndLog = function (e, t) {
                if (t === void 0) { t = {}; }
                if (!e)
                    return void v.warn("No event or event name given.");
                var n;
                n = "object" == typeof e ? e : { name: e, properties: t }, v.log(JSON.stringify(n)), this.analytics.sendEvent(e, t);
            }, b.sendAnalytics = function (e, t) {
                if (t === void 0) { t = {}; }
                this.analytics.sendEvent(e, t);
            }; }).call(this, "modules/statistics/statistics.js");
        }, function (e, t) { e.exports = { CREATE_ANSWER_FAILED: "rtc.create_answer_failed", CREATE_OFFER_FAILED: "rtc.create_offer_failed", DATA_CHANNEL_OPEN: "rtc.data_channel_open", ENDPOINT_CONN_STATUS_CHANGED: "rtc.endpoint_conn_status_changed", DOMINANT_SPEAKER_CHANGED: "rtc.dominant_speaker_changed", LASTN_ENDPOINT_CHANGED: "rtc.lastn_endpoint_changed", PERMISSIONS_CHANGED: "rtc.permissions_changed", SENDER_VIDEO_CONSTRAINTS_CHANGED: "rtc.sender_video_constraints_changed", LASTN_VALUE_CHANGED: "rtc.lastn_value_changed", LOCAL_TRACK_SSRC_UPDATED: "rtc.local_track_ssrc_updated", LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: "rtc.local_track_max_enabled_resolution_changed", TRACK_ATTACHED: "rtc.track_attached", REMOTE_TRACK_ADDED: "rtc.remote_track_added", REMOTE_TRACK_MUTE: "rtc.remote_track_mute", REMOTE_TRACK_REMOVED: "rtc.remote_track_removed", REMOTE_TRACK_UNMUTE: "rtc.remote_track_unmute", SET_LOCAL_DESCRIPTION_FAILED: "rtc.set_local_description_failed", SET_REMOTE_DESCRIPTION_FAILED: "rtc.set_remote_description_failed", AUDIO_OUTPUT_DEVICE_CHANGED: "rtc.audio_output_device_changed", DEVICE_LIST_CHANGED: "rtc.device_list_changed", DEVICE_LIST_WILL_CHANGE: "rtc.device_list_will_change", DEVICE_LIST_AVAILABLE: "rtc.device_list_available", ENDPOINT_MESSAGE_RECEIVED: "rtc.endpoint_message_received", ENDPOINT_STATS_RECEIVED: "rtc.endpoint_stats_received", LOCAL_UFRAG_CHANGED: "rtc.local_ufrag_changed", REMOTE_UFRAG_CHANGED: "rtc.remote_ufrag_changed" }; }, function (e, t, n) {
            "use strict";
            function i(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { r(e, t, n[t]); }));
            } return e; }
            function r(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; }
            n.d(t, "t", (function () { return s; })), n.d(t, "u", (function () { return o; })), n.d(t, "v", (function () { return a; })), n.d(t, "w", (function () { return c; })), n.d(t, "a", (function () { return d; })), n.d(t, "b", (function () { return u; })), n.d(t, "c", (function () { return l; })), n.d(t, "d", (function () { return h; })), n.d(t, "e", (function () { return p; })), n.d(t, "f", (function () { return m; })), n.d(t, "g", (function () { return f; })), n.d(t, "h", (function () { return g; })), n.d(t, "i", (function () { return _; })), n.d(t, "j", (function () { return v; })), n.d(t, "k", (function () { return S; })), n.d(t, "l", (function () { return y; })), n.d(t, "m", (function () { return E; })), n.d(t, "n", (function () { return b; })), n.d(t, "o", (function () { return T; })), n.d(t, "p", (function () { return C; })), n.d(t, "q", (function () { return R; })), n.d(t, "r", (function () { return A; })), n.d(t, "s", (function () { return w; })), n.d(t, "z", (function () { return I; })), n.d(t, "B", (function () { return P; })), n.d(t, "A", (function () { return O; })), n.d(t, "C", (function () { return D; })), n.d(t, "D", (function () { return N; })), n.d(t, "E", (function () { return M; })), n.d(t, "F", (function () { return k; })), n.d(t, "J", (function () { return L; })), n.d(t, "G", (function () { return x; })), n.d(t, "H", (function () { return F; })), n.d(t, "I", (function () { return j; })), n.d(t, "K", (function () { return U; })), n.d(t, "L", (function () { return H; })), n.d(t, "M", (function () { return B; })), n.d(t, "x", (function () { return J; })), n.d(t, "y", (function () { return V; })), n.d(t, "N", (function () { return G; }));
            var s = "operational", o = "page", a = "track", c = "ui", d = "restart", u = "session-accept.timeout", l = "session-initiate.received", h = "session-initiate.timeout", p = "terminate", m = "transport-replace.received", f = "transport-replace.success", g = "decline", _ = "established", v = "failed", S = "switch.to.jvb", y = "available.device", E = "connection.disconnected", b = "feedback", T = "ice.duration", C = "ice.establishment.duration.diff", R = "ice.state.changed", A = "track.no-bytes-sent", w = "track.unmuted", I = function () { return { action: "bridge.down", actionSubject: "bridge.down", type: s }; }, P = function (e, t, n) { return { type: s, action: "connection.failed", attributes: i({ error_type: e, error_message: t }, n) }; };
            function O(e, t) { return { action: e, attributes: t, source: "conference", type: s }; }
            var D = function (e, t) { var n = "connection.stage.reached"; return { action: n, actionSubject: e, attributes: t, source: n, type: s }; }, N = function (e, t, n) { return { attributes: { participant_id: e, region: t, rtt: n }, name: "e2e_rtt", type: s }; }, M = function () { return { action: "focus.left", actionSubject: "focus.left", type: s }; }, k = function (e, t) {
                if (t === void 0) { t = {}; }
                return { type: s, source: "get.user.media", action: e, attributes: t };
            }, L = function (e) {
                if (e === void 0) { e = {}; }
                return { type: s, source: "peer.conn.status", action: "duration", attributes: e };
            }, x = function (e, t) {
                if (t === void 0) { t = {}; }
                return { type: s, action: e, source: "jingle", attributes: t };
            }, F = function (e, t) { return { attributes: { media_type: e, value: t }, action: "track.no.data.from.source", type: s }; }, j = function (e, t) {
                if (t === void 0) { t = {}; }
                return { type: s, action: e, source: "p2p", attributes: t };
            }, U = function (e) { return { type: s, action: "remotely.muted", mediaType: e }; }, H = function (e) { return { type: s, action: "rtp.stats", attributes: e }; }, B = function (e) { return { type: s, action: "transport.stats", attributes: e }; };
            function J(e, t, n) { return { type: s, action: "audio.output.problem", attributes: { userID: e, localAudioLevels: t, remoteAudioLevels: n } }; }
            var V = function (e, t) { return { type: s, action: "bridge-channel.error", attributes: { code: e, reason: t } }; }, G = function (e) { return D("ttfm", e); };
        }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(4), r = n(23), s = n.n(r), o = n(3), a = n(38), c = n.n(a); var d = Object(i.getLogger)(e), u = { filterSpecialChars: function (e) { return e ? e.replace(/[\\\/\{,\}\+]/g, "") : e; }, iceparams: function (e, t) { var n, i, r = null; return (i = u.findLine(e, "a=ice-ufrag:", t)) && (n = u.findLine(e, "a=ice-pwd:", t)) && (r = { ufrag: u.parseICEUfrag(i), pwd: u.parseICEPwd(n) }), r; }, parseICEUfrag: function (e) { return e.substring(12); }, buildICEUfrag: function (e) { return "a=ice-ufrag:" + e; }, parseICEPwd: function (e) { return e.substring(10); }, buildICEPwd: function (e) { return "a=ice-pwd:" + e; }, parseMID: function (e) { return e.substring(6); }, parseMLine: function (e) { var t = {}, n = e.substring(2).split(" "); return t.media = n.shift(), t.port = n.shift(), t.proto = n.shift(), "" === n[n.length - 1] && n.pop(), t.fmt = n, t; }, buildMLine: function (e) { return "m=" + e.media + " " + e.port + " " + e.proto + " " + e.fmt.join(" "); }, parseRTPMap: function (e) { var t = {}; var n = e.substring(9).split(" "); return t.id = n.shift(), n = n[0].split("/"), t.name = n.shift(), t.clockrate = n.shift(), t.channels = n.length ? n.shift() : "1", t; }, parseSCTPMap: function (e) { var t = e.substring(10).split(" "); return [t[0], t[1], t.length > 2 ? t[2] : null]; }, buildRTPMap: function (e) { var t = "a=rtpmap:" + e.getAttribute("id") + " " + e.getAttribute("name") + "/" + e.getAttribute("clockrate"); return e.getAttribute("channels") && "1" !== e.getAttribute("channels") && (t += "/" + e.getAttribute("channels")), t; }, parseCrypto: function (e) { var t = {}, n = e.substring(9).split(" "); return t.tag = n.shift(), t["crypto-suite"] = n.shift(), t["key-params"] = n.shift(), n.length && (t["session-params"] = n.join(" ")), t; }, parseFingerprint: function (e) { var t = {}, n = e.substring(14).split(" "); return t.hash = n.shift(), t.fingerprint = n.shift(), t; }, parseFmtp: function (e) { var t = []; var n = e.split(" "); n.shift(), n = n.join(" ").split(";"); for (var e_6 = 0; e_6 < n.length; e_6++) {
                    var i_1 = n[e_6].split("=")[0];
                    for (; i_1.length && " " === i_1[0];)
                        i_1 = i_1.substring(1);
                    var r_1 = n[e_6].split("=")[1];
                    i_1 && r_1 ? t.push({ name: i_1, value: r_1 }) : i_1 && t.push({ name: "", value: i_1 });
                } return t; }, parseICECandidate: function (e) { var t = {}, n = e.split(" "); t.foundation = n[0].substring(12), t.component = n[1], t.protocol = n[2].toLowerCase(), t.priority = n[3], t.ip = n[4], t.port = n[5], t.type = n[7], t.generation = 0; for (var e_7 = 8; e_7 < n.length; e_7 += 2)
                    switch (n[e_7]) {
                        case "raddr":
                            t["rel-addr"] = n[e_7 + 1];
                            break;
                        case "rport":
                            t["rel-port"] = n[e_7 + 1];
                            break;
                        case "generation":
                            t.generation = n[e_7 + 1];
                            break;
                        case "tcptype":
                            t.tcptype = n[e_7 + 1];
                            break;
                        default: d.log("parseICECandidate not translating \"" + n[e_7] + "\" = \"" + n[e_7 + 1] + "\"");
                    } return t.network = "1", t.id = Math.random().toString(36).substr(2, 10), t; }, buildICECandidate: function (e) { var t = ["a=candidate:" + e.foundation, e.component, e.protocol, e.priority, e.ip, e.port, "typ", e.type].join(" "); switch (t += " ", e.type) {
                    case "srflx":
                    case "prflx":
                    case "relay": e.hasOwnAttribute("rel-addr") && e.hasOwnAttribute("rel-port") && (t += "raddr", t += " ", t += e["rel-addr"], t += " ", t += "rport", t += " ", t += e["rel-port"], t += " ");
                } return e.hasOwnAttribute("tcptype") && (t += "tcptype", t += " ", t += e.tcptype, t += " "), t += "generation", t += " ", t += e.hasOwnAttribute("generation") ? e.generation : "0", t; }, parseSSRC: function (e) { var t = new Map, n = e.split("\r\n"); for (var e_8 = 0; e_8 < n.length; e_8++)
                    if ("a=ssrc:" === n[e_8].substring(0, 7)) {
                        var i_2 = n[e_8].split("a=ssrc:")[1].split(" ")[0];
                        t.get(i_2) || t.set(i_2, []), t.get(i_2).push(n[e_8]);
                    } return t; }, parseRTCPFB: function (e) { var t = e.substr(10).split(" "), n = {}; return n.pt = t.shift(), n.type = t.shift(), n.params = t, n; }, parseExtmap: function (e) { var t = e.substr(9).split(" "), n = {}; return n.value = t.shift(), -1 === n.value.indexOf("/") ? n.direction = "both" : (n.direction = n.value.substr(n.value.indexOf("/") + 1), n.value = n.value.substr(0, n.value.indexOf("/"))), n.uri = t.shift(), n.params = t, n; }, findLine: function (e, t, n) { var i = e.split("\r\n"); for (var e_9 = 0; e_9 < i.length; e_9++)
                    if (i[e_9].substring(0, t.length) === t)
                        return i[e_9]; if (!n)
                    return !1; i = n.split("\r\n"); for (var e_10 = 0; e_10 < i.length; e_10++)
                    if (i[e_10].substring(0, t.length) === t)
                        return i[e_10]; return !1; }, findLines: function (e, t, n) { var i = e.split("\r\n"); var r = []; for (var e_11 = 0; e_11 < i.length; e_11++)
                    i[e_11].substring(0, t.length) === t && r.push(i[e_11]); if (r.length || !n)
                    return r; i = n.split("\r\n"); for (var e_12 = 0; e_12 < i.length; e_12++)
                    i[e_12].substring(0, t.length) === t && r.push(i[e_12]); return r; }, candidateToJingle: function (e) { if (0 === e.indexOf("candidate:"))
                    e = "a=" + e;
                else if ("a=candidate:" !== e.substring(0, 12))
                    return d.log("parseCandidate called with a line that is not a candidate line"), d.log(e), null; "\r\n" === e.substring(e.length - 2) && (e = e.substring(0, e.length - 2)); var t = {}, n = e.split(" "); if ("typ" !== n[6])
                    return d.log("did not find typ in the right place"), d.log(e), null; t.foundation = n[0].substring(12), t.component = n[1], t.protocol = n[2].toLowerCase(), t.priority = n[3], t.ip = n[4], t.port = n[5], t.type = n[7], t.generation = "0"; for (var e_13 = 8; e_13 < n.length; e_13 += 2)
                    switch (n[e_13]) {
                        case "raddr":
                            t["rel-addr"] = n[e_13 + 1];
                            break;
                        case "rport":
                            t["rel-port"] = n[e_13 + 1];
                            break;
                        case "generation":
                            t.generation = n[e_13 + 1];
                            break;
                        case "tcptype":
                            t.tcptype = n[e_13 + 1];
                            break;
                        default: d.log("not translating \"" + n[e_13] + "\" = \"" + n[e_13 + 1] + "\"");
                    } return t.network = "1", t.id = Math.random().toString(36).substr(2, 10), t; }, candidateFromJingle: function (e) { var t = "a=candidate:"; t += e.getAttribute("foundation"), t += " ", t += e.getAttribute("component"), t += " "; var n = e.getAttribute("protocol"); switch (o.a.isFirefox() && "ssltcp" === n.toLowerCase() && (n = "tcp"), t += n, t += " ", t += e.getAttribute("priority"), t += " ", t += e.getAttribute("ip"), t += " ", t += e.getAttribute("port"), t += " ", t += "typ", t += " " + e.getAttribute("type"), t += " ", e.getAttribute("type")) {
                    case "srflx":
                    case "prflx":
                    case "relay": e.getAttribute("rel-addr") && e.getAttribute("rel-port") && (t += "raddr", t += " ", t += e.getAttribute("rel-addr"), t += " ", t += "rport", t += " ", t += e.getAttribute("rel-port"), t += " ");
                } return "tcp" === n.toLowerCase() && (t += "tcptype", t += " ", t += e.getAttribute("tcptype"), t += " "), t += "generation", t += " ", t += e.getAttribute("generation") || "0", t + "\r\n"; }, parsePrimaryVideoSsrc: function (e) { var t = e.ssrcs.map(function (e) { return e.id; }).filter(function (e, t, n) { return n.indexOf(e) === t; }).length, n = e.ssrcGroups && e.ssrcGroups.length || 0; if (t > 1 && 0 === n)
                    return; var i = null; if (1 === t)
                    i = e.ssrcs[0].id;
                else if (2 === t) {
                    var t_7 = e.ssrcGroups.find(function (e) { return "FID" === e.semantics; });
                    t_7 && (i = t_7.ssrcs.split(" ")[0]);
                }
                else if (t >= 3) {
                    var t_8 = e.ssrcGroups.find(function (e) { return "SIM" === e.semantics; });
                    t_8 && (i = t_8.ssrcs.split(" ")[0]);
                } return i; }, generateSsrc: function () { return c.a.randomInt(1, 4294967295); }, getSsrcAttribute: function (e, t, n) { for (var i_3 = 0; i_3 < e.ssrcs.length; ++i_3) {
                    var r_2 = e.ssrcs[i_3];
                    if (r_2.id === t && r_2.attribute === n)
                        return r_2.value;
                } }, parseGroupSsrcs: function (e) { return e.ssrcs.split(" ").map(function (e) { return parseInt(e, 10); }); }, getMedia: function (e, t) { return e.media.find(function (e) { return e.type === t; }); }, getUfrag: function (e) { var t = e.split("\n").filter(function (e) { return e.startsWith("a=ice-ufrag:"); }); if (t.length > 0)
                    return t[0].substr("a=ice-ufrag:".length); }, preferCodec: function (e, t) { if (!e || !t)
                    return; var n = e.rtp.filter(function (e) { return e.codec && e.codec.toLowerCase() === t.toLowerCase(); }).map(function (e) { return e.payload; }); if (n) {
                    var t_9 = e.payloads.toString().split(" ").map(function (e) { return parseInt(e, 10); });
                    for (var _i = 0, _a = n.reverse(); _i < _a.length; _i++) {
                        var e_14 = _a[_i];
                        var n_6 = t_9.indexOf(e_14);
                        t_9.splice(n_6, 1), t_9.unshift(e_14);
                    }
                    e.payloads = t_9.join(" ");
                } }, stripCodec: function (e, t, n) {
                    if (n === void 0) { n = !1; }
                    if (!e || !t)
                        return;
                    var i = [];
                    var r = [];
                    var o = t.toLowerCase() === s.a.H264 && n;
                    for (var _i = 0, _a = e.rtp; _i < _a.length; _i++) {
                        var n_7 = _a[_i];
                        n_7.codec && n_7.codec.toLowerCase() === t.toLowerCase() && (o ? i.push(n_7.payload) : r.push(n_7.payload));
                    }
                    if (o && (r = e.fmtp.filter(function (e) { return i.indexOf(e.payload) > -1 && e.config.includes("profile-level-id=64"); }).map(function (e) { return e.payload; })), r.length > 0) {
                        var t_10 = r.map(function (e) { return "apt=" + e; }), n_8 = e.fmtp.filter(function (e) { return -1 !== t_10.indexOf(e.config); });
                        r.push.apply(r, n_8.map(function (e) { return e.payload; }));
                        var i_4 = e.payloads.toString().split(" ").map(Number).filter(function (e) { return -1 === r.indexOf(e); });
                        0 === i_4.length ? (e.port = 0, e.direction = "inactive", e.payloads = "*") : e.payloads = i_4.join(" "), e.rtp = e.rtp.filter(function (e) { return -1 !== i_4.indexOf(e.payload); }), e.fmtp = e.fmtp.filter(function (e) { return -1 !== i_4.indexOf(e.payload); }), e.rtcpFb && (e.rtcpFb = e.rtcpFb.filter(function (e) { return -1 !== i_4.indexOf(e.payload); }));
                    }
                } }; t.a = u; }).call(this, "modules/xmpp/SDPUtil.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(18), r = n.n(i), s = n(4), o = n(43), a = n.n(o), c = n(19), d = n(14), u = n(45), l = n.n(u), h = n(5), p = n(7), m = n.n(p), f = n(36), g = n.n(f), _ = n(12), v = n.n(_), S = n(8), y = n(3), E = n(6), b = n(11), T = n.n(b), C = n(20), R = n(9), A = n(49); function w(e, t) { if (null == e)
                return {}; var n, i, r = function (e, t) { if (null == e)
                return {}; var n, i, r = {}, s = Object.keys(e); for (i = 0; i < s.length; i++)
                n = s[i], t.indexOf(n) >= 0 || (r[n] = e[n]); return r; }(e, t); if (Object.getOwnPropertySymbols) {
                var s = Object.getOwnPropertySymbols(e);
                for (i = 0; i < s.length; i++)
                    n = s[i], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
            } return r; } function I(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { P(e, t, n[t]); }));
            } return e; } function P(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var O = Object(s.getLogger)(e); y.a.usesAdapter() && n(167); var D = new r.a, N = ["audio", "video"], M = { video: { height: { ideal: 720, max: 720, min: 240 } } }, k = 5; var L = "default", x = !1, F = !1, j = !1, U = !1, H = !1, B = !1; var J = document.createElement("audio"), V = void 0 !== J.setSinkId; var G, $ = []; function K() { } function q(e, t) {
                if (t === void 0) { t = {}; }
                var n = { audio: !1, video: !1 }, i = y.a.isFirefox() || y.a.isWebKitBased() || y.a.isReactNative();
                if (e.indexOf("video") >= 0) {
                    if (n.video = { mandatory: {}, optional: [] }, t.cameraDeviceId)
                        i && (n.video.deviceId = t.cameraDeviceId), n.video.mandatory.sourceId = t.cameraDeviceId;
                    else {
                        var e_15 = t.facingMode || l.a.USER;
                        i && (n.video.facingMode = e_15), n.video.optional.push({ facingMode: e_15 });
                    }
                    (t.minFps || t.maxFps || t.fps) && ((t.minFps || t.fps) && (t.minFps = t.minFps || t.fps, n.video.mandatory.minFrameRate = t.minFps), t.maxFps && (n.video.mandatory.maxFrameRate = t.maxFps)), function (e, t, n) { g.a[n] && (t && (e.video.width = { ideal: g.a[n].width }, e.video.height = { ideal: g.a[n].height }), e.video.mandatory.minWidth = g.a[n].width, e.video.mandatory.minHeight = g.a[n].height), e.video.mandatory.minWidth && (e.video.mandatory.maxWidth = e.video.mandatory.minWidth), e.video.mandatory.minHeight && (e.video.mandatory.maxHeight = e.video.mandatory.minHeight); }(n, i, t.resolution);
                }
                if (e.indexOf("audio") >= 0 && (y.a.isReactNative() ? n.audio = !0 : y.a.isFirefox() ? t.micDeviceId ? n.audio = { mandatory: {}, deviceId: t.micDeviceId, optional: [{ sourceId: t.micDeviceId }] } : n.audio = !0 : (n.audio = { mandatory: {}, optional: [] }, t.micDeviceId && (i && (n.audio.deviceId = t.micDeviceId), n.audio.optional.push({ sourceId: t.micDeviceId })), n.audio.optional.push({ echoCancellation: !j && !F }, { googEchoCancellation: !j && !F }, { googAutoGainControl: !H && !F }, { googNoiseSuppression: !U && !F }, { googHighpassFilter: !B && !F }, { googNoiseSuppression2: !U && !F }, { googEchoCancellation2: !j && !F }, { googAutoGainControl2: !H && !F }))), e.indexOf("screen") >= 0)
                    if (y.a.isChrome())
                        n.video = { mandatory: W(I({}, t, { source: "screen" })), optional: [] };
                    else if (y.a.isFirefox())
                        n.video = { mozMediaSource: "window", mediaSource: "window", frameRate: t.frameRate || { min: k, max: k } };
                    else {
                        var e_16 = "'screen' WebRTC media source is supported only in Chrome and Firefox";
                        T.a.callErrorHandler(new Error(e_16)), O.error(e_16);
                    }
                return e.indexOf("desktop") >= 0 && (n.video = { mandatory: W(I({}, t, { source: "desktop" })), optional: [] }, y.a.isElectron() && t.screenShareAudio && t.desktopStream.indexOf("screen") >= 0 && (n.audio = { mandatory: { chromeMediaSource: n.video.mandatory.chromeMediaSource } })), t.bandwidth && (n.video || (n.video = { mandatory: {}, optional: [] }), n.video.optional.push({ bandwidth: t.bandwidth })), y.a.isFirefox() && t.firefox_fake_device && (n.fake = !0), n;
            } function W(e) {
                if (e === void 0) { e = {}; }
                var t = e.desktopStream, _a = e.frameRate, n = _a === void 0 ? { min: k, max: k } : _a, i = n.max, r = n.min, s = { chromeMediaSource: e.source, maxWidth: window.screen.width, maxHeight: window.screen.height };
                return "number" == typeof r && (s.minFrameRate = r), "number" == typeof i && (s.maxFrameRate = i), void 0 !== t && (s.chromeMediaSourceId = t), s;
            } function z(e) {
                if (e === void 0) { e = {}; }
                var t = { frameRate: k }, n = e.desktopSharingFrameRate;
                return n && n.max && (t.frameRate = n.max), t;
            } function Q(e, t) { var n = Boolean(t) && t.getAudioTracks().length > 0, i = Boolean(t) && t.getVideoTracks().length > 0, r = {}; -1 !== e.indexOf("video") && (r.video = i), -1 !== e.indexOf("audio") && (r.audio = n), D.emit(m.a.PERMISSIONS_CHANGED, r); } function X(e) { var t = e.filter(function (e) { return "audioinput" === e.kind; }).length, n = e.filter(function (e) { return "audiooutput" === e.kind; }).length, i = e.filter(function (e) { return "videoinput" === e.kind; }).length, r = e.filter(function (e) { return "videooutput" === e.kind; }).length; e.forEach(function (e) { var s = { audio_input_device_count: t, audio_output_device_count: n, video_input_device_count: i, video_output_device_count: r, device_id: e.deviceId, device_group_id: e.groupId, device_kind: e.kind, device_label: e.label }; E.a.sendAnalytics(S.l, s); }); } function Y(e) { (function (e) { return e.length !== $.length || e.map(t).sort().join("") !== $.map(t).sort().join(""); function t(e) { return JSON.stringify({ kind: e.kind, deviceId: e.deviceId, groupId: e.groupId, label: e.label, facing: e.facing }); } })(e) && ($ = e.slice(0), O.info("list of media devices has changed:", $), X($), D.emit(m.a.DEVICE_LIST_WILL_CHANGE, $), D.emit(m.a.DEVICE_LIST_CHANGED, $)); }
                var Z = /** @class */ (function (_super) {
                    __extends(Z, _super);
                    function Z() {
                        return _super.call(this, D) || this;
                    }
                    Z.prototype.init = function (e) {
                        var _this = this;
                        if (e === void 0) { e = {}; }
                        if ("boolean" == typeof e.disableAEC && (j = e.disableAEC, O.info("Disable AEC: " + j)), "boolean" == typeof e.disableNS && (U = e.disableNS, O.info("Disable NS: " + U)), "boolean" == typeof e.disableAP && (F = e.disableAP, O.info("Disable AP: " + F)), "boolean" == typeof e.disableAGC && (H = e.disableAGC, O.info("Disable AGC: " + H)), "boolean" == typeof e.disableHPF && (B = e.disableHPF, O.info("Disable HPF: " + B)), window.clearInterval(G), G = void 0, y.a.usesNewGumFlow())
                            this.RTCPeerConnectionType = RTCPeerConnection, this.attachMediaStream = (t = function (e, t) { e && (e.srcObject = t); }, function (e, n) { var i = t.apply(ee, arguments); return n && ee.isDeviceChangeAvailable("output") && n.getAudioTracks && n.getAudioTracks().length && x && e.setSinkId(ee.getAudioOutputDevice()).catch((function (t) { var n = new c.a(t, null, ["audiooutput"]); T.a.callUnhandledRejectionHandler({ promise: this, reason: n }), O.warn("Failed to set audio output device for the element. Default audio output device will be used instead", e, n); })), i; }), this.getStreamID = function (_a) {
                                var e = _a.id;
                                return e;
                            }, this.getTrackID = function (_a) {
                                var e = _a.id;
                                return e;
                            };
                        else {
                            if (!y.a.isReactNative()) {
                                var e_17 = "Endpoint does not appear to be WebRTC-capable";
                                throw O.error(e_17), new Error(e_17);
                            }
                            this.RTCPeerConnectionType = RTCPeerConnection, this.attachMediaStream = void 0, this.getStreamID = function (_a) {
                                var e = _a.id;
                                return "number" == typeof e ? e : R.a.filterSpecialChars(e);
                            }, this.getTrackID = function (_a) {
                                var e = _a.id;
                                return e;
                            };
                        }
                        var t;
                        this.pcConstraints = y.a.isChromiumBased() || y.a.isReactNative() ? { optional: [{ googScreencastMinBitrate: 100 }, { googCpuOveruseDetection: !0 }] } : {}, A.a.init(e, this.getUserMediaWithConstraints.bind(this)), this.isDeviceListAvailable() && this.enumerateDevices(function (e) { $ = e.slice(0), O.debug("Available devices: ", $), X($), D.emit(m.a.DEVICE_LIST_AVAILABLE, $), y.a.supportsDeviceChangeEvent() ? navigator.mediaDevices.addEventListener("devicechange", function () { return _this.enumerateDevices(K); }) : G = window.setInterval(function () { return _this.enumerateDevices(K); }, 3e3); });
                    };
                    Z.prototype.enumerateDevices = function (e) { navigator.mediaDevices.enumerateDevices().then(function (t) { Y(t), e(t); }).catch(function (t) { O.warn("Failed to  enumerate devices. " + t), Y([]), e([]); }); };
                    Z.prototype.getUserMediaWithConstraints = function (e, t) {
                        if (t === void 0) { t = {}; }
                        var n = t.timeout, i = q(e, w(t, ["timeout"]));
                        return O.info("Get media constraints", JSON.stringify(i)), this._getUserMedia(e, i, n);
                    };
                    Z.prototype._getUserMedia = function (e, t, n) {
                        if (t === void 0) { t = {}; }
                        if (n === void 0) { n = 0; }
                        return new Promise(function (i, r) { var s, o = !1; "number" == typeof n && !isNaN(n) && n > 0 && (s = setTimeout(function () { o = !0, s = void 0, r(new c.a(d.TIMEOUT)); }, n)), navigator.mediaDevices.getUserMedia(t).then(function (t) { O.log("onUserMediaSuccess"), Q(e, t), o || (void 0 !== s && clearTimeout(s), i(t)); }).catch(function (n) { O.warn("Failed to get access to local media. " + n + " " + JSON.stringify(t)); var i = new c.a(n, t, e); o || (void 0 !== s && clearTimeout(s), r(n)), i.name === d.PERMISSION_DENIED && Q(e, void 0); }); });
                    };
                    Z.prototype._newGetDesktopMedia = function (e) {
                        var _this = this;
                        return A.a.isSupported() ? new Promise(function (t, n) { A.a.obtainStream(_this._parseDesktopSharingOptions(e), function (e) { t(e); }, function (e) { n(e); }); }) : Promise.reject(new Error("Desktop sharing is not supported!"));
                    };
                    Z.prototype.obtainAudioAndVideoPermissions = function (e) {
                        if (e === void 0) { e = {}; }
                        e.devices = e.devices || __spreadArray([], N), e.resolution = e.resolution || 720;
                        return e.devices.includes("desktop") && !A.a.isSupported() ? Promise.reject(new Error("Desktop sharing is not supported!")) : this._getAudioAndVideoStreams(e).then(function (t) { return function (e, t) { var n, i, r; var s = []; if (e) {
                            var t_11 = e.audioVideo;
                            if (t_11) {
                                var e_18 = t_11.getAudioTracks();
                                if (e_18.length) {
                                    n = new MediaStream;
                                    for (var t_12 = 0; t_12 < e_18.length; t_12++)
                                        n.addTrack(e_18[t_12]);
                                }
                                var i_5 = t_11.getVideoTracks();
                                if (i_5.length) {
                                    r = new MediaStream;
                                    for (var e_19 = 0; e_19 < i_5.length; e_19++)
                                        r.addTrack(i_5[e_19]);
                                }
                                t_11.release && t_11.release(!1);
                            }
                            else
                                n = e.audio, r = e.video;
                            i = e.desktop;
                        } if (i) {
                            var e_20 = i.stream, t_13 = i.sourceId, n_9 = i.sourceType;
                            s.push({ stream: e_20, sourceId: t_13, sourceType: n_9, track: e_20.getVideoTracks()[0], mediaType: h.c, videoType: v.a.DESKTOP });
                        } return n && s.push({ stream: n, track: n.getAudioTracks()[0], mediaType: h.a, videoType: null }), r && s.push({ stream: r, track: r.getVideoTracks()[0], mediaType: h.c, videoType: v.a.CAMERA, resolution: t }), s; }(t, e.resolution); });
                    };
                    Z.prototype._getAudioAndVideoStreams = function (e) {
                        var _this = this;
                        var t = e.devices.includes("desktop");
                        e.devices = e.devices.filter(function (e) { return "desktop" !== e; });
                        return (e.devices.length ? this.getUserMediaWithConstraints(e.devices, e) : Promise.resolve(null)).then(function (t) { var n = _this._getMissingTracks(e.devices, t); return n.length ? (_this.stopMediaStream(t), _this.getUserMediaWithConstraints(n, e).then(function () { return Promise.reject(new c.a({ name: "UnknownError" }, q(e.devices, e), n)); })) : t; }).then(function (n) { if (!t)
                            return { audioVideo: n }; if (e.desktopSharingSourceDevice)
                            throw _this.stopMediaStream(n), new Error("Using a camera as screenshare source isnot supported on this browser."); return new Promise(function (t, i) { A.a.obtainStream(_this._parseDesktopSharingOptions(e), function (e) { return t({ audioVideo: n, desktop: e }); }, function (e) { n && _this.stopMediaStream(n), i(e); }); }); });
                    };
                    Z.prototype._getMissingTracks = function (e, t) {
                        if (e === void 0) { e = []; }
                        var n = [], i = e.includes("audio"), r = t && t.getAudioTracks().length > 0;
                        i && !r && n.push("audio");
                        var s = e.includes("video"), o = t && t.getVideoTracks().length > 0;
                        return s && !o && n.push("video"), n;
                    };
                    Z.prototype._parseDesktopSharingOptions = function (e) { return { desktopSharingSources: e.desktopSharingSources, gumOptions: { frameRate: e.desktopSharingFrameRate }, trackOptions: z(e) }; };
                    Z.prototype.newObtainAudioAndVideoPermissions = function (e) {
                        var _this = this;
                        O.info("Using the new gUM flow");
                        var t = e.timeout, n = w(e, ["timeout"]), i = [], r = function () { if (!(-1 !== (n.devices || []).indexOf("desktop")))
                            return Promise.resolve(); var e = n.desktopSharingSourceDevice, i = n.desktopSharingSources, r = n.desktopSharingFrameRate; if (e) {
                            var i_6 = $ && $.find(function (t) { return "videoinput" === t.kind && (t.deviceId === e || t.label === e); });
                            if (!i_6)
                                return Promise.reject(new c.a({ name: "ConstraintNotSatisfiedError" }, {}, [e]));
                            var r_3 = ["video"], _a = this._parseDesktopSharingOptions(n), s_1 = _a.gumOptions, o_1 = _a.trackOptions, a_1 = { video: I({}, s_1, { deviceId: i_6.deviceId }) };
                            return this._getUserMedia(r_3, a_1, t).then(function (e) { var t = e && e.getTracks()[0]; return (t && t.applyConstraints ? t.applyConstraints(o_1) : Promise.resolve()).then(function () { return ({ sourceType: "device", stream: e }); }); });
                        } return this._newGetDesktopMedia({ desktopSharingSources: i, desktopSharingFrameRate: r }); }.bind(this), s = function () { var e = (n.devices || ["audio", "video"]).filter(function (e) { return "audio" === e || "video" === e; }); if (!e.length)
                            return Promise.resolve(); var i = function (e, t) {
                            if (e === void 0) { e = []; }
                            if (t === void 0) { t = {}; }
                            var n = a()(t.constraints || M);
                            if (e.indexOf("video") >= 0)
                                if (n.video || (n.video = {}), y.a.isWebKitBased() && (n.video.height && n.video.height.ideal ? n.video.height = { ideal: a()(n.video.height.ideal) } : O.warn("Ideal camera height missing, camera may not start properly"), n.video.width && n.video.width.ideal ? n.video.width = { ideal: a()(n.video.width.ideal) } : O.warn("Ideal camera width missing, camera may not start properly")), t.cameraDeviceId)
                                    n.video.deviceId = t.cameraDeviceId;
                                else {
                                    var e_21 = t.facingMode || l.a.USER;
                                    n.video.facingMode = e_21;
                                }
                            else
                                n.video = !1;
                            return e.indexOf("audio") >= 0 ? (n.audio && "boolean" != typeof n.audio || (n.audio = {}), y.a.isFirefox() || y.a.isWebKitBased() ? n.audio = { deviceId: t.micDeviceId, autoGainControl: !H && !F, echoCancellation: !j && !F, noiseSuppression: !U && !F } : (n.audio.optional || (n.audio.optional = []), n.audio.optional.push({ sourceId: t.micDeviceId }, { echoCancellation: !j && !F }, { googEchoCancellation: !j && !F }, { googAutoGainControl: !H && !F }, { googNoiseSuppression: !U && !F }, { googHighpassFilter: !B && !F }, { googNoiseSuppression2: !U && !F }, { googEchoCancellation2: !j && !F }, { googAutoGainControl2: !H && !F }))) : n.audio = !1, e.indexOf("desktop") >= 0 && (n.video && "boolean" != typeof n.video || (n.video = {}), n.video = { mandatory: W(I({}, t, { source: "desktop" })) }), n;
                        }(e, n); return O.info("Got media constraints: ", JSON.stringify(i)), this._getUserMedia(e, i, t); }.bind(this);
                        return r().then((function (e) { if (!e)
                            return; var t = e.stream, n = e.sourceId, r = e.sourceType, s = t.getAudioTracks(); if (s.length) {
                            var e_22 = new MediaStream(s);
                            i.push({ stream: e_22, sourceId: n, sourceType: r, track: e_22.getAudioTracks()[0] });
                        } var o = t.getVideoTracks(); if (o.length) {
                            var e_23 = new MediaStream(o);
                            i.push({ stream: e_23, sourceId: n, sourceType: r, track: e_23.getVideoTracks()[0], videoType: v.a.DESKTOP });
                        } })).then(s).then((function (e) { if (!e)
                            return; var t = e.getAudioTracks(); if (t.length) {
                            var e_24 = new MediaStream(t);
                            i.push({ stream: e_24, track: e_24.getAudioTracks()[0], effects: n.effects });
                        } var r = e.getVideoTracks(); if (r.length) {
                            var e_25 = new MediaStream(r);
                            i.push({ stream: e_25, track: e_25.getVideoTracks()[0], videoType: v.a.CAMERA, effects: n.effects });
                        } })).then(function () { return i; }).catch(function (e) { return (i.forEach(function (_a) {
                            var e = _a.stream;
                            _this.stopMediaStream(e);
                        }), Promise.reject(e)); });
                    };
                    Z.prototype.isDeviceListAvailable = function () { return Boolean(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices); };
                    Z.prototype.isDeviceChangeAvailable = function (e) { return "output" !== e && "audiooutput" !== e || V; };
                    Z.prototype.stopMediaStream = function (e) { e && (e.getTracks().forEach(function (e) { e.stop && e.stop(); }), e.stop && e.stop(), e.release && e.release()); };
                    Z.prototype.isDesktopSharingEnabled = function () { return A.a.isSupported(); };
                    Z.prototype.setAudioOutputDevice = function (e) { return this.isDeviceChangeAvailable("output") ? J.setSinkId(e).then(function () { L = e, x = !0, O.log("Audio output device set to " + e), D.emit(m.a.AUDIO_OUTPUT_DEVICE_CHANGED, e); }) : Promise.reject(new Error("Audio output device change is not supported")); };
                    Z.prototype.getAudioOutputDevice = function () { return L; };
                    Z.prototype.getCurrentlyAvailableMediaDevices = function () { return $; };
                    Z.prototype.arePermissionsGrantedForAvailableDevices = function () { return $.some(function (e) { return Boolean(e.label); }); };
                    Z.prototype.getEventDataForActiveDevice = function (e) { var t = [], n = { deviceId: e.deviceId, kind: e.kind, label: e.label, groupId: e.groupId }; return t.push(n), { deviceList: t }; };
                    Z.prototype.setSuspendVideo = function (e, t) { e.optional || (e.optional = []), e.optional = e.optional.filter(function (e) { return !e.hasOwnProperty("googSuspendBelowMinBitrate"); }), t && e.optional.push({ googSuspendBelowMinBitrate: "true" }); };
                    return Z;
                }(C.a));  var ee = new Z; t.a = ee; }).call(this, "modules/RTC/RTCUtils.js");
        }, function (e, t) { var n = [], i = window.onerror; var r = window.onunhandledrejection; window.onerror = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            n.forEach(function (t) { return t.apply(void 0, e); }), i && i.apply(void 0, e);
        }, window.onunhandledrejection = function (e) { n.forEach(function (t) { return t(null, null, null, null, e.reason); }), r && r(e); }; var s = { addHandler: function (e) { n.push(e); }, callErrorHandler: function (e) { var t = window.onerror; t && t(null, null, null, null, e); }, callUnhandledRejectionHandler: function (e) { var t = window.onunhandledrejection; t && t(e); } }; e.exports = s; }, function (e, t) { e.exports = { CAMERA: "camera", DESKTOP: "desktop", NONE: "none" }; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return A; })); var i = n(4), r = n(0), s = n(5), o = n(7), a = n.n(o), c = n(12), d = n.n(c), u = n(3), l = n(6), h = n(11), p = n.n(h), m = n(20), f = n(29), g = n(116), _ = n(75), v = n(10), S = n(118); function y(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var E = Object(i.getLogger)(e); var b = 0, T = 0; function C(e, t) { var n = []; var i = null; return e.forEach(function (e) { e.mediaType === s.a ? i = t.micDeviceId : e.videoType === d.a.CAMERA && (i = t.cameraDeviceId), T = Object(f.d)(T); var r = new _.a(function (e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { y(e, t, n[t]); }));
            } return e; }({}, e, { deviceId: i, facingMode: t.facingMode, rtcId: T, effects: t.effects })); n.push(r); }), n; } function R(e) {
                if (e === void 0) { e = []; }
                return e.map(function (e) { var t = e.sourceId, n = e.sourceType, i = e.stream, r = e.track, s = e.videoType, o = e.effects, _a = r.getSettings(), a = _a.deviceId, c = _a.facingMode; return T = Object(f.d)(T), new _.a({ deviceId: a, facingMode: c, mediaType: r.kind, rtcId: T, sourceId: t, sourceType: n, stream: i, track: r, videoType: s || null, effects: o }); });
            }
                var A = /** @class */ (function (_super) {
                    __extends(A, _super);
                    function A(e, t) {
                        if (t === void 0) { t = {}; }
                        var _this = this;
                        _this = _super.call(this) || this, _this.conference = e, _this.peerConnections = new Map, _this.localTracks = [], _this.options = t, _this._channel = null, _this._lastN = -1, _this._lastNEndpoints = null, _this._maxFrameHeight = void 0, _this._selectedEndpoints = [], _this._lastNChangeListener = _this._onLastNChanged.bind(_this), _this._onDeviceListChanged = _this._onDeviceListChanged.bind(_this), _this._updateAudioOutputForAudioTracks = _this._updateAudioOutputForAudioTracks.bind(_this), _this._videoType = d.a.CAMERA, v.a.isDeviceChangeAvailable("output") && (v.a.addListener(a.a.AUDIO_OUTPUT_DEVICE_CHANGED, _this._updateAudioOutputForAudioTracks), v.a.addListener(a.a.DEVICE_LIST_CHANGED, _this._onDeviceListChanged));
                        return _this;
                    }
                    A.prototype.destroy = function () { v.a.removeListener(a.a.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks), v.a.removeListener(a.a.DEVICE_LIST_CHANGED, this._onDeviceListChanged), this._channelOpenListener && this.removeListener(a.a.DATA_CHANNEL_OPEN, this._channelOpenListener); };
                    A.newCreateLocalTracks = function (e) { return R(e); };
                    A.obtainAudioAndVideoPermissions = function (e) { var t = u.a.usesNewGumFlow(); return (t ? v.a.newObtainAudioAndVideoPermissions(e) : v.a.obtainAudioAndVideoPermissions(e)).then(function (n) { return t ? R(n) : C(n, e); }); };
                    A.prototype.initializeBridgeChannel = function (e, t) {
                        var _this = this;
                        this._channel = new g.a(e, t, this.eventEmitter), this._channelOpenListener = function () { if (_this._receiverVideoConstraints)
                            try {
                                _this._channel.sendNewReceiverVideoConstraintsMessage(_this._receiverVideoConstraints);
                            }
                            catch (e) {
                                p.a.callErrorHandler(e), E.error("Cannot send ReceiverVideoConstraints(\n                        " + JSON.stringify(_this._receiverVideoConstraints) + ") endpoint message", e);
                            }
                        else
                            try {
                                _this._channel.sendSelectedEndpointsMessage(_this._selectedEndpoints), void 0 !== _this._maxFrameHeight && _this._channel.sendReceiverVideoConstraintMessage(_this._maxFrameHeight), -1 !== _this._lastN && _this._channel.sendSetLastNMessage(_this._lastN);
                            }
                            catch (e) {
                                p.a.callErrorHandler(e), E.error("Cannot send selected(" + _this._selectedEndpoint + "), lastN(" + _this._lastN + "), frameHeight(" + _this._maxFrameHeight + ") endpoint message", e);
                            } try {
                            _this._channel.sendVideoTypeMessage(_this._videoType);
                        }
                        catch (e) {
                            p.a.callErrorHandler(e), E.error("Cannot send VideoTypeMessage " + _this._videoType, e);
                        } _this.removeListener(a.a.DATA_CHANNEL_OPEN, _this._channelOpenListener), _this._channelOpenListener = null; }, this.addListener(a.a.DATA_CHANNEL_OPEN, this._channelOpenListener), this.addListener(a.a.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);
                    };
                    A.prototype._onDeviceListChanged = function () { this._updateAudioOutputForAudioTracks(v.a.getAudioOutputDevice()); };
                    A.prototype._onLastNChanged = function (e) {
                        var _this = this;
                        if (e === void 0) { e = []; }
                        var t = this._lastNEndpoints || [];
                        var n = [], i = [];
                        this._lastNEndpoints = e, n = t.filter(function (e) { return !_this.isInLastN(e); }), i = e.filter(function (e) { return -1 === t.indexOf(e); }), this.conference.eventEmitter.emit(r.LAST_N_ENDPOINTS_CHANGED, n, i);
                    };
                    A.prototype.onCallEnded = function () { this._channel && (this._channel && "websocket" === this._channel.mode && this._channel.close(), this._channel = null); };
                    A.prototype.setNewReceiverVideoConstraints = function (e) { this._receiverVideoConstraints = e, this._channel && this._channel.isOpen() && this._channel.sendNewReceiverVideoConstraintsMessage(e); };
                    A.prototype.setReceiverVideoConstraint = function (e) { this._maxFrameHeight = e, this._channel && this._channel.isOpen() && this._channel.sendReceiverVideoConstraintMessage(e); };
                    A.prototype.setVideoType = function (e) { this._videoType !== e && (this._videoType = e, this._channel && this._channel.isOpen() && this._channel.sendVideoTypeMessage(e)); };
                    A.prototype.selectEndpoints = function (e) { this._selectedEndpoints = e, this._channel && this._channel.isOpen() && this._channel.sendSelectedEndpointsMessage(e); };
                    A.addListener = function (e, t) { v.a.addListener(e, t); };
                    A.removeListener = function (e, t) { v.a.removeListener(e, t); };
                    A.init = function (e) {
                        if (e === void 0) { e = {}; }
                        return this.options = e, v.a.init(this.options);
                    };
                    A.prototype.createPeerConnection = function (e, t, n, i) { var r = JSON.parse(JSON.stringify(v.a.pcConstraints)); void 0 !== i.abtestSuspendVideo && (v.a.setSuspendVideo(r, i.abtestSuspendVideo), l.a.analytics.addPermanentProperties({ abtestSuspendVideo: i.abtestSuspendVideo })), i.enableInsertableStreams && (E.debug("E2EE - setting insertable streams constraints"), t.encodedInsertableStreams = !0, t.forceEncodedAudioInsertableStreams = !0, t.forceEncodedVideoInsertableStreams = !0), u.a.supportsSdpSemantics() && (t.sdpSemantics = "plan-b"), i.forceTurnRelay && (t.iceTransportPolicy = "relay"), t.bundlePolicy = "max-bundle", b = Object(f.d)(b); var s = new S.a(this, b, e, t, r, n, i); return this.peerConnections.set(s.id, s), s; };
                    A.prototype._removePeerConnection = function (e) { var t = e.id; return !!this.peerConnections.has(t) && (this.peerConnections.delete(t), !0); };
                    A.prototype.addLocalTrack = function (e) { if (!e)
                        throw new Error("track must not be null nor undefined"); this.localTracks.push(e), e.conference = this.conference; };
                    A.prototype.getLocalVideoTrack = function () { var e = this.getLocalTracks(s.c); return e.length ? e[0] : void 0; };
                    A.prototype.getLocalAudioTrack = function () { var e = this.getLocalTracks(s.a); return e.length ? e[0] : void 0; };
                    A.prototype.getLocalTracks = function (e) { var t = this.localTracks.slice(); return void 0 !== e && (t = t.filter(function (t) { return t.getType() === e; })), t; };
                    A.prototype.getRemoteTracks = function (e) { var t = []; for (var _i = 0, _a = this.peerConnections.values(); _i < _a.length; _i++) {
                        var n_10 = _a[_i];
                        var i_7 = n_10.getRemoteTracks(void 0, e);
                        i_7 && (t = t.concat(i_7));
                    } return t; };
                    A.prototype.setAudioMute = function (e) { var t = []; return this.getLocalTracks(s.a).forEach(function (n) { t.push(e ? n.mute() : n.unmute()); }), Promise.all(t); };
                    A.prototype.setVideoMute = function (e) { var t = []; return this.getLocalTracks(s.c).concat(this.getLocalTracks(s.b)).forEach(function (n) { t.push(e ? n.mute() : n.unmute()); }), Promise.all(t); };
                    A.prototype.removeLocalTrack = function (e) { var t = this.localTracks.indexOf(e); -1 !== t && this.localTracks.splice(t, 1); };
                    A.attachMediaStream = function (e, t) { return v.a.attachMediaStream(e, t); };
                    A.getStreamID = function (e) { return v.a.getStreamID(e); };
                    A.getTrackID = function (e) { return v.a.getTrackID(e); };
                    A.isDeviceListAvailable = function () { return v.a.isDeviceListAvailable(); };
                    A.isDeviceChangeAvailable = function (e) { return v.a.isDeviceChangeAvailable(e); };
                    A.isWebRtcSupported = function () { return u.a.isSupported(); };
                    A.getAudioOutputDevice = function () { return v.a.getAudioOutputDevice(); };
                    A.getCurrentlyAvailableMediaDevices = function () { return v.a.getCurrentlyAvailableMediaDevices(); };
                    A.arePermissionsGrantedForAvailableDevices = function () { return v.a.arePermissionsGrantedForAvailableDevices(); };
                    A.getEventDataForActiveDevice = function (e) { return v.a.getEventDataForActiveDevice(e); };
                    A.setAudioOutputDevice = function (e) { return v.a.setAudioOutputDevice(e); };
                    A.isUserStream = function (e) { return A.isUserStreamById(v.a.getStreamID(e)); };
                    A.isUserStreamById = function (e) { return e && "mixedmslabel" !== e && "default" !== e; };
                    A.enumerateDevices = function (e) { v.a.enumerateDevices(e); };
                    A.stopMediaStream = function (e) { v.a.stopMediaStream(e); };
                    A.isDesktopSharingEnabled = function () { return v.a.isDesktopSharingEnabled(); };
                    A.prototype.closeBridgeChannel = function () { this._channel && (this._channel.close(), this._channel = null, this.removeListener(a.a.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener)); };
                    A.prototype.setAudioLevel = function (e, t, n, i) { var r = e.getTrackBySSRC(t); r && (r.isAudioTrack() ? (r.isLocal() !== i && E.error(r + " was expected to " + (i ? "be" : "not be") + " local"), r.setAudioLevel(n, e)) : E.warn("Received audio level for non-audio track: " + t)); };
                    A.prototype.sendChannelMessage = function (e, t) { if (!this._channel)
                        throw new Error("Channel support is disabled!"); this._channel.sendMessage(e, t); };
                    A.prototype.sendEndpointStatsMessage = function (e) { this._channel && this._channel.isOpen() && this._channel.sendEndpointStatsMessage(e); };
                    A.prototype.setLastN = function (e) { this._lastN !== e && (this._lastN = e, this._channel && this._channel.isOpen() && this._channel.sendSetLastNMessage(e), this.eventEmitter.emit(a.a.LASTN_VALUE_CHANGED, e)); };
                    A.prototype.isInLastN = function (e) { return !this._lastNEndpoints || this._lastNEndpoints.indexOf(e) > -1; };
                    A.prototype._updateAudioOutputForAudioTracks = function (e) { var t = this.getRemoteTracks(s.a); for (var _i = 0, t_14 = t; _i < t_14.length; _i++) {
                        var n_11 = t_14[_i];
                        n_11.setAudioOutput(e);
                    } };
                    return A;
                }(m.a));  }).call(this, "modules/RTC/RTC.js");
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "CONSTRAINT_FAILED", (function () { return i; })), n.d(t, "ELECTRON_DESKTOP_PICKER_ERROR", (function () { return r; })), n.d(t, "ELECTRON_DESKTOP_PICKER_NOT_FOUND", (function () { return s; })), n.d(t, "GENERAL", (function () { return o; })), n.d(t, "NOT_FOUND", (function () { return a; })), n.d(t, "PERMISSION_DENIED", (function () { return c; })), n.d(t, "SCREENSHARING_GENERIC_ERROR", (function () { return d; })), n.d(t, "SCREENSHARING_USER_CANCELED", (function () { return u; })), n.d(t, "TIMEOUT", (function () { return l; })), n.d(t, "TRACK_IS_DISPOSED", (function () { return h; })), n.d(t, "TRACK_NO_STREAM_FOUND", (function () { return p; })), n.d(t, "UNSUPPORTED_RESOLUTION", (function () { return m; }));
            var i = "gum.constraint_failed", r = "gum.electron_desktop_picker_error", s = "gum.electron_desktop_picker_not_found", o = "gum.general", a = "gum.not_found", c = "gum.permission_denied", d = "gum.screensharing_generic_error", u = "gum.screensharing_user_canceled", l = "gum.timeout", h = "track.track_is_disposed", p = "track.no_stream_found", m = "gum.unsupported_resolution";
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "LOCAL_TRACK_STOPPED", (function () { return i; })), n.d(t, "TRACK_AUDIO_LEVEL_CHANGED", (function () { return r; })), n.d(t, "TRACK_AUDIO_OUTPUT_CHANGED", (function () { return s; })), n.d(t, "TRACK_MUTE_CHANGED", (function () { return o; })), n.d(t, "TRACK_VIDEOTYPE_CHANGED", (function () { return a; })), n.d(t, "NO_DATA_FROM_SOURCE", (function () { return c; })), n.d(t, "NO_AUDIO_INPUT", (function () { return d; }));
            var i = "track.stopped", r = "track.audioLevelsChanged", s = "track.audioOutputChanged", o = "track.trackMuteChanged", a = "track.videoTypeChanged", c = "track.no_data_from_source", d = "track.no_audio_input";
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "AUTHENTICATION_REQUIRED", (function () { return i; })), n.d(t, "CHAT_ERROR", (function () { return r; })), n.d(t, "CONFERENCE_DESTROYED", (function () { return s; })), n.d(t, "CONFERENCE_MAX_USERS", (function () { return o; })), n.d(t, "CONNECTION_ERROR", (function () { return a; })), n.d(t, "CONFERENCE_RESTARTED", (function () { return c; })), n.d(t, "NOT_ALLOWED_ERROR", (function () { return d; })), n.d(t, "MEMBERS_ONLY_ERROR", (function () { return u; })), n.d(t, "CONFERENCE_ACCESS_DENIED", (function () { return l; })), n.d(t, "FOCUS_DISCONNECTED", (function () { return h; })), n.d(t, "FOCUS_LEFT", (function () { return p; })), n.d(t, "GRACEFUL_SHUTDOWN", (function () { return m; })), n.d(t, "ICE_FAILED", (function () { return f; })), n.d(t, "INCOMPATIBLE_SERVER_VERSIONS", (function () { return g; })), n.d(t, "OFFER_ANSWER_FAILED", (function () { return _; })), n.d(t, "PASSWORD_NOT_SUPPORTED", (function () { return v; })), n.d(t, "PASSWORD_REQUIRED", (function () { return S; })), n.d(t, "RESERVATION_ERROR", (function () { return y; })), n.d(t, "VIDEOBRIDGE_NOT_AVAILABLE", (function () { return E; }));
            var i = "conference.authenticationRequired", r = "conference.chatError", s = "conference.destroyed", o = "conference.max_users", a = "conference.connectionError", c = "conference.restarted", d = "conference.connectionError.notAllowed", u = "conference.connectionError.membersOnly", l = "conference.connectionError.accessDenied", h = "conference.focusDisconnected", p = "conference.focusLeft", m = "conference.gracefulShutdown", f = "conference.iceFailed", g = "conference.incompatible_server_versions", _ = "conference.offerAnswerFailed", v = "conference.passwordNotSupported", S = "conference.passwordRequired", y = "conference.reservationError", E = "conference.videobridgeNotAvailable";
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return s; }));
            var i = n(3), r = n(9);
            function s(e) { var t = e.split("\r\nm="); for (var e_26 = 1, n_12 = t.length; e_26 < n_12; e_26++) {
                var i_8 = "m=" + t[e_26];
                e_26 !== n_12 - 1 && (i_8 += "\r\n"), t[e_26] = i_8;
            } var n = t.shift() + "\r\n"; this.media = t, this.raw = n + t.join(""), this.session = n; }
            s.prototype.failICE = !1, s.prototype.removeTcpCandidates = !1, s.prototype.removeUdpCandidates = !1, s.prototype.getMediaSsrcMap = function () { var e = {}; var _loop_1 = function (t_15) {
                var n_13 = { mediaindex: t_15, mid: r.a.parseMID(r.a.findLine(this_1.media[t_15], "a=mid:")), ssrcs: {}, ssrcGroups: [] };
                e[t_15] = n_13, r.a.findLines(this_1.media[t_15], "a=ssrc:").forEach(function (e) { var t = e.substring(7).split(" ")[0]; n_13.ssrcs[t] || (n_13.ssrcs[t] = { ssrc: t, lines: [] }), n_13.ssrcs[t].lines.push(e); }), r.a.findLines(this_1.media[t_15], "a=ssrc-group:").forEach(function (e) { var t = e.indexOf(" "), i = e.substr(0, t).substr(13), r = e.substr(14 + i.length).split(" "); r.length && n_13.ssrcGroups.push({ semantics: i, ssrcs: r }); });
            }; var this_1 = this; for (var t_15 = 0; t_15 < this.media.length; t_15++) {
                _loop_1(t_15);
            } return e; }, s.prototype.containsSSRC = function (e) { var t = this.getMediaSsrcMap(); var n = !1; return Object.keys(t).forEach(function (i) { n || t[i].ssrcs[e] && (n = !0); }), n; }, s.prototype.toJingle = function (e, t) { r.a.findLines(this.session, "a=group:").forEach(function (t) { var n = t.split(" "), i = n.shift().substr(8); e.c("group", { xmlns: "urn:xmpp:jingle:apps:grouping:0", semantics: i }); for (var t_17 = 0; t_17 < n.length; t_17++)
                e.c("content", { name: n[t_17] }).up(); e.up(); }); for (var n_14 = 0; n_14 < this.media.length; n_14++) {
                var s_2 = r.a.parseMLine(this.media[n_14].split("\r\n")[0]);
                if ("audio" !== s_2.media && "video" !== s_2.media && "application" !== s_2.media)
                    continue;
                var o = void 0;
                var a = r.a.findLine(this.media[n_14], "a=ssrc:");
                o = !!a && a.substring(7).split(" ")[0], e.c("content", { creator: t, name: s_2.media });
                var c = r.a.findLine(this.media[n_14], "a=mid:");
                if (c) {
                    var t_18 = r.a.parseMID(c);
                    e.attrs({ name: t_18 });
                }
                if ("audio" === s_2.media || "video" === s_2.media) {
                    e.c("description", { xmlns: "urn:xmpp:jingle:apps:rtp:1", media: s_2.media }), o && e.attrs({ ssrc: o });
                    for (var t_19 = 0; t_19 < s_2.fmt.length; t_19++) {
                        var i_9 = r.a.findLine(this.media[n_14], "a=rtpmap:" + s_2.fmt[t_19]);
                        e.c("payload-type", r.a.parseRTPMap(i_9));
                        var o_2 = r.a.findLine(this.media[n_14], "a=fmtp:" + s_2.fmt[t_19]);
                        if (o_2) {
                            var t_20 = r.a.parseFmtp(o_2);
                            for (var n_15 = 0; n_15 < t_20.length; n_15++)
                                e.c("parameter", t_20[n_15]).up();
                        }
                        this.rtcpFbToJingle(n_14, e, s_2.fmt[t_19]), e.up();
                    }
                    if (o) {
                        var t_21 = r.a.parseSSRC(this.media[n_14]);
                        for (var _i = 0, t_16 = t_21; _i < t_16.length; _i++) {
                            var _a = t_16[_i], n_16 = _a[0], i_10 = _a[1];
                            e.c("source", { ssrc: n_16, xmlns: "urn:xmpp:jingle:apps:rtp:ssma:0" }), i_10.forEach(function (t) { var n = t.indexOf(" "), i = t.substr(n + 1); if (e.c("parameter"), -1 === i.indexOf(":"))
                                e.attrs({ name: i });
                            else {
                                var t_22 = i.split(":", 2)[0];
                                e.attrs({ name: t_22 });
                                var n_17 = i.split(":", 2)[1];
                                n_17 = r.a.filterSpecialChars(n_17), e.attrs({ value: n_17 });
                            } e.up(); }), e.up();
                        }
                        r.a.findLines(this.media[n_14], "a=ssrc-group:").forEach(function (t) { var n = t.indexOf(" "), i = t.substr(0, n).substr(13), r = t.substr(14 + i.length).split(" "); r.length && (e.c("ssrc-group", { semantics: i, xmlns: "urn:xmpp:jingle:apps:rtp:ssma:0" }), r.forEach(function (t) { return e.c("source", { ssrc: t }).up(); }), e.up()); });
                    }
                    var t_23 = r.a.findLines(this.media[n_14], "a=rid:");
                    if (t_23.length && i.a.usesRidsForSimulcast()) {
                        var i_11 = t_23.map(function (e) { return e.split(":")[1]; }).map(function (e) { return e.split(" ")[0]; });
                        i_11.forEach(function (t) { e.c("source", { rid: t, xmlns: "urn:xmpp:jingle:apps:rtp:ssma:0" }), e.up(); });
                        r.a.findLine(this.media[n_14], "a=simulcast:") && (e.c("rid-group", { semantics: "SIM", xmlns: "urn:xmpp:jingle:apps:rtp:ssma:0" }), i_11.forEach(function (t) { e.c("source", { rid: t }).up(); }), e.up());
                    }
                    r.a.findLine(this.media[n_14], "a=rtcp-mux") && e.c("rtcp-mux").up(), this.rtcpFbToJingle(n_14, e, "*");
                    var a_2 = r.a.findLines(this.media[n_14], "a=extmap:");
                    for (var t_24 = 0; t_24 < a_2.length; t_24++) {
                        var n_18 = r.a.parseExtmap(a_2[t_24]);
                        if (e.c("rtp-hdrext", { xmlns: "urn:xmpp:jingle:apps:rtp:rtp-hdrext:0", uri: n_18.uri, id: n_18.value }), n_18.hasOwnProperty("direction"))
                            switch (n_18.direction) {
                                case "sendonly":
                                    e.attrs({ senders: "responder" });
                                    break;
                                case "recvonly":
                                    e.attrs({ senders: "initiator" });
                                    break;
                                case "sendrecv":
                                    e.attrs({ senders: "both" });
                                    break;
                                case "inactive": e.attrs({ senders: "none" });
                            }
                        e.up();
                    }
                    e.up();
                }
                this.transportToJingle(n_14, e);
                var d = this.media[n_14];
                r.a.findLine(d, "a=sendrecv", this.session) ? e.attrs({ senders: "both" }) : r.a.findLine(d, "a=sendonly", this.session) ? e.attrs({ senders: "initiator" }) : r.a.findLine(d, "a=recvonly", this.session) ? e.attrs({ senders: "responder" }) : r.a.findLine(d, "a=inactive", this.session) && e.attrs({ senders: "none" }), "0" !== s_2.port || r.a.findLine(d, "a=bundle-only", this.session) || e.attrs({ senders: "rejected" }), e.up();
            } return e.up(), e; }, s.prototype.transportToJingle = function (e, t) {
                var _this = this;
                t.c("transport");
                var n = r.a.findLine(this.media[e], "a=sctpmap:", this.session);
                if (n) {
                    var e_27 = r.a.parseSCTPMap(n);
                    t.c("sctpmap", { xmlns: "urn:xmpp:jingle:transports:dtls-sctp:1", number: e_27[0], protocol: e_27[1] }), e_27.length > 2 && t.attrs({ streams: e_27[2] }), t.up();
                }
                r.a.findLines(this.media[e], "a=fingerprint:", this.session).forEach(function (n) { var i = r.a.parseFingerprint(n); i.xmlns = "urn:xmpp:jingle:apps:dtls:0", t.c("fingerprint").t(i.fingerprint), delete i.fingerprint; var s = r.a.findLine(_this.media[e], "a=setup:", _this.session); s && (i.setup = s.substr(8)), t.attrs(i), t.up(); });
                var i = r.a.iceparams(this.media[e], this.session);
                if (i) {
                    i.xmlns = "urn:xmpp:jingle:transports:ice-udp:1", t.attrs(i);
                    r.a.findLines(this.media[e], "a=candidate:", this.session).forEach(function (e) { var n = r.a.candidateToJingle(e); _this.failICE && (n.ip = "1.1.1.1"); var i = n && "string" == typeof n.protocol ? n.protocol.toLowerCase() : ""; _this.removeTcpCandidates && ("tcp" === i || "ssltcp" === i) || _this.removeUdpCandidates && "udp" === i || t.c("candidate", n).up(); });
                }
                t.up();
            }, s.prototype.rtcpFbToJingle = function (e, t, n) { r.a.findLines(this.media[e], "a=rtcp-fb:" + n).forEach(function (e) { var n = r.a.parseRTCPFB(e); "trr-int" === n.type ? (t.c("rtcp-fb-trr-int", { xmlns: "urn:xmpp:jingle:apps:rtp:rtcp-fb:0", value: n.params[0] }), t.up()) : (t.c("rtcp-fb", { xmlns: "urn:xmpp:jingle:apps:rtp:rtcp-fb:0", type: n.type }), n.params.length > 0 && t.attrs({ subtype: n.params[0] }), t.up()); }); }, s.prototype.rtcpFbFromJingle = function (e, t) { var n = ""; var i = e.find('>rtcp-fb-trr-int[xmlns="urn:xmpp:jingle:apps:rtp:rtcp-fb:0"]'); i.length && (n += "a=rtcp-fb:* trr-int ", i.attr("value") ? n += i.attr("value") : n += "0", n += "\r\n"); return e.find('>rtcp-fb[xmlns="urn:xmpp:jingle:apps:rtp:rtcp-fb:0"]').each(function (e, i) { n += "a=rtcp-fb:" + t + " " + i.getAttribute("type"), i.hasAttribute("subtype") && (n += " " + i.getAttribute("subtype")), n += "\r\n"; }), n; }, s.prototype.fromJingle = function (e) {
                var _this = this;
                var t = Date.now();
                this.raw = "v=0\r\no=- " + t + " 2 IN IP4 0.0.0.0\r\ns=-\r\nt=0 0\r\n";
                var n = $(e).find('>group[xmlns="urn:xmpp:jingle:apps:grouping:0"]');
                n.length && n.each(function (e, t) { var n = $(t).find(">content").map(function (e, t) { return t.getAttribute("name"); }).get(); n.length > 0 && (_this.raw += "a=group:" + (t.getAttribute("semantics") || t.getAttribute("type")) + " " + n.join(" ") + "\r\n"); }), this.session = this.raw, e.find(">content").each(function (e, t) { var n = _this.jingle2media($(t)); _this.media.push(n); }), this.raw = this.session + this.media.join("");
            }, s.prototype.jingle2media = function (e) {
                var _this = this;
                var t = e.find(">description"), n = e.find('>transport[xmlns="urn:xmpp:jingle:transports:ice-udp:1"]');
                var i = "";
                var s = n.find('>sctpmap[xmlns="urn:xmpp:jingle:transports:dtls-sctp:1"]'), o = { media: t.attr("media"), port: "1" };
                if ("rejected" === e.attr("senders") && (o.port = "0"), n.find('>fingerprint[xmlns="urn:xmpp:jingle:apps:dtls:0"]').length ? o.proto = s.length ? "DTLS/SCTP" : "RTP/SAVPF" : o.proto = "RTP/AVPF", s.length) {
                    i += "m=application " + o.port + " DTLS/SCTP " + s.attr("number") + "\r\n", i += "a=sctpmap:" + s.attr("number") + " " + s.attr("protocol");
                    var e_28 = s.attr("streams");
                    i += e_28 ? " " + e_28 + "\r\n" : "\r\n";
                }
                else
                    o.fmt = t.find(">payload-type").map(function (e, t) { return t.getAttribute("id"); }).get(), i += r.a.buildMLine(o) + "\r\n";
                switch ((i += "c=IN IP4 0.0.0.0\r\n", s.length || (i += "a=rtcp:1 IN IP4 0.0.0.0\r\n"), n.length && (n.attr("ufrag") && (i += r.a.buildICEUfrag(n.attr("ufrag")) + "\r\n"), n.attr("pwd") && (i += r.a.buildICEPwd(n.attr("pwd")) + "\r\n"), n.find('>fingerprint[xmlns="urn:xmpp:jingle:apps:dtls:0"]').each(function (e, t) { i += "a=fingerprint:" + t.getAttribute("hash"), i += " " + $(t).text(), i += "\r\n", t.hasAttribute("setup") && (i += "a=setup:" + t.getAttribute("setup") + "\r\n"); })), n.find(">candidate").each(function (e, t) { var n = t.getAttribute("protocol"); n = "string" == typeof n ? n.toLowerCase() : "", _this.removeTcpCandidates && ("tcp" === n || "ssltcp" === n) || _this.removeUdpCandidates && "udp" === n || (_this.failICE && t.setAttribute("ip", "1.1.1.1"), i += r.a.candidateFromJingle(t)); }), e.attr("senders"))) {
                    case "initiator":
                        i += "a=sendonly\r\n";
                        break;
                    case "responder":
                        i += "a=recvonly\r\n";
                        break;
                    case "none":
                        i += "a=inactive\r\n";
                        break;
                    case "both": i += "a=sendrecv\r\n";
                }
                return i += "a=mid:" + e.attr("name") + "\r\n", t.find(">rtcp-mux").length && (i += "a=rtcp-mux\r\n"), t.find(">payload-type").each(function (e, t) { i += r.a.buildRTPMap(t) + "\r\n", $(t).find(">parameter").length && (i += "a=fmtp:" + t.getAttribute("id") + " ", i += $(t).find(">parameter").map(function (e, t) { var n = t.getAttribute("name"); return (n ? n + "=" : "") + t.getAttribute("value"); }).get().join("; "), i += "\r\n"), i += _this.rtcpFbFromJingle($(t), t.getAttribute("id")); }), i += this.rtcpFbFromJingle(t, "*"), t.find('>rtp-hdrext[xmlns="urn:xmpp:jingle:apps:rtp:rtp-hdrext:0"]').each(function (e, t) { i += "a=extmap:" + t.getAttribute("id") + " " + t.getAttribute("uri") + "\r\n"; }), t.find('>ssrc-group[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each(function (e, t) { var n = t.getAttribute("semantics"), r = $(t).find(">source").map(function (e, t) { return t.getAttribute("ssrc"); }).get(); r.length && (i += "a=ssrc-group:" + n + " " + r.join(" ") + "\r\n"); }), t.find('>source[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each(function (e, t) { var n = t.getAttribute("ssrc"); $(t).find(">parameter").each(function (e, t) { var s = t.getAttribute("name"); var o = t.getAttribute("value"); o = r.a.filterSpecialChars(o), i += "a=ssrc:" + n + " " + s, o && o.length && (i += ":" + o), i += "\r\n"; }); }), i;
            };
        }, function (e, t, n) {
            "use strict";
            var i, r = "object" == typeof Reflect ? Reflect : null, s = r && "function" == typeof r.apply ? r.apply : function (e, t, n) { return Function.prototype.apply.call(e, t, n); };
            i = r && "function" == typeof r.ownKeys ? r.ownKeys : Object.getOwnPropertySymbols ? function (e) { return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e)); } : function (e) { return Object.getOwnPropertyNames(e); };
            var o = Number.isNaN || function (e) { return e != e; };
            function a() { a.init.call(this); }
            e.exports = a, a.EventEmitter = a, a.prototype._events = void 0, a.prototype._eventsCount = 0, a.prototype._maxListeners = void 0;
            var c = 10;
            function d(e) { if ("function" != typeof e)
                throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e); }
            function u(e) { return void 0 === e._maxListeners ? a.defaultMaxListeners : e._maxListeners; }
            function l(e, t, n, i) { var r, s, o, a; if (d(n), void 0 === (s = e._events) ? (s = e._events = Object.create(null), e._eventsCount = 0) : (void 0 !== s.newListener && (e.emit("newListener", t, n.listener ? n.listener : n), s = e._events), o = s[t]), void 0 === o)
                o = s[t] = n, ++e._eventsCount;
            else if ("function" == typeof o ? o = s[t] = i ? [n, o] : [o, n] : i ? o.unshift(n) : o.push(n), (r = u(e)) > 0 && o.length > r && !o.warned) {
                o.warned = !0;
                var c = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                c.name = "MaxListenersExceededWarning", c.emitter = e, c.type = t, c.count = o.length, a = c, console && console.warn && console.warn(a);
            } return e; }
            function h() { if (!this.fired)
                return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments); }
            function p(e, t, n) { var i = { fired: !1, wrapFn: void 0, target: e, type: t, listener: n }, r = h.bind(i); return r.listener = n, i.wrapFn = r, r; }
            function m(e, t, n) { var i = e._events; if (void 0 === i)
                return []; var r = i[t]; return void 0 === r ? [] : "function" == typeof r ? n ? [r.listener || r] : [r] : n ? function (e) { for (var t = new Array(e.length), n = 0; n < t.length; ++n)
                t[n] = e[n].listener || e[n]; return t; }(r) : g(r, r.length); }
            function f(e) { var t = this._events; if (void 0 !== t) {
                var n = t[e];
                if ("function" == typeof n)
                    return 1;
                if (void 0 !== n)
                    return n.length;
            } return 0; }
            function g(e, t) { for (var n = new Array(t), i = 0; i < t; ++i)
                n[i] = e[i]; return n; }
            Object.defineProperty(a, "defaultMaxListeners", { enumerable: !0, get: function () { return c; }, set: function (e) { if ("number" != typeof e || e < 0 || o(e))
                    throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + "."); c = e; } }), a.init = function () { void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0; }, a.prototype.setMaxListeners = function (e) { if ("number" != typeof e || e < 0 || o(e))
                throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + "."); return this._maxListeners = e, this; }, a.prototype.getMaxListeners = function () { return u(this); }, a.prototype.emit = function (e) { for (var t = [], n = 1; n < arguments.length; n++)
                t.push(arguments[n]); var i = "error" === e, r = this._events; if (void 0 !== r)
                i = i && void 0 === r.error;
            else if (!i)
                return !1; if (i) {
                var o;
                if (t.length > 0 && (o = t[0]), o instanceof Error)
                    throw o;
                var a = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
                throw a.context = o, a;
            } var c = r[e]; if (void 0 === c)
                return !1; if ("function" == typeof c)
                s(c, this, t);
            else {
                var d = c.length, u = g(c, d);
                for (n = 0; n < d; ++n)
                    s(u[n], this, t);
            } return !0; }, a.prototype.addListener = function (e, t) { return l(this, e, t, !1); }, a.prototype.on = a.prototype.addListener, a.prototype.prependListener = function (e, t) { return l(this, e, t, !0); }, a.prototype.once = function (e, t) { return d(t), this.on(e, p(this, e, t)), this; }, a.prototype.prependOnceListener = function (e, t) { return d(t), this.prependListener(e, p(this, e, t)), this; }, a.prototype.removeListener = function (e, t) { var n, i, r, s, o; if (d(t), void 0 === (i = this._events))
                return this; if (void 0 === (n = i[e]))
                return this; if (n === t || n.listener === t)
                0 == --this._eventsCount ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, n.listener || t));
            else if ("function" != typeof n) {
                for (r = -1, s = n.length - 1; s >= 0; s--)
                    if (n[s] === t || n[s].listener === t) {
                        o = n[s].listener, r = s;
                        break;
                    }
                if (r < 0)
                    return this;
                0 === r ? n.shift() : function (e, t) { for (; t + 1 < e.length; t++)
                    e[t] = e[t + 1]; e.pop(); }(n, r), 1 === n.length && (i[e] = n[0]), void 0 !== i.removeListener && this.emit("removeListener", e, o || t);
            } return this; }, a.prototype.off = a.prototype.removeListener, a.prototype.removeAllListeners = function (e) { var t, n, i; if (void 0 === (n = this._events))
                return this; if (void 0 === n.removeListener)
                return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n[e]), this; if (0 === arguments.length) {
                var r, s = Object.keys(n);
                for (i = 0; i < s.length; ++i)
                    "removeListener" !== (r = s[i]) && this.removeAllListeners(r);
                return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
            } if ("function" == typeof (t = n[e]))
                this.removeListener(e, t);
            else if (void 0 !== t)
                for (i = t.length - 1; i >= 0; i--)
                    this.removeListener(e, t[i]); return this; }, a.prototype.listeners = function (e) { return m(this, e, !0); }, a.prototype.rawListeners = function (e) { return m(this, e, !1); }, a.listenerCount = function (e, t) { return "function" == typeof e.listenerCount ? e.listenerCount(t) : f.call(e, t); }, a.prototype.listenerCount = f, a.prototype.eventNames = function () { return this._eventsCount > 0 ? i(this._events) : []; };
        }, function (e, t, n) {
            "use strict";
            var i = n(14);
            var r = {};
            function s(e, t, n) { if ("object" == typeof e && void 0 !== e.name)
                switch ((this.gum = { error: e, constraints: t, devices: n && Array.isArray(n) ? n.slice(0) : void 0 }, e.name)) {
                    case "NotAllowedError":
                    case "PermissionDeniedError":
                    case "SecurityError":
                        this.name = i.PERMISSION_DENIED, this.message = r[this.name] + (this.gum.devices || []).join(", ");
                        break;
                    case "DevicesNotFoundError":
                    case "NotFoundError":
                        this.name = i.NOT_FOUND, this.message = r[this.name] + (this.gum.devices || []).join(", ");
                        break;
                    case "ConstraintNotSatisfiedError":
                    case "OverconstrainedError": {
                        var s_3 = e.constraintName || e.constraint;
                        t && t.video && (!n || n.indexOf("video") > -1) && ("minWidth" === s_3 || "maxWidth" === s_3 || "minHeight" === s_3 || "maxHeight" === s_3 || "width" === s_3 || "height" === s_3 || "deviceId" === s_3) ? (this.name = i.UNSUPPORTED_RESOLUTION, this.message = r[this.name] + function (e, t) { if (t && t.video && t.video.mandatory)
                            switch (e) {
                                case "width": return t.video.mandatory.minWidth;
                                case "height": return t.video.mandatory.minHeight;
                                default: return t.video.mandatory[e] || "";
                            } return ""; }(s_3, t)) : (this.name = i.CONSTRAINT_FAILED, this.message = r[this.name] + e.constraintName);
                        break;
                    }
                    default: this.name = i.GENERAL, this.message = e.message || r[this.name];
                }
            else {
                if ("string" != typeof e)
                    throw new Error("Invalid arguments");
                r[e] ? (this.name = e, this.message = t || r[e]) : this.message = e;
            } this.stack = e.stack || (new Error).stack; }
            r[i.UNSUPPORTED_RESOLUTION] = "Video resolution is not supported: ", r[i.SCREENSHARING_USER_CANCELED] = "User canceled screen sharing prompt", r[i.SCREENSHARING_GENERIC_ERROR] = "Unknown error from screensharing", r[i.ELECTRON_DESKTOP_PICKER_ERROR] = "Unkown error from desktop picker", r[i.ELECTRON_DESKTOP_PICKER_NOT_FOUND] = "Failed to detect desktop picker", r[i.GENERAL] = "Generic getUserMedia error", r[i.PERMISSION_DENIED] = "User denied permission to use device(s): ", r[i.NOT_FOUND] = "Requested device(s) was/were not found: ", r[i.CONSTRAINT_FAILED] = "Constraint could not be satisfied: ", r[i.TIMEOUT] = "Could not start media source. Timeout occured!", r[i.TRACK_IS_DISPOSED] = "Track has been already disposed", r[i.TRACK_NO_STREAM_FOUND] = "Track does not have an associated Media Stream", s.prototype = Object.create(Error.prototype), s.prototype.constructor = s, t.a = s;
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return s; }));
            var i = n(18), r = n.n(i);
            var s = /** @class */ (function () {
                function s(e) {
                    if (e === void 0) { e = new r.a; }
                    this.eventEmitter = e, this.addEventListener = this.on = this.addListener, this.removeEventListener = this.off = this.removeListener;
                }
                s.prototype.addListener = function (e, t) {
                    var _this = this;
                    return this.eventEmitter.addListener(e, t), function () { return _this.removeEventListener(e, t); };
                };
                s.prototype.removeListener = function (e, t) { this.eventEmitter.removeListener(e, t); };
                return s;
            }());
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "DETECTOR_STATE_CHANGE", (function () { return i; })), n.d(t, "AUDIO_INPUT_STATE_CHANGE", (function () { return r; })), n.d(t, "NO_AUDIO_INPUT", (function () { return s; })), n.d(t, "VAD_NOISY_DEVICE", (function () { return o; })), n.d(t, "VAD_REPORT_PUBLISHED", (function () { return a; })), n.d(t, "VAD_SCORE_PUBLISHED", (function () { return c; })), n.d(t, "VAD_TALK_WHILE_MUTED", (function () { return d; }));
            var i = "detector_state_change", r = "audio_input_state_changed", s = "no_audio_input_detected", o = "detection.vad_noise_device", a = "vad-report-published", c = "detection.vad_score_published", d = "detection.vad_talk_while_muted";
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return R; })), n.d(t, "d", (function () { return A; })), n.d(t, "c", (function () { return w; })), n.d(t, "b", (function () { return I; })), n.d(t, "e", (function () { return P; })); var i = n(4), r = n(2), s = (n(155), n(40)), o = n(28), a = n(1), c = n.n(a), d = n(3), u = n(56), l = n(11), h = n.n(l), p = n(20), m = n(38), f = n.n(m), g = n(95), _ = n(41), v = n(100), S = n(105), y = n(112), E = n(113), b = n(114); var T = Object(i.getLogger)(e), C = /<failure.*><not-allowed\/><text>(.*)<\/text><\/failure>/gi; var R = [{ urls: "stun:meet-jit-si-turnrelay.jitsi.net:443" }], A = "type", w = "http://jitsi.org/protocol/jigasi", I = "https://jitsi.org/meet/e2ee";
                var P = /** @class */ (function (_super) {
                    __extends(P, _super);
                    function P(e, t) {
                        var _this = this;
                        var n;
                        _this = _super.call(this) || this, _this.connection = null, _this.disconnectInProgress = !1, _this.connectionTimes = {}, _this.options = e, _this.token = t, _this.authenticatedUser = !1, Object(b.a)(), Object(y.a)();
                        var i = e.xmppPing || {};
                        i.domain = e.hosts.domain, _this.connection = function (_a) {
                            var e = _a.enableWebsocketResume, _b = _a.serviceUrl, t = _b === void 0 ? "/http-bind" : _b, n = _a.shard, i = _a.token, r = _a.websocketKeepAlive, s = _a.websocketKeepAliveUrl, o = _a.xmppPing;
                            return i && (t += (-1 === t.indexOf("?") ? "?" : "&") + "token=" + i), new _.a({ enableWebsocketResume: e, serviceUrl: t, websocketKeepAlive: r, websocketKeepAliveUrl: s, xmppPing: o, shard: n });
                        }({ enableWebsocketResume: e.enableWebsocketResume, serviceUrl: e.serviceUrl || e.bosh, token: t, websocketKeepAlive: e.websocketKeepAlive, websocketKeepAliveUrl: e.websocketKeepAliveUrl, xmppPing: i, shard: null === (n = e.deploymentInfo) || void 0 === n ? void 0 : n.shard }), _this.connection.on(_.a.Events.CONN_SHARD_CHANGED, function () { var e = { shard_changed: !0, suspend_time: _this.connection.ping.getPingSuspendTime(), time_since_last_success: _this.connection.getTimeSinceLastSuccess() }; _this.eventEmitter.emit(o.CONNECTION_FAILED, s.OTHER_ERROR, void 0, void 0, e); }), _this._initStrophePlugins(), _this.caps = new g.a(_this.connection, _this.options.clientNode), _this.initFeaturesList(), $(window).on("beforeunload unload", function (e) { _this.disconnect(e).catch(function () { }); });
                        return _this;
                    }
                    P.prototype.initFeaturesList = function () { this.caps.addFeature("urn:xmpp:jingle:1"), this.caps.addFeature("urn:xmpp:jingle:apps:rtp:1"), this.caps.addFeature("urn:xmpp:jingle:transports:ice-udp:1"), this.caps.addFeature("urn:xmpp:jingle:apps:dtls:0"), this.caps.addFeature("urn:xmpp:jingle:transports:dtls-sctp:1"), this.caps.addFeature("urn:xmpp:jingle:apps:rtp:audio"), this.caps.addFeature("urn:xmpp:jingle:apps:rtp:video"), this.options.disableRtx || d.a.isFirefox() && d.a.isVersionLessThan(84) || this.caps.addFeature("urn:ietf:rfc:4588"), !0 === this.options.enableOpusRed && d.a.supportsAudioRed() && this.caps.addFeature("http://jitsi.org/opus-red"), (void 0 === this.options.enableRemb || this.options.enableRemb) && this.caps.addFeature("http://jitsi.org/remb"), (void 0 === this.options.enableTcc || this.options.enableTcc) && this.caps.addFeature("http://jitsi.org/tcc"), this.caps.addFeature("urn:ietf:rfc:5761"), this.caps.addFeature("urn:ietf:rfc:5888"), d.a.isChromiumBased() && !0 === this.options.enableLipSync && (T.info("Lip-sync enabled !"), this.caps.addFeature("http://jitsi.org/meet/lipsync")), this.connection.rayo && this.caps.addFeature("urn:xmpp:rayo:client:1"), u.a.isSupported(this.options) && this.caps.addFeature(I, !1, !0); };
                    P.prototype.getConnection = function () { return this.connection; };
                    P.prototype.connectionHandler = function (e, t, n) {
                        var _this = this;
                        if (e === void 0) { e = {}; }
                        var i = window.performance.now(), a = r.Strophe.getStatusString(t).toLowerCase();
                        if (this.connectionTimes[a] = i, T.log("(TIME) Strophe " + a + (n ? "[" + n + "]" : "") + ":\t", i), this.eventEmitter.emit(c.a.CONNECTION_STATUS_CHANGED, e, t, n), t === r.Strophe.Status.CONNECTED || t === r.Strophe.Status.ATTACHED)
                            this.connection.jingle.getStunAndTurnCredentials(), T.info("My Jabber ID: " + this.connection.jid), this._resetState(), this.caps.getFeaturesAndIdentities(this.options.hosts.domain).then(function (_a) {
                                var e = _a.features, t = _a.identities;
                                e.has(r.Strophe.NS.PING) || T.error("Ping NOT supported by " + _this.options.hosts.domain + " - please enable ping in your XMPP server config"), t.forEach(function (e) { "speakerstats" === e.type && (_this.speakerStatsComponentAddress = e.name), "conference_duration" === e.type && (_this.conferenceDurationComponentAddress = e.name), "lobbyrooms" === e.type && (_this.lobbySupported = !0, e.name && _this.caps.getFeaturesAndIdentities(e.name, e.type).then(function (_a) {
                                    var e = _a.features;
                                    e.forEach(function (e) { e.endsWith("#displayname_required") && _this.eventEmitter.emit(o.DISPLAY_NAME_REQUIRED); });
                                }).catch(function (e) { return T.warn("Error getting features from lobby.", e && e.message); })); }), (_this.speakerStatsComponentAddress || _this.conferenceDurationComponentAddress) && _this.connection.addHandler(_this._onPrivateMessage.bind(_this), null, "message", null, null);
                            }).catch(function (e) { var t = "Feature discovery error"; h.a.callErrorHandler(new Error(t + ": " + e)), T.error(t, e); }), e.password && (this.authenticatedUser = !0), this.connection && this.connection.connected && r.Strophe.getResourceFromJid(this.connection.jid) && this.eventEmitter.emit(o.CONNECTION_ESTABLISHED, r.Strophe.getResourceFromJid(this.connection.jid));
                        else if (t === r.Strophe.Status.CONNFAIL)
                            "x-strophe-bad-non-anon-jid" === n ? this.anonymousConnectionFailed = !0 : this.connectionFailed = !0, this.lastErrorMsg = n, "giving-up" === n && this.eventEmitter.emit(o.CONNECTION_FAILED, s.OTHER_ERROR, n);
                        else if (t === r.Strophe.Status.ERROR)
                            this.lastErrorMsg = n;
                        else if (t === r.Strophe.Status.DISCONNECTED) {
                            this.connection.ping.stopInterval();
                            var e_29 = Boolean(this.disconnectInProgress), t_25 = n || this.lastErrorMsg;
                            if (this.anonymousConnectionFailed)
                                this.eventEmitter.emit(o.CONNECTION_FAILED, s.PASSWORD_REQUIRED);
                            else if (this.connectionFailed)
                                this.eventEmitter.emit(o.CONNECTION_FAILED, s.OTHER_ERROR, t_25, void 0, this._getConnectionFailedReasonDetails());
                            else if (e_29)
                                this.eventEmitter.emit(o.CONNECTION_DISCONNECTED, t_25);
                            else {
                                T.error("XMPP connection dropped!");
                                var e_30 = r.Strophe.getLastErrorStatus();
                                e_30 >= 500 && e_30 < 600 ? this.eventEmitter.emit(o.CONNECTION_FAILED, s.SERVER_ERROR, t_25 || "server-error", void 0, this._getConnectionFailedReasonDetails()) : this.eventEmitter.emit(o.CONNECTION_FAILED, s.CONNECTION_DROPPED_ERROR, t_25 || "connection-dropped-error", void 0, this._getConnectionFailedReasonDetails());
                            }
                        }
                        else if (t === r.Strophe.Status.AUTHFAIL) {
                            var t_26 = this.getConnection().getLastFailedMessage();
                            this.eventEmitter.emit(o.CONNECTION_FAILED, s.PASSWORD_REQUIRED, n || this._parseConnectionFailedMessage(t_26), e);
                        }
                    };
                    P.prototype._parseConnectionFailedMessage = function (e) { if (!e)
                        return null; var t = C.exec(e); return t ? t[1] : null; };
                    P.prototype._connect = function (e, t) { this._resetState(), this.connection.connect(e, t, this.connectionHandler.bind(this, { jid: e, password: t })); };
                    P.prototype.attach = function (e) { this._resetState(); var t = this.connectionTimes.attaching = window.performance.now(); T.log("(TIME) Strophe Attaching:\t", t), this.connection.attach(e.jid, e.sid, parseInt(e.rid, 10) + 1, this.connectionHandler.bind(this, { jid: e.jid, password: e.password })); };
                    P.prototype._resetState = function () { this.anonymousConnectionFailed = !1, this.connectionFailed = !1, this.lastErrorMsg = void 0, this.disconnectInProgress = void 0; };
                    P.prototype.connect = function (e, t) { if (!e) {
                        var _a = this.options.hosts, t_27 = _a.anonymousdomain, n_19 = _a.domain;
                        var i_12 = t_27 || n_19;
                        var r_4 = window.location;
                        if (t_27) {
                            var e_31 = r_4 && r_4.search;
                            (e_31 && -1 !== e_31.indexOf("login=true") || this.token) && (i_12 = n_19);
                        }
                        e = i_12 || r_4 && r_4.hostname;
                    } return this._connect(e, t); };
                    P.prototype.createRoom = function (e, t, n) { var i = e + "@" + (t.customDomain ? t.customDomain : this.options.hosts.muc.toLowerCase()) + "/"; var r = n ? n(this.connection.jid, this.authenticatedUser) : f.a.randomHexString(8).toLowerCase(); return T.info("JID " + this.connection.jid + " using MUC nickname " + r), i += r, this.connection.emuc.createRoom(i, null, t); };
                    P.prototype.getJid = function () { return this.connection.jid; };
                    P.prototype.getJingleLog = function () { var e = this.connection.jingle; return e ? e.getLog() : {}; };
                    P.prototype.getXmppLog = function () { return (this.connection.logger || {}).log || null; };
                    P.prototype.dial = function () {
                        var _a;
                        var e = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            e[_i] = arguments[_i];
                        }
                        (_a = this.connection.rayo).dial.apply(_a, e);
                    };
                    P.prototype.ping = function (e) {
                        var _this = this;
                        return new Promise(function (t, n) { _this.connection.ping.ping(_this.connection.pingDomain, t, n, e); });
                    };
                    P.prototype.getSessions = function () { return this.connection.jingle.sessions; };
                    P.prototype.disconnect = function (e) {
                        var _this = this;
                        return this.disconnectInProgress ? this.disconnectInProgress : this.connection ? (this.disconnectInProgress = new Promise(function (e) { var t = function (n, i) { i === r.Strophe.Status.DISCONNECTED && (e(), _this.eventEmitter.removeListener(c.a.CONNECTION_STATUS_CHANGED, t)); }; _this.eventEmitter.on(c.a.CONNECTION_STATUS_CHANGED, t); }), this._cleanupXmppConnection(e), this.disconnectInProgress) : Promise.resolve();
                    };
                    P.prototype._cleanupXmppConnection = function (e) { if (!this.connection.isUsingWebSocket && this.connection.flush(), !this.connection.isUsingWebSocket && null != e) {
                        var t_28 = e.type;
                        if (("beforeunload" === t_28 || "unload" === t_28) && (this.connection.options.sync = !0, this.connection.sendUnavailableBeacon()))
                            return;
                    } this.connection.disconnect(), !0 !== this.connection.options.sync && this.connection.flush(); };
                    P.prototype._initStrophePlugins = function () { var e = { jvb: { iceServers: [] }, p2p: { iceServers: [] } }, t = this.options.p2p && this.options.p2p.stunServers || R; Array.isArray(t) && (T.info("P2P STUN servers: ", t), e.p2p.iceServers = t), this.options.p2p && this.options.p2p.iceTransportPolicy && (T.info("P2P ICE transport policy: ", this.options.p2p.iceTransportPolicy), e.p2p.iceTransportPolicy = this.options.p2p.iceTransportPolicy), this.connection.addConnectionPlugin("emuc", new v.a(this)), this.connection.addConnectionPlugin("jingle", new S.a(this, this.eventEmitter, e)), this.connection.addConnectionPlugin("rayo", new E.a); };
                    P.prototype._getConnectionFailedReasonDetails = function () { var e = {}; if (this.options.deploymentInfo && this.options.deploymentInfo.shard && this.connection.lastResponseHeaders) {
                        var t_29 = this.connection.lastResponseHeaders.trim().split(/[\r\n]+/), n_20 = {};
                        t_29.forEach(function (e) { var t = e.split(": "), i = t.shift(), r = t.join(": "); n_20[i] = r; }), e.shard_changed = this.options.deploymentInfo.shard !== n_20["x-jitsi-shard"];
                    } return e.suspend_time = this.connection.ping.getPingSuspendTime(), e.time_since_last_success = this.connection.getTimeSinceLastSuccess(), e; };
                    P.prototype.sendDominantSpeakerEvent = function (e) { if (!this.speakerStatsComponentAddress || !e)
                        return; var t = Object(r.$msg)({ to: this.speakerStatsComponentAddress }); t.c("speakerstats", { xmlns: "http://jitsi.org/jitmeet", room: e }).up(), this.connection.send(t); };
                    P.prototype.tryParseJSONAndVerify = function (e) { try {
                        var t_30 = JSON.parse(e);
                        if (t_30 && "object" == typeof t_30) {
                            var e_32 = t_30[A];
                            if (void 0 !== e_32)
                                return t_30;
                            T.debug("parsing valid json but does not have correct structure", "topic: ", e_32);
                        }
                    }
                    catch (e) {
                        return T.error(e), !1;
                    } return !1; };
                    P.prototype._onPrivateMessage = function (e) { var t = e.getAttribute("from"); if (t !== this.speakerStatsComponentAddress && t !== this.conferenceDurationComponentAddress)
                        return !0; var n = $(e).find(">json-message").text(), i = this.tryParseJSONAndVerify(n); return i && "speakerstats" === i[A] && i.users && this.eventEmitter.emit(c.a.SPEAKER_STATS_RECEIVED, i.users), i && "conference_duration" === i[A] && i.created_timestamp && this.eventEmitter.emit(c.a.CONFERENCE_TIMESTAMP_RECEIVED, i.created_timestamp), !0; };
                    return P;
                }(p.a));  }).call(this, "modules/xmpp/xmpp.js");
        }, function (e, t) { e.exports = { H264: "h264", VP8: "vp8", VP9: "vp9" }; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; })), n.d(t, "b", (function () { return r; })), n.d(t, "c", (function () { return s; })), n.d(t, "d", (function () { return o; })), n.d(t, "e", (function () { return a; }));
            var i = "statistics.audioLevel", r = "statistics.before_disposed", s = "statistics.byte_sent_stats", o = "statistics.connectionstats", a = "statistics.long_tasks_stats";
        }, function (e, t, n) { var i = n(159), r = n(160); t.write = r, t.parse = i.parse, t.parseFmtpConfig = i.parseFmtpConfig, t.parseParams = i.parseParams, t.parsePayloads = i.parsePayloads, t.parseRemoteCandidates = i.parseRemoteCandidates, t.parseImageAttributes = i.parseImageAttributes, t.parseSimulcastStreamList = i.parseSimulcastStreamList; }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "STATUS_AVAILABLE", (function () { return i; })), n.d(t, "STATUS_UNDEFINED", (function () { return r; })), n.d(t, "STATUS_BUSY", (function () { return s; })), n.d(t, "STATE_ON", (function () { return o; })), n.d(t, "STATE_OFF", (function () { return a; })), n.d(t, "STATE_PENDING", (function () { return c; })), n.d(t, "STATE_RETRYING", (function () { return d; })), n.d(t, "STATE_FAILED", (function () { return u; })), n.d(t, "ERROR_NO_CONNECTION", (function () { return l; })), n.d(t, "ERROR_SESSION_EXISTS", (function () { return h; }));
            var i = "available", r = "undefined", s = "busy", o = "on", a = "off", c = "pending", d = "retrying", u = "failed", l = "error_no_connection", h = "error_session_already_exists";
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return y; })), n.d(t, "b", (function () { return i; })), n.d(t, "c", (function () { return R; }));
            var i = {};
            n.r(i), n.d(i, "CHROME", (function () { return o; })), n.d(i, "OPERA", (function () { return a; })), n.d(i, "FIREFOX", (function () { return c; })), n.d(i, "INTERNET_EXPLORER", (function () { return d; })), n.d(i, "SAFARI", (function () { return u; })), n.d(i, "NWJS", (function () { return l; })), n.d(i, "ELECTRON", (function () { return h; })), n.d(i, "REACT_NATIVE", (function () { return p; })), n.d(i, "UNKNOWN", (function () { return m; }));
            n(72);
            var r = n(87), s = n.n(r);
            var o = "chrome", a = "opera", c = "firefox", d = "iexplorer", u = "safari", l = "nwjs", h = "electron", p = "react-native", m = "unknown", f = { Chrome: o, Chromium: o, Opera: a, Firefox: c, "Internet Explorer": d, Safari: u };
            function g() { var e = navigator.userAgent; if (e.match(/Electron/)) {
                var t_31 = e.match(/Electron\/([\d.]+)/)[1];
                return { name: h, version: t_31 };
            } }
            function _() { var e = navigator.userAgent; if (e.match(/JitsiMeetNW/)) {
                var t_32 = e.match(/JitsiMeetNW\/([\d.]+)/)[1];
                return { name: l, version: t_32 };
            } }
            function v() { var e = navigator.userAgent.match(/\b(react[ \t_-]*native)(?:\/(\S+))?/i); var t; if (e || "ReactNative" === navigator.product) {
                var n_21;
                return e && e.length > 2 && (n_21 = e[1], t = e[2]), n_21 || (n_21 = "react-native"), t || (t = "unknown"), { name: p, version: t };
            } }
            function S(e) { var t; var n = [v, g, _]; for (var e_33 = 0; e_33 < n.length; e_33++)
                if (t = n[e_33](), t)
                    return t; var i = e.getBrowserName(); return i in f ? { name: f[i], version: e.getBrowserVersion() } : (t = function () { var e = navigator.userAgent, t = { name: m, version: void 0 }; if (e.match(/Chrome/) && !e.match(/Edge/))
                if (e.match(/Edg(A?)/)) {
                    var n_22 = e.match(/Chrome\/([\d.]+)/)[1];
                    Number.parseInt(n_22, 10) > 72 && (t.name = o, t.version = n_22);
                }
                else
                    t.name = o, t.version = e.match(/Chrome\/([\d.]+)/)[1]; return t; }(), t || { name: m, version: void 0 }); }
            var y = /** @class */ (function () {
                function y(e) {
                    var t, n;
                    if (this._bowser = s.a.getParser(navigator.userAgent), void 0 === e) {
                        var e_34 = S(this._bowser);
                        t = e_34.name, n = e_34.version;
                    }
                    else
                        e.name in f ? (t = f[e.name], n = e.version) : (t = m, n = void 0);
                    this._name = t, this._version = n;
                }
                y.prototype.getName = function () { return this._name; };
                y.prototype.isChrome = function () { return this._name === o; };
                y.prototype.isOpera = function () { return this._name === a; };
                y.prototype.isFirefox = function () { return this._name === c; };
                y.prototype.isIExplorer = function () { return this._name === d; };
                y.prototype.isSafari = function () { return this._name === u; };
                y.prototype.isNWJS = function () { return this._name === l; };
                y.prototype.isElectron = function () { return this._name === h; };
                y.prototype.isReactNative = function () { return this._name === p; };
                y.prototype.getVersion = function () { return this._version; };
                y.prototype._checkCondition = function (e) { if (this._version)
                    return this._bowser.satisfies(e); };
                y.prototype.isVersionGreaterThan = function (e) {
                    var _a;
                    return this._checkCondition((_a = {}, _a[this._name] = ">" + e, _a));
                };
                y.prototype.isVersionLessThan = function (e) {
                    var _a;
                    return this._checkCondition((_a = {}, _a[this._name] = "<" + e, _a));
                };
                y.prototype.isVersionEqualTo = function (e) {
                    var _a;
                    return this._checkCondition((_a = {}, _a[this._name] = "~" + e, _a));
                };
                return y;
            }());
            var E = n(18), b = n.n(E);
            var T = /** @class */ (function (_super) {
                __extends(T, _super);
                function T() {
                    var e = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        e[_i] = arguments[_i];
                    }
                    var _this = this;
                    var t, n, i;
                    _this = _super.apply(this, e) || this, i = {}, (n = "_storage") in (t = _this) ? Object.defineProperty(t, n, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : t[n] = i;
                    return _this;
                }
                T.prototype.clear = function () { this._storage = {}; };
                Object.defineProperty(T.prototype, "length", {
                    get: function () { return Object.keys(this._storage).length; },
                    enumerable: false,
                    configurable: true
                });
                T.prototype.getItem = function (e) { return this._storage[e]; };
                T.prototype.setItem = function (e, t) { this._storage[e] = t; };
                T.prototype.removeItem = function (e) { delete this._storage[e]; };
                T.prototype.key = function (e) { var t = Object.keys(this._storage); if (!(t.length <= e))
                    return t[e]; };
                T.prototype.serialize = function () { return JSON.stringify(this._storage); };
                return T;
            }(b.a));
            var C = /** @class */ (function (_super) {
                __extends(C, _super);
                function C() {
                    var _this = _super.call(this) || this;
                    try {
                        _this._storage = window.localStorage, _this._localStorageDisabled = !1;
                    }
                    catch (e) { }
                    _this._storage || (console.warn("Local storage is disabled."), _this._storage = new T, _this._localStorageDisabled = !0);
                    return _this;
                }
                C.prototype.isLocalStorageDisabled = function () { return this._localStorageDisabled; };
                C.prototype.clear = function () { this._storage.clear(), this.emit("changed"); };
                Object.defineProperty(C.prototype, "length", {
                    get: function () { return this._storage.length; },
                    enumerable: false,
                    configurable: true
                });
                C.prototype.getItem = function (e) { return this._storage.getItem(e); };
                C.prototype.setItem = function (e, t, n) {
                    if (n === void 0) { n = !1; }
                    this._storage.setItem(e, t), n || this.emit("changed");
                };
                C.prototype.removeItem = function (e) { this._storage.removeItem(e), this.emit("changed"); };
                C.prototype.key = function (e) { return this._storage.key(e); };
                C.prototype.serialize = function () { if (this.isLocalStorageDisabled)
                    return this._storage.serialize(); var e = this._storage.length, t = {}; for (var n_23 = 0; n_23 < e; n_23++) {
                    var e_35 = this._storage.key(n_23);
                    t[e_35] = this._storage.getItem(e_35);
                } return JSON.stringify(t); };
                return C;
            }(b.a));
            var R = new C;
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "CONNECTION_DISCONNECTED", (function () { return i; })), n.d(t, "CONNECTION_ESTABLISHED", (function () { return r; })), n.d(t, "CONNECTION_FAILED", (function () { return s; })), n.d(t, "WRONG_STATE", (function () { return o; })), n.d(t, "DISPLAY_NAME_REQUIRED", (function () { return a; }));
            var i = "connection.connectionDisconnected", r = "connection.connectionEstablished", s = "connection.connectionFailed", o = "connection.wrongState", a = "connection.display_name_required";
        }, function (e, t, n) {
            "use strict";
            function i(e) { var t = e; return e >= Number.MAX_SAFE_INTEGER && (t = 0), t + 1; }
            function r(e) { return e.length > 0 ? e.reduce(function (e, t) { return e + t; }) / e.length : 0; }
            function s(e) { return e.filter(function (e) { return e >= 0; }); }
            n.d(t, "d", (function () { return i; })), n.d(t, "b", (function () { return r; })), n.d(t, "c", (function () { return s; })), n.d(t, "a", (function () { return o; }));
            var o = /** @class */ (function () {
                function o() {
                    this.average = 0, this.n = 0;
                }
                o.prototype.addNext = function (e) { "number" == typeof e && (this.n += 1, this.average = this.average + (e - this.average) / this.n); };
                o.prototype.getAverage = function () { return this.average; };
                return o;
            }());
        }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(27), r = n(4), s = n(104), o = n.n(s); var a = Object(r.getLogger)(e); var c, d; function u() { return (Math.random().toString(16) + "000000000").substr(2, 8); } t.a = { _storage: i.c, init: function (e) { this._storage = e || i.c; }, get callStatsUserName() { return c || (c = this._storage.getItem("callStatsUserName"), c || (c = function () { var e = o.a.generateUsername(); return a.log("generated callstats uid", e), e; }(), this._storage.setItem("callStatsUserName", c))), c; }, get machineId() { if (!d) {
                    var e_36 = this._storage.getItem("billingId");
                    d = e_36 || this._storage.getItem("jitsiMeetId"), e_36 ? this._storage.setItem("jitsiMeetId", e_36) : d || (d = function () { var e = u() + u() + u() + u(); return a.log("generated id", e), e; }(), this._storage.setItem("jitsiMeetId", d));
                } return d; }, get sessionId() { return this._storage.getItem("sessionId"); }, set sessionId(e) { e ? this._storage.setItem("sessionId", e) : this._storage.removeItem("sessionId"); } }; }).call(this, "modules/settings/Settings.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "b", (function () { return r; })), n.d(t, "c", (function () { return s; })), n.d(t, "a", (function () { return c; }));
            var i = n(25);
            function r(e) { return parseInt(e.ssrcs.split(" ")[0], 10); }
            function s(e) { return parseInt(e.ssrcs.split(" ")[1], 10); }
            function o(e) { return e.ssrcs ? e.ssrcs.map(function (e) { return e.id; }).filter(function (e, t, n) { return n.indexOf(e) === t; }).length : 0; }
            var a = /** @class */ (function () {
                function a(e) {
                    if (!e)
                        throw new Error("mLine is undefined");
                    this.mLine = e;
                }
                Object.defineProperty(a.prototype, "ssrcs", {
                    get: function () { return this.mLine.ssrcs || (this.mLine.ssrcs = []), this.mLine.ssrcs; },
                    set: function (e) { this.mLine.ssrcs = e; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(a.prototype, "direction", {
                    get: function () { return this.mLine.direction; },
                    set: function (e) { this.mLine.direction = e; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(a.prototype, "ssrcGroups", {
                    get: function () { return this.mLine.ssrcGroups || (this.mLine.ssrcGroups = []), this.mLine.ssrcGroups; },
                    set: function (e) { this.mLine.ssrcGroups = e; },
                    enumerable: false,
                    configurable: true
                });
                a.prototype.getSSRCAttrValue = function (e, t) { var n = this.ssrcs.find(function (n) { return n.id === e && n.attribute === t; }); return n && n.value; };
                a.prototype.removeSSRC = function (e) { this.mLine.ssrcs && this.mLine.ssrcs.length && (this.mLine.ssrcs = this.mLine.ssrcs.filter(function (t) { return t.id !== e; })); };
                a.prototype.addSSRCAttribute = function (e) { this.ssrcs.push(e); };
                a.prototype.findGroup = function (e, t) { return this.ssrcGroups.find(function (n) { return n.semantics === e && (!t || t === n.ssrcs); }); };
                a.prototype.findGroups = function (e) { return this.ssrcGroups.filter(function (t) { return t.semantics === e; }); };
                a.prototype.findGroupByPrimarySSRC = function (e, t) { return this.ssrcGroups.find(function (n) { return n.semantics === e && r(n) === t; }); };
                a.prototype.findSSRCByMSID = function (e) { return this.ssrcs.find(function (t) { return "msid" === t.attribute && (null === e || t.value === e); }); };
                a.prototype.getSSRCCount = function () { return o(this.mLine); };
                a.prototype.containsAnySSRCGroups = function () { return void 0 !== this.mLine.ssrcGroups; };
                a.prototype.getPrimaryVideoSsrc = function () { var e = this.mLine.type; if ("video" !== e)
                    throw new Error("getPrimarySsrc doesn't work with '" + e + "'"); if (1 === o(this.mLine))
                    return this.mLine.ssrcs[0].id; if (this.mLine.ssrcGroups) {
                    var e_37 = this.findGroup("SIM");
                    if (e_37)
                        return r(e_37);
                    var t_33 = this.findGroup("FID");
                    if (t_33)
                        return r(t_33);
                    var n_24 = this.findGroup("FEC-FR");
                    if (n_24)
                        return r(n_24);
                } };
                a.prototype.getRtxSSRC = function (e) { var t = this.findGroupByPrimarySSRC("FID", e); return t && s(t); };
                a.prototype.getSSRCs = function () { return this.ssrcs.map(function (e) { return e.id; }).filter(function (e, t, n) { return n.indexOf(e) === t; }); };
                a.prototype.getPrimaryVideoSSRCs = function () { var e = this.mLine.type; if ("video" !== e)
                    throw new Error("getPrimaryVideoSSRCs doesn't work with " + e); var t = this.getSSRCs(); for (var _i = 0, _a = this.ssrcGroups; _i < _a.length; _i++) {
                    var e_38 = _a[_i];
                    if ("FID" === e_38.semantics || "FEC-FR" === e_38.semantics) {
                        var n_25 = s(e_38);
                        t.splice(t.indexOf(n_25), 1);
                    }
                } return t; };
                a.prototype.dumpSSRCGroups = function () { return JSON.stringify(this.mLine.ssrcGroups); };
                a.prototype.removeGroupsWithSSRC = function (e) { this.mLine.ssrcGroups && (this.mLine.ssrcGroups = this.mLine.ssrcGroups.filter(function (t) { return -1 === t.ssrcs.indexOf("" + e); })); };
                a.prototype.removeGroupsBySemantics = function (e) { this.mLine.ssrcGroups && (this.mLine.ssrcGroups = this.mLine.ssrcGroups.filter(function (t) { return t.semantics !== e; })); };
                a.prototype.replaceSSRC = function (e, t) { this.mLine.ssrcs && this.mLine.ssrcs.forEach(function (n) { n.id === e && (n.id = t); }); };
                a.prototype.addSSRCGroup = function (e) { this.ssrcGroups.push(e); };
                return a;
            }());
            var c = /** @class */ (function () {
                function c(e) {
                    this.parsedSDP = i.parse(e);
                }
                c.prototype.selectMedia = function (e) { var t = this.parsedSDP.media.find(function (t) { return t.type === e; }); return t ? new a(t) : null; };
                c.prototype.toRawSDP = function () { return i.write(this.parsedSDP); };
                return c;
            }());
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "LOCAL_STATS_UPDATED", (function () { return i; })), n.d(t, "REMOTE_STATS_UPDATED", (function () { return r; }));
            var i = "cq.local_stats_updated", r = "cq.remote_stats_updated";
        }, function (e, t, n) { (function (e, n) { var i = "[object Arguments]", r = "[object Map]", s = "[object Object]", o = "[object Set]", a = /^\[object .+?Constructor\]$/, c = /^(?:0|[1-9]\d*)$/, d = {}; d["[object Float32Array]"] = d["[object Float64Array]"] = d["[object Int8Array]"] = d["[object Int16Array]"] = d["[object Int32Array]"] = d["[object Uint8Array]"] = d["[object Uint8ClampedArray]"] = d["[object Uint16Array]"] = d["[object Uint32Array]"] = !0, d[i] = d["[object Array]"] = d["[object ArrayBuffer]"] = d["[object Boolean]"] = d["[object DataView]"] = d["[object Date]"] = d["[object Error]"] = d["[object Function]"] = d[r] = d["[object Number]"] = d[s] = d["[object RegExp]"] = d[o] = d["[object String]"] = d["[object WeakMap]"] = !1; var u = "object" == typeof e && e && e.Object === Object && e, l = "object" == typeof self && self && self.Object === Object && self, h = u || l || Function("return this")(), p = t && !t.nodeType && t, m = p && "object" == typeof n && n && !n.nodeType && n, f = m && m.exports === p, g = f && u.process, _ = function () { try {
            return g && g.binding && g.binding("util");
        }
        catch (e) { } }(), v = _ && _.isTypedArray; function S(e, t) { for (var n = -1, i = null == e ? 0 : e.length; ++n < i;)
            if (t(e[n], n, e))
                return !0; return !1; } function y(e) { var t = -1, n = Array(e.size); return e.forEach((function (e, i) { n[++t] = [i, e]; })), n; } function E(e) { var t = -1, n = Array(e.size); return e.forEach((function (e) { n[++t] = e; })), n; } var b, T, C, R = Array.prototype, A = Function.prototype, w = Object.prototype, I = h["__core-js_shared__"], P = A.toString, O = w.hasOwnProperty, D = (b = /[^.]+$/.exec(I && I.keys && I.keys.IE_PROTO || "")) ? "Symbol(src)_1." + b : "", N = w.toString, M = RegExp("^" + P.call(O).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), k = f ? h.Buffer : void 0, L = h.Symbol, x = h.Uint8Array, F = w.propertyIsEnumerable, j = R.splice, U = L ? L.toStringTag : void 0, H = Object.getOwnPropertySymbols, B = k ? k.isBuffer : void 0, J = (T = Object.keys, C = Object, function (e) { return T(C(e)); }), V = _e(h, "DataView"), G = _e(h, "Map"), $ = _e(h, "Promise"), K = _e(h, "Set"), q = _e(h, "WeakMap"), W = _e(Object, "create"), z = Ee(V), Q = Ee(G), X = Ee($), Y = Ee(K), Z = Ee(q), ee = L ? L.prototype : void 0, te = ee ? ee.valueOf : void 0; function ne(e) { var t = -1, n = null == e ? 0 : e.length; for (this.clear(); ++t < n;) {
            var i = e[t];
            this.set(i[0], i[1]);
        } } function ie(e) { var t = -1, n = null == e ? 0 : e.length; for (this.clear(); ++t < n;) {
            var i = e[t];
            this.set(i[0], i[1]);
        } } function re(e) { var t = -1, n = null == e ? 0 : e.length; for (this.clear(); ++t < n;) {
            var i = e[t];
            this.set(i[0], i[1]);
        } } function se(e) { var t = -1, n = null == e ? 0 : e.length; for (this.__data__ = new re; ++t < n;)
            this.add(e[t]); } function oe(e) { var t = this.__data__ = new ie(e); this.size = t.size; } function ae(e, t) { var n = Ce(e), i = !n && Te(e), r = !n && !i && Re(e), s = !n && !i && !r && Oe(e), o = n || i || r || s, a = o ? function (e, t) { for (var n = -1, i = Array(e); ++n < e;)
            i[n] = t(n); return i; }(e.length, String) : [], c = a.length; for (var d in e)
            !t && !O.call(e, d) || o && ("length" == d || r && ("offset" == d || "parent" == d) || s && ("buffer" == d || "byteLength" == d || "byteOffset" == d) || ye(d, c)) || a.push(d); return a; } function ce(e, t) { for (var n = e.length; n--;)
            if (be(e[n][0], t))
                return n; return -1; } function de(e) { return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : U && U in Object(e) ? function (e) { var t = O.call(e, U), n = e[U]; try {
            e[U] = void 0;
            var i = !0;
        }
        catch (e) { } var r = N.call(e); i && (t ? e[U] = n : delete e[U]); return r; }(e) : function (e) { return N.call(e); }(e); } function ue(e) { return Pe(e) && de(e) == i; } function le(e, t, n, a, c) { return e === t || (null == e || null == t || !Pe(e) && !Pe(t) ? e != e && t != t : function (e, t, n, a, c, d) { var u = Ce(e), l = Ce(t), h = u ? "[object Array]" : Se(e), p = l ? "[object Array]" : Se(t), m = (h = h == i ? s : h) == s, f = (p = p == i ? s : p) == s, g = h == p; if (g && Re(e)) {
            if (!Re(t))
                return !1;
            u = !0, m = !1;
        } if (g && !m)
            return d || (d = new oe), u || Oe(e) ? me(e, t, n, a, c, d) : function (e, t, n, i, s, a, c) { switch (n) {
                case "[object DataView]":
                    if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset)
                        return !1;
                    e = e.buffer, t = t.buffer;
                case "[object ArrayBuffer]": return !(e.byteLength != t.byteLength || !a(new x(e), new x(t)));
                case "[object Boolean]":
                case "[object Date]":
                case "[object Number]": return be(+e, +t);
                case "[object Error]": return e.name == t.name && e.message == t.message;
                case "[object RegExp]":
                case "[object String]": return e == t + "";
                case r: var d = y;
                case o:
                    var u = 1 & i;
                    if (d || (d = E), e.size != t.size && !u)
                        return !1;
                    var l = c.get(e);
                    if (l)
                        return l == t;
                    i |= 2, c.set(e, t);
                    var h = me(d(e), d(t), i, s, a, c);
                    return c.delete(e), h;
                case "[object Symbol]": if (te)
                    return te.call(e) == te.call(t);
            } return !1; }(e, t, h, n, a, c, d); if (!(1 & n)) {
            var _ = m && O.call(e, "__wrapped__"), v = f && O.call(t, "__wrapped__");
            if (_ || v) {
                var S = _ ? e.value() : e, b = v ? t.value() : t;
                return d || (d = new oe), c(S, b, n, a, d);
            }
        } if (!g)
            return !1; return d || (d = new oe), function (e, t, n, i, r, s) { var o = 1 & n, a = fe(e), c = a.length, d = fe(t).length; if (c != d && !o)
            return !1; var u = c; for (; u--;) {
            var l = a[u];
            if (!(o ? l in t : O.call(t, l)))
                return !1;
        } var h = s.get(e); if (h && s.get(t))
            return h == t; var p = !0; s.set(e, t), s.set(t, e); var m = o; for (; ++u < c;) {
            l = a[u];
            var f = e[l], g = t[l];
            if (i)
                var _ = o ? i(g, f, l, t, e, s) : i(f, g, l, e, t, s);
            if (!(void 0 === _ ? f === g || r(f, g, n, i, s) : _)) {
                p = !1;
                break;
            }
            m || (m = "constructor" == l);
        } if (p && !m) {
            var v = e.constructor, S = t.constructor;
            v == S || !("constructor" in e) || !("constructor" in t) || "function" == typeof v && v instanceof v && "function" == typeof S && S instanceof S || (p = !1);
        } return s.delete(e), s.delete(t), p; }(e, t, n, a, c, d); }(e, t, n, a, le, c)); } function he(e) { return !(!Ie(e) || function (e) { return !!D && D in e; }(e)) && (Ae(e) ? M : a).test(Ee(e)); } function pe(e) { if (n = (t = e) && t.constructor, i = "function" == typeof n && n.prototype || w, t !== i)
            return J(e); var t, n, i, r = []; for (var s in Object(e))
            O.call(e, s) && "constructor" != s && r.push(s); return r; } function me(e, t, n, i, r, s) { var o = 1 & n, a = e.length, c = t.length; if (a != c && !(o && c > a))
            return !1; var d = s.get(e); if (d && s.get(t))
            return d == t; var u = -1, l = !0, h = 2 & n ? new se : void 0; for (s.set(e, t), s.set(t, e); ++u < a;) {
            var p = e[u], m = t[u];
            if (i)
                var f = o ? i(m, p, u, t, e, s) : i(p, m, u, e, t, s);
            if (void 0 !== f) {
                if (f)
                    continue;
                l = !1;
                break;
            }
            if (h) {
                if (!S(t, (function (e, t) { if (o = t, !h.has(o) && (p === e || r(p, e, n, i, s)))
                    return h.push(t); var o; }))) {
                    l = !1;
                    break;
                }
            }
            else if (p !== m && !r(p, m, n, i, s)) {
                l = !1;
                break;
            }
        } return s.delete(e), s.delete(t), l; } function fe(e) { return function (e, t, n) { var i = t(e); return Ce(e) ? i : function (e, t) { for (var n = -1, i = t.length, r = e.length; ++n < i;)
            e[r + n] = t[n]; return e; }(i, n(e)); }(e, De, ve); } function ge(e, t) { var n, i, r = e.__data__; return ("string" == (i = typeof (n = t)) || "number" == i || "symbol" == i || "boolean" == i ? "__proto__" !== n : null === n) ? r["string" == typeof t ? "string" : "hash"] : r.map; } function _e(e, t) { var n = function (e, t) { return null == e ? void 0 : e[t]; }(e, t); return he(n) ? n : void 0; } ne.prototype.clear = function () { this.__data__ = W ? W(null) : {}, this.size = 0; }, ne.prototype.delete = function (e) { var t = this.has(e) && delete this.__data__[e]; return this.size -= t ? 1 : 0, t; }, ne.prototype.get = function (e) { var t = this.__data__; if (W) {
            var n = t[e];
            return "__lodash_hash_undefined__" === n ? void 0 : n;
        } return O.call(t, e) ? t[e] : void 0; }, ne.prototype.has = function (e) { var t = this.__data__; return W ? void 0 !== t[e] : O.call(t, e); }, ne.prototype.set = function (e, t) { var n = this.__data__; return this.size += this.has(e) ? 0 : 1, n[e] = W && void 0 === t ? "__lodash_hash_undefined__" : t, this; }, ie.prototype.clear = function () { this.__data__ = [], this.size = 0; }, ie.prototype.delete = function (e) { var t = this.__data__, n = ce(t, e); return !(n < 0) && (n == t.length - 1 ? t.pop() : j.call(t, n, 1), --this.size, !0); }, ie.prototype.get = function (e) { var t = this.__data__, n = ce(t, e); return n < 0 ? void 0 : t[n][1]; }, ie.prototype.has = function (e) { return ce(this.__data__, e) > -1; }, ie.prototype.set = function (e, t) { var n = this.__data__, i = ce(n, e); return i < 0 ? (++this.size, n.push([e, t])) : n[i][1] = t, this; }, re.prototype.clear = function () { this.size = 0, this.__data__ = { hash: new ne, map: new (G || ie), string: new ne }; }, re.prototype.delete = function (e) { var t = ge(this, e).delete(e); return this.size -= t ? 1 : 0, t; }, re.prototype.get = function (e) { return ge(this, e).get(e); }, re.prototype.has = function (e) { return ge(this, e).has(e); }, re.prototype.set = function (e, t) { var n = ge(this, e), i = n.size; return n.set(e, t), this.size += n.size == i ? 0 : 1, this; }, se.prototype.add = se.prototype.push = function (e) { return this.__data__.set(e, "__lodash_hash_undefined__"), this; }, se.prototype.has = function (e) { return this.__data__.has(e); }, oe.prototype.clear = function () { this.__data__ = new ie, this.size = 0; }, oe.prototype.delete = function (e) { var t = this.__data__, n = t.delete(e); return this.size = t.size, n; }, oe.prototype.get = function (e) { return this.__data__.get(e); }, oe.prototype.has = function (e) { return this.__data__.has(e); }, oe.prototype.set = function (e, t) { var n = this.__data__; if (n instanceof ie) {
            var i = n.__data__;
            if (!G || i.length < 199)
                return i.push([e, t]), this.size = ++n.size, this;
            n = this.__data__ = new re(i);
        } return n.set(e, t), this.size = n.size, this; }; var ve = H ? function (e) { return null == e ? [] : (e = Object(e), function (e, t) { for (var n = -1, i = null == e ? 0 : e.length, r = 0, s = []; ++n < i;) {
            var o = e[n];
            t(o, n, e) && (s[r++] = o);
        } return s; }(H(e), (function (t) { return F.call(e, t); }))); } : function () { return []; }, Se = de; function ye(e, t) { return !!(t = null == t ? 9007199254740991 : t) && ("number" == typeof e || c.test(e)) && e > -1 && e % 1 == 0 && e < t; } function Ee(e) { if (null != e) {
            try {
                return P.call(e);
            }
            catch (e) { }
            try {
                return e + "";
            }
            catch (e) { }
        } return ""; } function be(e, t) { return e === t || e != e && t != t; } (V && "[object DataView]" != Se(new V(new ArrayBuffer(1))) || G && Se(new G) != r || $ && "[object Promise]" != Se($.resolve()) || K && Se(new K) != o || q && "[object WeakMap]" != Se(new q)) && (Se = function (e) { var t = de(e), n = t == s ? e.constructor : void 0, i = n ? Ee(n) : ""; if (i)
            switch (i) {
                case z: return "[object DataView]";
                case Q: return r;
                case X: return "[object Promise]";
                case Y: return o;
                case Z: return "[object WeakMap]";
            } return t; }); var Te = ue(function () { return arguments; }()) ? ue : function (e) { return Pe(e) && O.call(e, "callee") && !F.call(e, "callee"); }, Ce = Array.isArray; var Re = B || function () { return !1; }; function Ae(e) { if (!Ie(e))
            return !1; var t = de(e); return "[object Function]" == t || "[object GeneratorFunction]" == t || "[object AsyncFunction]" == t || "[object Proxy]" == t; } function we(e) { return "number" == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991; } function Ie(e) { var t = typeof e; return null != e && ("object" == t || "function" == t); } function Pe(e) { return null != e && "object" == typeof e; } var Oe = v ? function (e) { return function (t) { return e(t); }; }(v) : function (e) { return Pe(e) && we(e.length) && !!d[de(e)]; }; function De(e) { return null != (t = e) && we(t.length) && !Ae(t) ? ae(e) : pe(e); var t; } n.exports = function (e, t) { return le(e, t); }; }).call(this, n(46), n(80)(e)); }, function (e, t, n) {
            "use strict";
            n.d(t, "c", (function () { return i; })), n.d(t, "a", (function () { return r; })), n.d(t, "b", (function () { return s; }));
            var i = "pending", r = "active", s = "ended";
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; }));
            var i = { ACCEPT: "session-accept", CONNECTION_ERROR: "connection-error-encountered", INITIATE: "session-initiate", TERMINATE: "session-terminate", TRANSPORT_INFO: "transport-info", UNAVAILABLE: "unavailable" };
        }, function (e, t) { e.exports = { 1080: { width: 1920, height: 1080, order: 8 }, fullhd: { width: 1920, height: 1080, order: 8 }, 720: { width: 1280, height: 720, order: 7 }, hd: { width: 1280, height: 720, order: 7 }, 960: { width: 960, height: 720, order: 6 }, 540: { width: 960, height: 540, order: 5 }, qhd: { width: 960, height: 540, order: 5 }, 360: { width: 640, height: 360, order: 4 }, 640: { width: 640, height: 480, order: 3 }, vga: { width: 640, height: 480, order: 3 }, 180: { width: 320, height: 180, order: 2 }, 320: { width: 320, height: 240, order: 1 } }; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return P; })); var i = n(3), r = n(11), s = n.n(r); var o = n(4).getLogger(e), a = "createOffer", c = "createAnswer", d = "setLocalDescription", u = "setRemoteDescription", l = "addIceCandidate", h = "getUserMedia", p = "iceConnectionFailure", m = "applicationLog", f = "fabricHold", g = "fabricResume", _ = "audioMute", v = "audioUnmute", S = "videoPause", y = "videoResume", E = "screenShareStart", b = "screenShareStop", T = "dominantSpeaker", C = "activeDeviceList", R = "error", A = "event", w = "mstWithUserID"; var I;
                var P = /** @class */ (function () {
                    function P(e, t) {
                        this.confID = t.confID, this.tpc = e, this.peerconnection = e.peerconnection, this.remoteUserID = t.remoteUserID || "jitsi", this.hasFabric = !1, P.fabrics.add(this), P.backendInitialized && (this._addNewFabric(), 1 === P.fabrics.size && P._emptyReportQueue(this));
                    }
                    P._addNewFabricCallback = function (e, t) { P.backend && "success" !== e && o.error("Monitoring status: " + e + " msg: " + t); };
                    P._initCallback = function (e, t) { if (o.log("CallStats Status: err=" + e + " msg=" + t), "success" !== e)
                        return; P.backendInitialized = !0; var n = !1, i = null; for (var _i = 0, _a = P.fabrics.values(); _i < _a.length; _i++) {
                        var e_39 = _a[_i];
                        e_39.hasFabric || (o.debug("addNewFabric - initCallback"), e_39._addNewFabric() && (n = !0, i || (i = e_39)));
                    } n && P._emptyReportQueue(i); };
                    P._emptyReportQueue = function (e) { var t = e.confID, n = e.peerconnection; for (var _i = 0, _a = P.reportsQueue; _i < _a.length; _i++) {
                        var i_13 = _a[_i];
                        if (i_13.type === R) {
                            var t_34 = i_13.data;
                            P._reportError(e, t_34.type, t_34.error, t_34.pc || n);
                        }
                        else if (i_13.type === A) {
                            var e_40 = i_13.data;
                            P.backend.sendFabricEvent(i_13.pc || n, e_40.event, t, e_40.eventData);
                        }
                        else if (i_13.type === w) {
                            var e_41 = i_13.data;
                            P.backend.associateMstWithUserID(i_13.pc || n, e_41.callStatsId, t, e_41.ssrc, e_41.usageLabel, e_41.containerId);
                        }
                    } P.reportsQueue.length = 0; };
                    P._reportError = function (e, t, n, i) { var r = n; r || (o.warn("No error is passed!"), r = new Error("Unknown error")), P.backendInitialized && e ? P.backend.reportError(i, e.confID, t, r) : P.reportsQueue.push({ type: R, data: { error: r, pc: i, type: t } }); };
                    P._reportEvent = function (e, t, n) { var i = e && e.peerconnection, r = e && e.confID; P.backendInitialized && e ? P.backend.sendFabricEvent(i, t, r, n) : P.reportsQueue.push({ confID: r, pc: i, type: A, data: { event: t, eventData: n } }); };
                    P._traceAndCatchBackendCalls = function (e) { var t = ["associateMstWithUserID", "sendFabricEvent", "sendUserFeedback"]; var _loop_2 = function (n_27) {
                        var t_36 = e[n_27];
                        e[n_27] = function () {
                            var n = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                n[_i] = arguments[_i];
                            }
                            try {
                                return t_36.apply(e, n);
                            }
                            catch (e) {
                                s.a.callErrorHandler(e);
                            }
                        };
                    }; for (var _i = 0, t_35 = t; _i < t_35.length; _i++) {
                        var n_27 = t_35[_i];
                        _loop_2(n_27);
                    } var n = ["associateMstWithUserID", "sendFabricEvent", "sendUserFeedback"]; var _loop_3 = function (t_37) {
                        var n_28 = e[t_37];
                        e[t_37] = function () {
                            var i = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                i[_i] = arguments[_i];
                            }
                            o.debug(t_37, i), n_28.apply(e, i);
                        };
                    }; for (var _a = 0, n_26 = n; _a < n_26.length; _a++) {
                        var t_37 = n_26[_a];
                        _loop_3(t_37);
                    } var r = e.reportError; e.reportError = function (t, n, a) {
                        var c = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            c[_i - 3] = arguments[_i];
                        }
                        a === m ? i.a.isReactNative() || console && console.debug("reportError", t, n, a) : o.debug.apply(o, __spreadArray(["reportError", t, n, a], c));
                        try {
                            r.call.apply(r, __spreadArray([e, t, n, a], c));
                        }
                        catch (e) {
                            a === m ? console && console.error("reportError", e) : s.a.callErrorHandler(e);
                        }
                    }; };
                    Object.defineProperty(P, "fabrics", {
                        get: function () { return I || (I = new Set), I; },
                        enumerable: false,
                        configurable: true
                    });
                    P.initBackend = function (e) { if (P.backend)
                        throw new Error("CallStats backend has been initialized already!"); try {
                        var t_38 = callstats;
                        var n_29;
                        if (P.backend = new t_38, P._traceAndCatchBackendCalls(P.backend), P.userID = { aliasName: e.aliasName, userName: e.userName }, P.callStatsID = e.callStatsID, P.callStatsSecret = e.callStatsSecret, e.applicationName && (n_29 = { applicationVersion: e.applicationName + " (" + i.a.getName() + ")" }), e.confID) {
                            var t_39 = e.confID.match(/.*\/(.*)\/.*/);
                            n_29.siteID = e.siteID || t_39 && t_39[1] || "/";
                        }
                        P.backend.initialize(P.callStatsID, P.callStatsSecret, P.userID, P._initCallback, void 0, n_29);
                        var r_5 = e.getWiFiStatsMethod;
                        return r_5 && (P.backend.attachWifiStatsHandler(r_5), r_5().then(function (e) { e && o.info("Reported wifi addresses:", JSON.parse(e).addresses); }).catch(function () { })), !0;
                    }
                    catch (e) {
                        return s.a.callErrorHandler(e), P.backend = null, o.error(e), !1;
                    } };
                    P.isBackendInitialized = function () { return Boolean(P.backend); };
                    P.sendActiveDeviceListEvent = function (e, t) { P._reportEvent(t, C, e); };
                    P.sendApplicationLog = function (e, t) { try {
                        P._reportError(t, m, e, t && t.peerconnection);
                    }
                    catch (e) {
                        console && "function" == typeof console.error && console.error("sendApplicationLog failed", e);
                    } };
                    P.sendFeedback = function (e, t, n) { return new Promise(function (i, r) { if (P.backend)
                        P.backend.sendUserFeedback(e, { userID: P.userID, overall: t, comment: n }, function (e, t) { "success" === e ? i(t) : r(t); });
                    else {
                        var e_42 = "Failed to submit feedback to CallStats - no backend";
                        o.error(e_42), r(e_42);
                    } }); };
                    P.sendGetUserMediaFailed = function (e, t) { P._reportError(t, h, e, null); };
                    P.sendMuteEvent = function (e, t, n) { var i; i = "video" === t ? e ? S : y : e ? _ : v, P._reportEvent(n, i); };
                    P.prototype._addNewFabric = function () { o.info("addNewFabric", this.remoteUserID); try {
                        var e_43 = { remoteEndpointType: this.tpc.isP2P ? P.backend.endpointType.peer : P.backend.endpointType.server }, t_40 = P.backend.addNewFabric(this.peerconnection, this.remoteUserID, P.backend.fabricUsage.multiplex, this.confID, e_43, P._addNewFabricCallback);
                        this.hasFabric = !0;
                        var n_30 = "success" === t_40.status;
                        return n_30 || o.error("callstats fabric not initilized", t_40.message), n_30;
                    }
                    catch (e) {
                        return s.a.callErrorHandler(e), !1;
                    } };
                    P.prototype.associateStreamWithVideoTag = function (e, t, n, i, r) { if (!P.backend)
                        return; var s = t ? P.userID : n; P.backendInitialized ? P.backend.associateMstWithUserID(this.peerconnection, s, this.confID, e, i, r) : P.reportsQueue.push({ type: w, pc: this.peerconnection, data: { callStatsId: s, containerId: r, ssrc: e, usageLabel: i } }); };
                    P.prototype.sendDominantSpeakerEvent = function () { P._reportEvent(this, T); };
                    P.prototype.sendTerminateEvent = function () { P.backendInitialized && P.backend.sendFabricEvent(this.peerconnection, P.backend.fabricEvent.fabricTerminated, this.confID), P.fabrics.delete(this); };
                    P.prototype.sendIceConnectionFailedEvent = function () { P._reportError(this, p, null, this.peerconnection); };
                    P.prototype.sendCreateOfferFailed = function (e) { P._reportError(this, a, e, this.peerconnection); };
                    P.prototype.sendCreateAnswerFailed = function (e) { P._reportError(this, c, e, this.peerconnection); };
                    P.prototype.sendResumeOrHoldEvent = function (e) { P._reportEvent(this, e ? g : f); };
                    P.prototype.sendScreenSharingEvent = function (e, t) { var n; t && (n = { ssrc: t }), P._reportEvent(this, e ? E : b, n); };
                    P.prototype.sendSetLocalDescFailed = function (e) { P._reportError(this, d, e, this.peerconnection); };
                    P.prototype.sendSetRemoteDescFailed = function (e) { P._reportError(this, u, e, this.peerconnection); };
                    P.prototype.sendAddIceCandidateFailed = function (e) { P._reportError(this, l, e, this.peerconnection); };
                    return P;
                }());  P.backend = null, P.reportsQueue = [], P.backendInitialized = !1, P.callStatsID = null, P.callStatsSecret = null, P.userID = null; }).call(this, "modules/statistics/CallStats.js");
        }, function (e, t) { function n(e, t) { return Math.floor(Math.random() * (t - e + 1)) + e; } function i(e) { return e[n(0, e.length - 1)]; } var r = { randomHexDigit: function () { return i("0123456789abcdef"); }, randomHexString: function (e) { var t = ""; for (; e--;)
                t += this.randomHexDigit(); return t; }, randomElement: i, randomAlphanumStr: function (e) { var t = ""; for (var n_31 = 0; n_31 < e; n_31 += 1)
                t += i("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"); return t; }, randomInt: n }; e.exports = r; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return s; }));
            var i = n(20);
            function r(e) {
                if (e === void 0) { e = /** @class */ (function () {
                    function class_1() {
                    }
                    return class_1;
                }()); }
                return /** @class */ (function (_super) {
                    __extends(class_2, _super);
                    function class_2() {
                        var e = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            e[_i] = arguments[_i];
                        }
                        var _this = this;
                        _this = _super.apply(this, e) || this, _this.connection = null;
                        return _this;
                    }
                    class_2.prototype.init = function (e) { this.connection = e; };
                    return class_2;
                }(e));
            }
            t.b = r();
            var s = r(i.a);
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "CONNECTION_DROPPED_ERROR", (function () { return i; })), n.d(t, "OTHER_ERROR", (function () { return r; })), n.d(t, "PASSWORD_REQUIRED", (function () { return s; })), n.d(t, "SERVER_ERROR", (function () { return o; }));
            var i = "connection.droppedError", r = "connection.otherError", s = "connection.passwordRequired", o = "connection.serverError";
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return u; })); var i = n(4), r = n(2), s = (n(156), n(20)), o = n(96), a = n(98), c = n(99); var d = Object(i.getLogger)(e);
                var u = /** @class */ (function (_super) {
                    __extends(u, _super);
                    function u(_a) {
                        var e = _a.enableWebsocketResume, t = _a.websocketKeepAlive, n = _a.websocketKeepAliveUrl, i = _a.serviceUrl, s = _a.shard, d = _a.xmppPing;
                        var _this = this;
                        _this = _super.call(this) || this, _this._options = { enableWebsocketResume: void 0 === e || e, pingOptions: d, shard: s, websocketKeepAlive: void 0 === t ? 6e4 : Number(t), websocketKeepAliveUrl: n }, _this._stropheConn = new r.Strophe.Connection(i), _this._usesWebsocket = i.startsWith("ws:") || i.startsWith("wss:"), _this._stropheConn.maxRetries = 3, _this._rawInputTracker = new a.a, _this._rawInputTracker.startTracking(_this, _this._stropheConn), _this._resumeTask = new o.a(_this._stropheConn), _this._deferredIQs = [], _this.addConnectionPlugin("ping", new c.a({ getTimeSinceLastServerResponse: function () { return _this.getTimeSinceLastSuccess(); }, onPingThresholdExceeded: function () { return _this._onPingErrorThresholdExceeded(); }, pingOptions: d })), _this._oneSuccessfulConnect = !1;
                        return _this;
                    }
                    Object.defineProperty(u, "Events", {
                        get: function () { return { CONN_STATUS_CHANGED: "CONN_STATUS_CHANGED", CONN_SHARD_CHANGED: "CONN_SHARD_CHANGED" }; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u, "Status", {
                        get: function () { return r.Strophe.Status; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "connected", {
                        get: function () { var e = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket; return (this._status === r.Strophe.Status.CONNECTED || this._status === r.Strophe.Status.ATTACHED) && (!this.isUsingWebSocket || e && e.readyState === WebSocket.OPEN); },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "disco", {
                        get: function () { return this._stropheConn.disco; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "disconnecting", {
                        get: function () { return !0 === this._stropheConn.disconnecting; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "domain", {
                        get: function () { return this._stropheConn.domain; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "isUsingWebSocket", {
                        get: function () { return this._usesWebsocket; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "jid", {
                        get: function () { return this._stropheConn.jid; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "lastResponseHeaders", {
                        get: function () { return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "logger", {
                        get: function () { return this._stropheConn.logger; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "options", {
                        get: function () { return this._stropheConn.options; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "pingDomain", {
                        get: function () { var e; return (null === (e = this._options.pingOptions) || void 0 === e ? void 0 : e.domain) || this.domain; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "service", {
                        get: function () { return this._stropheConn.service; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(u.prototype, "status", {
                        get: function () { return this._status; },
                        enumerable: false,
                        configurable: true
                    });
                    u.prototype.addConnectionPlugin = function (e, t) { this[e] = t, t.init(this); };
                    u.prototype.addHandler = function () {
                        var _a;
                        var e = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            e[_i] = arguments[_i];
                        }
                        (_a = this._stropheConn).addHandler.apply(_a, e);
                    };
                    u.prototype.attach = function (e, t, n, i) {
                        var _a;
                        var r = [];
                        for (var _i = 4; _i < arguments.length; _i++) {
                            r[_i - 4] = arguments[_i];
                        }
                        (_a = this._stropheConn).attach.apply(_a, __spreadArray([e, t, n, this._stropheConnectionCb.bind(this, i)], r));
                    };
                    u.prototype.connect = function (e, t, n) {
                        var _a;
                        var i = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            i[_i - 3] = arguments[_i];
                        }
                        (_a = this._stropheConn).connect.apply(_a, __spreadArray([e, t, this._stropheConnectionCb.bind(this, n)], i));
                    };
                    u.prototype._stropheConnectionCb = function (e, t) {
                        var n = [];
                        for (var _i = 2; _i < arguments.length; _i++) {
                            n[_i - 2] = arguments[_i];
                        }
                        this._status = t;
                        var i = !1;
                        var s;
                        t === r.Strophe.Status.CONNECTED || t === r.Strophe.Status.ATTACHED ? (this._maybeEnableStreamResume(), this._usesWebsocket && this._oneSuccessfulConnect && this._keepAliveAndCheckShard(), this._oneSuccessfulConnect = !0, this._maybeStartWSKeepAlive(), this._processDeferredIQs(), this._resumeTask.cancel(), this.ping.startInterval((null === (s = this._options.pingOptions) || void 0 === s ? void 0 : s.domain) || this.domain)) : t === r.Strophe.Status.DISCONNECTED && (this.ping.stopInterval(), i = this._tryResumingConnection(), i || clearTimeout(this._wsKeepAlive));
                        i || (e.apply(void 0, __spreadArray([t], n)), this.eventEmitter.emit(u.Events.CONN_STATUS_CHANGED, t));
                    };
                    u.prototype._clearDeferredIQs = function () { for (var _i = 0, _a = this._deferredIQs; _i < _a.length; _i++) {
                        var e_44 = _a[_i];
                        e_44.reject(new Error("disconnect"));
                    } this._deferredIQs = []; };
                    u.prototype.closeWebsocket = function () { this._stropheConn && this._stropheConn._proto && (this._stropheConn._proto._closeSocket(), this._stropheConn._proto._onClose(null)); };
                    u.prototype.disconnect = function () {
                        var _a;
                        var e = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            e[_i] = arguments[_i];
                        }
                        this._resumeTask.cancel(), clearTimeout(this._wsKeepAlive), this._clearDeferredIQs(), (_a = this._stropheConn).disconnect.apply(_a, e);
                    };
                    u.prototype.flush = function () {
                        var _a;
                        var e = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            e[_i] = arguments[_i];
                        }
                        (_a = this._stropheConn).flush.apply(_a, e);
                    };
                    u.prototype.getTimeSinceLastSuccess = function () { return this._rawInputTracker.getTimeSinceLastSuccess(); };
                    u.prototype.getLastFailedMessage = function () { return this._rawInputTracker.getLastFailedMessage(); };
                    u.prototype._maybeEnableStreamResume = function () { if (!this._options.enableWebsocketResume)
                        return; var e = this._stropheConn.streamManagement; this.isUsingWebSocket ? e ? e.isSupported() ? e.getResumeToken() || (d.info("Enabling XEP-0198 stream management"), e.enable(!0)) : d.warn("Stream resume enabled, but XEP-0198 is not supported by the server") : d.warn("Stream resume enabled, but Strophe streamManagement plugin is not installed") : d.warn("Stream resume enabled, but WebSockets are not enabled"); };
                    u.prototype._maybeStartWSKeepAlive = function () {
                        var _this = this;
                        var e = this._options.websocketKeepAlive;
                        if (this._usesWebsocket && e > 0) {
                            this._wsKeepAlive || d.info("WebSocket keep alive interval: " + e + "ms"), clearTimeout(this._wsKeepAlive);
                            var t_41 = e + 60 * Math.random() * 1e3;
                            d.debug("Scheduling next WebSocket keep-alive in " + t_41 + "ms"), this._wsKeepAlive = setTimeout(function () { return _this._keepAliveAndCheckShard().then(function () { return _this._maybeStartWSKeepAlive(); }); }, t_41);
                        }
                    };
                    u.prototype._keepAliveAndCheckShard = function () {
                        var _this = this;
                        var _a = this._options, e = _a.shard, t = _a.websocketKeepAliveUrl, n = t || this.service.replace("wss://", "https://").replace("ws://", "http://");
                        return fetch(n).then(function (t) { if (!e)
                            return; var n = t.headers.get("x-jitsi-shard"); n !== e && (d.error("Detected that shard changed from " + e + " to " + n), _this.eventEmitter.emit(u.Events.CONN_SHARD_CHANGED)); }).catch(function (e) { d.error("Websocket Keep alive failed for url: " + n, { error: e }); });
                    };
                    u.prototype._processDeferredIQs = function () { var _loop_4 = function (e_45) {
                        if (e_45.iq) {
                            clearTimeout(e_45.timeout);
                            var t_42 = Date.now() - e_45.start;
                            this_2.sendIQ(e_45.iq, function (t) { return e_45.resolve(t); }, function (t) { return e_45.reject(t); }, t_42);
                        }
                    }; var this_2 = this; for (var _i = 0, _a = this._deferredIQs; _i < _a.length; _i++) {
                        var e_45 = _a[_i];
                        _loop_4(e_45);
                    } this._deferredIQs = []; };
                    u.prototype.send = function (e) { if (!this.connected)
                        throw new Error("Not connected"); this._stropheConn.send(e); };
                    u.prototype.sendIQ = function (e, t, n, i) { if (this.connected)
                        return this._stropheConn.sendIQ(e, t, n, i); n("Not connected"); };
                    u.prototype.sendIQ2 = function (e, _a) {
                        var _this = this;
                        var t = _a.timeout;
                        return new Promise(function (n, i) { if (_this.connected)
                            _this.sendIQ(e, function (e) { return n(e); }, function (e) { return i(e); }, t);
                        else {
                            var r_6 = { iq: e, resolve: n, reject: i, start: Date.now(), timeout: setTimeout(function () { r_6.iq = void 0, i(void 0); }, t) };
                            _this._deferredIQs.push(r_6);
                        } });
                    };
                    u.prototype._onPingErrorThresholdExceeded = function () { this.isUsingWebSocket && (d.warn("Ping error threshold exceeded - killing the WebSocket"), this.closeWebsocket()); };
                    u.prototype.sendPresence = function (e, t, n, i) { this.connected ? this._stropheConn.sendPresence(e, t, n, i) : n("Not connected"); };
                    u.prototype.sendUnavailableBeacon = function () { if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected)
                        return !1; this._stropheConn._changeConnectStatus(r.Strophe.Status.DISCONNECTING), this._stropheConn.disconnecting = !0; var e = this._stropheConn._proto._buildBody().attrs({ type: "terminate" }), t = Object(r.$pres)({ xmlns: r.Strophe.NS.CLIENT, type: "unavailable" }); e.cnode(t.tree()); var n = navigator.sendBeacon(-1 === this.service.indexOf("https://") ? "https:" + this.service : this.service, r.Strophe.serialize(e.tree())); return d.info("Successfully send unavailable beacon " + n), this._stropheConn._proto._abortAllRequests(), this._stropheConn._doDisconnect(), !0; };
                    u.prototype._tryResumingConnection = function () { var e = this._stropheConn.streamManagement; return !(!e || !e.getResumeToken()) && (this._resumeTask.schedule(), !0); };
                    return u;
                }(s.a));  }).call(this, "modules/xmpp/XmppConnection.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; })), n.d(t, "b", (function () { return r; }));
            var i = "signaling.peerMuted", r = "signaling.peerVideoType";
        }, function (e, t, n) { (function (e, n) { var i = "[object Arguments]", r = "[object Function]", s = "[object GeneratorFunction]", o = "[object Map]", a = "[object Set]", c = /\w*$/, d = /^\[object .+?Constructor\]$/, u = /^(?:0|[1-9]\d*)$/, l = {}; l[i] = l["[object Array]"] = l["[object ArrayBuffer]"] = l["[object DataView]"] = l["[object Boolean]"] = l["[object Date]"] = l["[object Float32Array]"] = l["[object Float64Array]"] = l["[object Int8Array]"] = l["[object Int16Array]"] = l["[object Int32Array]"] = l[o] = l["[object Number]"] = l["[object Object]"] = l["[object RegExp]"] = l[a] = l["[object String]"] = l["[object Symbol]"] = l["[object Uint8Array]"] = l["[object Uint8ClampedArray]"] = l["[object Uint16Array]"] = l["[object Uint32Array]"] = !0, l["[object Error]"] = l[r] = l["[object WeakMap]"] = !1; var h = "object" == typeof e && e && e.Object === Object && e, p = "object" == typeof self && self && self.Object === Object && self, m = h || p || Function("return this")(), f = t && !t.nodeType && t, g = f && "object" == typeof n && n && !n.nodeType && n, _ = g && g.exports === f; function v(e, t) { return e.set(t[0], t[1]), e; } function S(e, t) { return e.add(t), e; } function y(e, t, n, i) { var r = -1, s = e ? e.length : 0; for (i && s && (n = e[++r]); ++r < s;)
            n = t(n, e[r], r, e); return n; } function E(e) { var t = !1; if (null != e && "function" != typeof e.toString)
            try {
                t = !!(e + "");
            }
            catch (e) { } return t; } function b(e) { var t = -1, n = Array(e.size); return e.forEach((function (e, i) { n[++t] = [i, e]; })), n; } function T(e, t) { return function (n) { return e(t(n)); }; } function C(e) { var t = -1, n = Array(e.size); return e.forEach((function (e) { n[++t] = e; })), n; } var R, A = Array.prototype, w = Function.prototype, I = Object.prototype, P = m["__core-js_shared__"], O = (R = /[^.]+$/.exec(P && P.keys && P.keys.IE_PROTO || "")) ? "Symbol(src)_1." + R : "", D = w.toString, N = I.hasOwnProperty, M = I.toString, k = RegExp("^" + D.call(N).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), L = _ ? m.Buffer : void 0, x = m.Symbol, F = m.Uint8Array, j = T(Object.getPrototypeOf, Object), U = Object.create, H = I.propertyIsEnumerable, B = A.splice, J = Object.getOwnPropertySymbols, V = L ? L.isBuffer : void 0, G = T(Object.keys, Object), $ = ge(m, "DataView"), K = ge(m, "Map"), q = ge(m, "Promise"), W = ge(m, "Set"), z = ge(m, "WeakMap"), Q = ge(Object, "create"), X = Ee($), Y = Ee(K), Z = Ee(q), ee = Ee(W), te = Ee(z), ne = x ? x.prototype : void 0, ie = ne ? ne.valueOf : void 0; function re(e) { var t = -1, n = e ? e.length : 0; for (this.clear(); ++t < n;) {
            var i = e[t];
            this.set(i[0], i[1]);
        } } function se(e) { var t = -1, n = e ? e.length : 0; for (this.clear(); ++t < n;) {
            var i = e[t];
            this.set(i[0], i[1]);
        } } function oe(e) { var t = -1, n = e ? e.length : 0; for (this.clear(); ++t < n;) {
            var i = e[t];
            this.set(i[0], i[1]);
        } } function ae(e) { this.__data__ = new se(e); } function ce(e, t) { var n = Te(e) || function (e) { return function (e) { return function (e) { return !!e && "object" == typeof e; }(e) && Ce(e); }(e) && N.call(e, "callee") && (!H.call(e, "callee") || M.call(e) == i); }(e) ? function (e, t) { for (var n = -1, i = Array(e); ++n < e;)
            i[n] = t(n); return i; }(e.length, String) : [], r = n.length, s = !!r; for (var o in e)
            !t && !N.call(e, o) || s && ("length" == o || Se(o, r)) || n.push(o); return n; } function de(e, t, n) { var i = e[t]; N.call(e, t) && be(i, n) && (void 0 !== n || t in e) || (e[t] = n); } function ue(e, t) { for (var n = e.length; n--;)
            if (be(e[n][0], t))
                return n; return -1; } function le(e, t, n, d, u, h, p) { var m; if (d && (m = h ? d(e, u, h, p) : d(e)), void 0 !== m)
            return m; if (!we(e))
            return e; var f = Te(e); if (f) {
            if (m = function (e) { var t = e.length, n = e.constructor(t); t && "string" == typeof e[0] && N.call(e, "index") && (n.index = e.index, n.input = e.input); return n; }(e), !t)
                return function (e, t) { var n = -1, i = e.length; t || (t = Array(i)); for (; ++n < i;)
                    t[n] = e[n]; return t; }(e, m);
        }
        else {
            var g = ve(e), _ = g == r || g == s;
            if (Re(e))
                return function (e, t) { if (t)
                    return e.slice(); var n = new e.constructor(e.length); return e.copy(n), n; }(e, t);
            if ("[object Object]" == g || g == i || _ && !h) {
                if (E(e))
                    return h ? e : {};
                if (m = function (e) { return "function" != typeof e.constructor || ye(e) ? {} : (t = j(e), we(t) ? U(t) : {}); var t; }(_ ? {} : e), !t)
                    return function (e, t) { return me(e, _e(e), t); }(e, function (e, t) { return e && me(t, Ie(t), e); }(m, e));
            }
            else {
                if (!l[g])
                    return h ? e : {};
                m = function (e, t, n, i) { var r = e.constructor; switch (t) {
                    case "[object ArrayBuffer]": return pe(e);
                    case "[object Boolean]":
                    case "[object Date]": return new r(+e);
                    case "[object DataView]": return function (e, t) { var n = t ? pe(e.buffer) : e.buffer; return new e.constructor(n, e.byteOffset, e.byteLength); }(e, i);
                    case "[object Float32Array]":
                    case "[object Float64Array]":
                    case "[object Int8Array]":
                    case "[object Int16Array]":
                    case "[object Int32Array]":
                    case "[object Uint8Array]":
                    case "[object Uint8ClampedArray]":
                    case "[object Uint16Array]":
                    case "[object Uint32Array]": return function (e, t) { var n = t ? pe(e.buffer) : e.buffer; return new e.constructor(n, e.byteOffset, e.length); }(e, i);
                    case o: return function (e, t, n) { return y(t ? n(b(e), !0) : b(e), v, new e.constructor); }(e, i, n);
                    case "[object Number]":
                    case "[object String]": return new r(e);
                    case "[object RegExp]": return function (e) { var t = new e.constructor(e.source, c.exec(e)); return t.lastIndex = e.lastIndex, t; }(e);
                    case a: return function (e, t, n) { return y(t ? n(C(e), !0) : C(e), S, new e.constructor); }(e, i, n);
                    case "[object Symbol]": return s = e, ie ? Object(ie.call(s)) : {};
                } var s; }(e, g, le, t);
            }
        } p || (p = new ae); var T = p.get(e); if (T)
            return T; if (p.set(e, m), !f)
            var R = n ? function (e) { return function (e, t, n) { var i = t(e); return Te(e) ? i : function (e, t) { for (var n = -1, i = t.length, r = e.length; ++n < i;)
                e[r + n] = t[n]; return e; }(i, n(e)); }(e, Ie, _e); }(e) : Ie(e); return function (e, t) { for (var n = -1, i = e ? e.length : 0; ++n < i && !1 !== t(e[n], n, e);)
            ; }(R || e, (function (i, r) { R && (i = e[r = i]), de(m, r, le(i, t, n, d, r, e, p)); })), m; } function he(e) { return !(!we(e) || (t = e, O && O in t)) && (Ae(e) || E(e) ? k : d).test(Ee(e)); var t; } function pe(e) { var t = new e.constructor(e.byteLength); return new F(t).set(new F(e)), t; } function me(e, t, n, i) { n || (n = {}); for (var r = -1, s = t.length; ++r < s;) {
            var o = t[r], a = i ? i(n[o], e[o], o, n, e) : void 0;
            de(n, o, void 0 === a ? e[o] : a);
        } return n; } function fe(e, t) { var n, i, r = e.__data__; return ("string" == (i = typeof (n = t)) || "number" == i || "symbol" == i || "boolean" == i ? "__proto__" !== n : null === n) ? r["string" == typeof t ? "string" : "hash"] : r.map; } function ge(e, t) { var n = function (e, t) { return null == e ? void 0 : e[t]; }(e, t); return he(n) ? n : void 0; } re.prototype.clear = function () { this.__data__ = Q ? Q(null) : {}; }, re.prototype.delete = function (e) { return this.has(e) && delete this.__data__[e]; }, re.prototype.get = function (e) { var t = this.__data__; if (Q) {
            var n = t[e];
            return "__lodash_hash_undefined__" === n ? void 0 : n;
        } return N.call(t, e) ? t[e] : void 0; }, re.prototype.has = function (e) { var t = this.__data__; return Q ? void 0 !== t[e] : N.call(t, e); }, re.prototype.set = function (e, t) { return this.__data__[e] = Q && void 0 === t ? "__lodash_hash_undefined__" : t, this; }, se.prototype.clear = function () { this.__data__ = []; }, se.prototype.delete = function (e) { var t = this.__data__, n = ue(t, e); return !(n < 0) && (n == t.length - 1 ? t.pop() : B.call(t, n, 1), !0); }, se.prototype.get = function (e) { var t = this.__data__, n = ue(t, e); return n < 0 ? void 0 : t[n][1]; }, se.prototype.has = function (e) { return ue(this.__data__, e) > -1; }, se.prototype.set = function (e, t) { var n = this.__data__, i = ue(n, e); return i < 0 ? n.push([e, t]) : n[i][1] = t, this; }, oe.prototype.clear = function () { this.__data__ = { hash: new re, map: new (K || se), string: new re }; }, oe.prototype.delete = function (e) { return fe(this, e).delete(e); }, oe.prototype.get = function (e) { return fe(this, e).get(e); }, oe.prototype.has = function (e) { return fe(this, e).has(e); }, oe.prototype.set = function (e, t) { return fe(this, e).set(e, t), this; }, ae.prototype.clear = function () { this.__data__ = new se; }, ae.prototype.delete = function (e) { return this.__data__.delete(e); }, ae.prototype.get = function (e) { return this.__data__.get(e); }, ae.prototype.has = function (e) { return this.__data__.has(e); }, ae.prototype.set = function (e, t) { var n = this.__data__; if (n instanceof se) {
            var i = n.__data__;
            if (!K || i.length < 199)
                return i.push([e, t]), this;
            n = this.__data__ = new oe(i);
        } return n.set(e, t), this; }; var _e = J ? T(J, Object) : function () { return []; }, ve = function (e) { return M.call(e); }; function Se(e, t) { return !!(t = null == t ? 9007199254740991 : t) && ("number" == typeof e || u.test(e)) && e > -1 && e % 1 == 0 && e < t; } function ye(e) { var t = e && e.constructor; return e === ("function" == typeof t && t.prototype || I); } function Ee(e) { if (null != e) {
            try {
                return D.call(e);
            }
            catch (e) { }
            try {
                return e + "";
            }
            catch (e) { }
        } return ""; } function be(e, t) { return e === t || e != e && t != t; } ($ && "[object DataView]" != ve(new $(new ArrayBuffer(1))) || K && ve(new K) != o || q && "[object Promise]" != ve(q.resolve()) || W && ve(new W) != a || z && "[object WeakMap]" != ve(new z)) && (ve = function (e) { var t = M.call(e), n = "[object Object]" == t ? e.constructor : void 0, i = n ? Ee(n) : void 0; if (i)
            switch (i) {
                case X: return "[object DataView]";
                case Y: return o;
                case Z: return "[object Promise]";
                case ee: return a;
                case te: return "[object WeakMap]";
            } return t; }); var Te = Array.isArray; function Ce(e) { return null != e && function (e) { return "number" == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991; }(e.length) && !Ae(e); } var Re = V || function () { return !1; }; function Ae(e) { var t = we(e) ? M.call(e) : ""; return t == r || t == s; } function we(e) { var t = typeof e; return !!e && ("object" == t || "function" == t); } function Ie(e) { return Ce(e) ? ce(e) : function (e) { if (!ye(e))
            return G(e); var t = []; for (var n in Object(e))
            N.call(e, n) && "constructor" != n && t.push(n); return t; }(e); } n.exports = function (e) { return le(e, !0, !0); }; }).call(this, n(46), n(80)(e)); }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; })), n.d(t, "b", (function () { return r; }));
            var i = "https://api.callstats.io/static/callstats-ws.min.js", r = 5;
        }, function (e, t) { e.exports = { ENVIRONMENT: "environment", USER: "user" }; }, function (e, t) { var n; n = function () { return this; }(); try {
            n = n || new Function("return this")();
        }
        catch (e) {
            "object" == typeof window && (n = window);
        } e.exports = n; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; }));
            var i = /** @class */ (function () {
                function i() {
                    var _this = this;
                    this.promise = new Promise(function (e, t) { _this.resolve = function () {
                        var t = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            t[_i] = arguments[_i];
                        }
                        _this.clearRejectTimeout(), e.apply(void 0, t);
                    }, _this.reject = function () {
                        var e = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            e[_i] = arguments[_i];
                        }
                        _this.clearRejectTimeout(), t.apply(void 0, e);
                    }; }), this.then = this.promise.then.bind(this.promise), this.catch = this.promise.catch.bind(this.promise);
                }
                i.prototype.clearRejectTimeout = function () { clearTimeout(this._timeout); };
                i.prototype.setRejectTimeout = function (e) {
                    var _this = this;
                    this._timeout = setTimeout(function () { _this.reject(new Error("timeout")); }, e);
                };
                return i;
            }());
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "DEVICE_LIST_CHANGED", (function () { return i; })), n.d(t, "PERMISSIONS_CHANGED", (function () { return r; })), n.d(t, "PERMISSION_PROMPT_IS_SHOWN", (function () { return s; })), n.d(t, "SLOW_GET_USER_MEDIA", (function () { return o; }));
            var i = "mediaDevices.devicechange", r = "rtc.permissions_changed", s = "mediaDevices.permissionPromptIsShown", o = "mediaDevices.slowGetUserMedia";
        }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(19), r = n(14), s = n(3); function o(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var a = n(4).getLogger(e); var c = null; var d = { obtainStream: null, init: function (e, t) {
                    if (e === void 0) { e = {}; }
                    this.options = e, c = t, this.obtainStream = this._createObtainStreamMethod(), this.obtainStream || a.info("Desktop sharing disabled");
                }, _createObtainStreamMethod: function () { return s.a.isNWJS() ? function (e, t, n) { window.JitsiMeetNW.obtainDesktopStream(t, function (e, t) { var s; s = e && "InvalidStateError" === e.name ? new i.a(r.SCREENSHARING_USER_CANCELED) : new i.a(e, t, ["desktop"]), "function" == typeof n && n(s); }); } : s.a.isElectron() ? this.obtainScreenOnElectron : s.a.isReactNative() && s.a.supportsGetDisplayMedia() ? this.obtainScreenFromGetDisplayMediaRN : s.a.supportsGetDisplayMedia() ? this.obtainScreenFromGetDisplayMedia : (a.log("Screen sharing not supported on ", s.a.getName()), null); }, isSupported: function () { return null !== this.obtainStream; }, obtainScreenOnElectron: function (e, t, n) {
                    if (e === void 0) { e = {}; }
                    if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {
                        var s_4 = e.desktopSharingSources, a_3 = e.gumOptions;
                        window.JitsiMeetScreenObtainer.openDesktopPicker({ desktopSharingSources: s_4 || ["screen", "window"] }, function (e, s, d) {
                            if (d === void 0) { d = !1; }
                            return function (e, t, n) {
                                if (e === void 0) { e = { response: {}, gumOptions: {} }; }
                                var _a = e.response || {}, s = _a.streamId, a = _a.streamType, d = _a.screenShareAudio, u = _a.error;
                                if (s) {
                                    var i_14 = function (e) { for (var t = 1; t < arguments.length; t++) {
                                        var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                                        "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { o(e, t, n[t]); }));
                                    } return e; }({ desktopStream: s, screenShareAudio: d }, e.gumOptions);
                                    c(["desktop"], i_14).then(function (e) { return t({ stream: e, sourceId: s, sourceType: a }); }, n);
                                }
                                else {
                                    if ("" === s)
                                        return void n(new i.a(r.SCREENSHARING_USER_CANCELED));
                                    n(new i.a(r.SCREENSHARING_GENERIC_ERROR, u));
                                }
                            }({ response: { streamId: e, streamType: s, screenShareAudio: d }, gumOptions: a_3 }, t, n);
                        }, function (e) { return n(new i.a(r.ELECTRON_DESKTOP_PICKER_ERROR, e)); });
                    }
                    else
                        n(new i.a(r.ELECTRON_DESKTOP_PICKER_NOT_FOUND));
                }, obtainScreenFromGetDisplayMedia: function (e, t, n) { var s; a.info("Using getDisplayMedia for screen sharing"), s = navigator.getDisplayMedia ? navigator.getDisplayMedia.bind(navigator) : navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices), s({ video: !0, audio: !0, cursor: "always" }).then(function (n) { var i; if (n && n.getTracks() && n.getTracks().length > 0) {
                    var t_43 = n.getVideoTracks()[0];
                    t_43 && (i = t_43.applyConstraints(e.trackOptions));
                }
                else
                    i = Promise.resolve(); i.then(function () { return t({ stream: n, sourceId: n.id }); }); }).catch(function (e) { var t = { errorName: e && e.name, errorMsg: e && e.message, errorStack: e && e.stack }; a.error("getDisplayMedia error", t), t.errorMsg && -1 !== t.errorMsg.indexOf("denied by system") ? n(new i.a(r.PERMISSION_DENIED)) : n(new i.a(r.SCREENSHARING_USER_CANCELED)); }); }, obtainScreenFromGetDisplayMediaRN: function (e, t, n) { a.info("Using getDisplayMedia for screen sharing"), navigator.mediaDevices.getDisplayMedia({ video: !0 }).then(function (e) { t({ stream: e, sourceId: e.id }); }).catch(function () { n(new i.a(r.SCREENSHARING_USER_CANCELED)); }); } }; t.a = d; }).call(this, "modules/RTC/ScreenObtainer.js");
        }, function (e, t, n) { var i = n(153), r = { loadScript: function (e, t, n, r, s, o) { var a = document, c = a.createElement("script"), d = a.getElementsByTagName("script")[0]; if (c.async = t, r) {
                var t_44 = i();
                if (t_44) {
                    var n_32 = t_44.src, i_15 = n_32.substring(0, n_32.lastIndexOf("/") + 1);
                    n_32 && i_15 && (e = i_15 + e);
                }
            } s && (c.onload = s), o && (c.onerror = o), c.src = e, n ? d.parentNode.insertBefore(c, d) : d.parentNode.appendChild(c); } }; e.exports = r; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return f; })), n.d(t, "b", (function () { return g; })); var i = n(4), r = n(0), s = n(15), o = n(5), a = n(7), c = n.n(a), d = n(8), u = n(3), l = n(6); function h(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { p(e, t, n[t]); }));
            } return e; } function p(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var m = Object(i.getLogger)(e), f = { ACTIVE: "active", INACTIVE: "inactive", INTERRUPTED: "interrupted", RESTORING: "restoring" };
                var g = /** @class */ (function () {
                    function g(e, t, n) {
                        this.rtc = e, this.conference = t, this.trackTimers = {}, this.connStatusFromJvb = {}, this.outOfLastNTimeout = "number" == typeof n.outOfLastNTimeout ? n.outOfLastNTimeout : 500, this.rtcMuteTimeout = "number" == typeof n.rtcMuteTimeout ? n.rtcMuteTimeout : 1e4, this.rtcMutedTimestamp = {}, m.info("RtcMuteTimeout set to: " + this.rtcMuteTimeout), this.enteredLastNTimestamp = new Map, this.restoringTimers = new Map, this.connectionStatusMap = new Map;
                    }
                    g._getNewStateForJvbMode = function (e, t, n, i, r) { return e ? i ? f.ACTIVE : u.a.supportsVideoMuteOnConnInterrupted() ? r ? t ? n ? f.INTERRUPTED : f.RESTORING : f.INACTIVE : f.ACTIVE : t ? f.ACTIVE : f.INACTIVE : f.INTERRUPTED; };
                    g._getNewStateForP2PMode = function (e, t) { return u.a.supportsVideoMuteOnConnInterrupted() ? e || !t ? f.ACTIVE : f.INTERRUPTED : f.ACTIVE; };
                    g.prototype._getVideoFrozenTimeout = function (e) { return this.rtc.isInLastN(e) ? this.rtcMuteTimeout : this.outOfLastNTimeout; };
                    g.prototype.init = function () { this._onEndpointConnStatusChanged = this.onEndpointConnStatusChanged.bind(this), this.rtc.addListener(c.a.ENDPOINT_CONN_STATUS_CHANGED, this._onEndpointConnStatusChanged), this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this), this.conference.on(r.P2P_STATUS, this._onP2PStatus), this._onUserLeft = this.onUserLeft.bind(this), this.conference.on(r.USER_LEFT, this._onUserLeft), u.a.supportsVideoMuteOnConnInterrupted() && (this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this), this.rtc.addListener(c.a.REMOTE_TRACK_MUTE, this._onTrackRtcMuted), this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this), this.rtc.addListener(c.a.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted), this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this), this.conference.on(r.TRACK_ADDED, this._onRemoteTrackAdded), this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this), this.conference.on(r.TRACK_REMOVED, this._onRemoteTrackRemoved), this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this), this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this)), this._onLastNChanged = this._onLastNChanged.bind(this), this.conference.on(r.LAST_N_ENDPOINTS_CHANGED, this._onLastNChanged), this._onLastNValueChanged = this.refreshConnectionStatusForAll.bind(this), this.rtc.on(c.a.LASTN_VALUE_CHANGED, this._onLastNValueChanged); };
                    g.prototype.dispose = function () { this.rtc.removeListener(c.a.ENDPOINT_CONN_STATUS_CHANGED, this._onEndpointConnStatusChanged), u.a.supportsVideoMuteOnConnInterrupted() && (this.rtc.removeListener(c.a.REMOTE_TRACK_MUTE, this._onTrackRtcMuted), this.rtc.removeListener(c.a.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted), this.conference.off(r.TRACK_ADDED, this._onRemoteTrackAdded), this.conference.off(r.TRACK_REMOVED, this._onRemoteTrackRemoved)), this.conference.off(r.LAST_N_ENDPOINTS_CHANGED, this._onLastNChanged), this.rtc.removeListener(c.a.LASTN_VALUE_CHANGED, this._onLastNValueChanged), this.conference.off(r.P2P_STATUS, this._onP2PStatus), this.conference.off(r.USER_LEFT, this._onUserLeft); var e = Object.keys(this.trackTimers); for (var _i = 0, e_46 = e; _i < e_46.length; _i++) {
                        var t_45 = e_46[_i];
                        this.clearTimeout(t_45), this.clearRtcMutedTimestamp(t_45);
                    } for (var e_47 in this.connectionStatusMap)
                        this.connectionStatusMap.hasOwnProperty(e_47) && this.onUserLeft(e_47); this.connStatusFromJvb = {}; };
                    g.prototype.onEndpointConnStatusChanged = function (e, t) { m.debug("Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(" + Date.now() + "): " + e + ": " + t), e !== this.conference.myUserId() && (this.connStatusFromJvb[e] = t, this.figureOutConnectionStatus(e)); };
                    g.prototype._changeConnectionStatus = function (e, t) { if (e.getConnectionStatus() !== t) {
                        var n_33 = e.getId();
                        e._setConnectionStatus(t), m.debug("Emit endpoint conn status(" + Date.now() + ") " + n_33 + ": " + t), l.a.sendLog(JSON.stringify({ id: "peer.conn.status", participant: n_33, status: t })), this.conference.eventEmitter.emit(r.PARTICIPANT_CONN_STATUS_CHANGED, n_33, t);
                    } };
                    g.prototype.clearTimeout = function (e) { this.trackTimers[e] && (window.clearTimeout(this.trackTimers[e]), this.trackTimers[e] = null); };
                    g.prototype.clearRtcMutedTimestamp = function (e) { this.rtcMutedTimestamp[e] = null; };
                    g.prototype.onRemoteTrackAdded = function (e) {
                        var _this = this;
                        e.isLocal() || e.getType() !== o.c || (m.debug("Detector on remote track added for: " + e.getParticipantId()), e.on(s.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged), e.on(s.TRACK_VIDEOTYPE_CHANGED, function (t) { return _this._onTrackVideoTypeChanged(e, t); }));
                    };
                    g.prototype.onRemoteTrackRemoved = function (e) { if (!e.isLocal() && e.getType() === o.c) {
                        var t_46 = e.getParticipantId();
                        m.debug("Detector on remote track removed: " + t_46), e.off(s.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged), this.clearTimeout(t_46), this.clearRtcMutedTimestamp(t_46), this.figureOutConnectionStatus(t_46);
                    } };
                    g.prototype.isVideoTrackFrozen = function (e) { if (!u.a.supportsVideoMuteOnConnInterrupted())
                        return !1; var t = e.getId(), n = e.hasAnyVideoTrackWebRTCMuted(), i = this.rtcMutedTimestamp[t], r = this._getVideoFrozenTimeout(t); return n && "number" == typeof i && Date.now() - i >= r; };
                    g.prototype.refreshConnectionStatusForAll = function () { var e = this.conference.getParticipants(); for (var _i = 0, e_48 = e; _i < e_48.length; _i++) {
                        var t_47 = e_48[_i];
                        this.figureOutConnectionStatus(t_47.getId());
                    } };
                    g.prototype.figureOutConnectionStatus = function (e) { var t = this.conference.getParticipantById(e); if (!t)
                        return void m.debug("figure out conn status - no participant for: " + e); var n = this.conference.isP2PActive(), i = this._isRestoringTimedout(e), r = 0 === this.conference.getLastN(), s = t.isVideoMuted() || r, a = this.isVideoTrackFrozen(t), c = this.rtc.isInLastN(e); var d = this.connStatusFromJvb[e]; "boolean" != typeof d && (m.debug("Assuming connection active by JVB - no notification"), d = !0); var u = n ? g._getNewStateForP2PMode(s, a) : g._getNewStateForJvbMode(d, c, i, s, a); u !== f.RESTORING && this._clearRestoringTimer(e), m.debug("Figure out conn status for " + e + ", is video muted: " + s + " is active(jvb): " + d + " video track frozen: " + a + " p2p mode: " + n + " is in last N: " + c + " currentStatus => newStatus: " + t.getConnectionStatus() + " => " + u); var l = this.connectionStatusMap[e] || {}; if (!("p2p" in l) || !("connectionStatus" in l) || l.p2p !== n || l.connectionStatus !== u) {
                        var i_16 = Date.now();
                        if (this.maybeSendParticipantConnectionStatusEvent(e, i_16), this.connectionStatusMap[e] = h({}, l, { connectionStatus: u, p2p: n, startedMs: i_16 }), !("videoType" in this.connectionStatusMap[e])) {
                            var n_34 = t.getTracksByMediaType(o.c);
                            Array.isArray(n_34) && 0 !== n_34.length && (this.connectionStatusMap[e].videoType = n_34[0].videoType);
                        }
                    } this._changeConnectionStatus(t, u); };
                    g.prototype.maybeSendParticipantConnectionStatusEvent = function (e, t) { var n = this.connectionStatusMap[e]; n && "startedMs" in n && "videoType" in n && "connectionStatus" in n && "p2p" in n && (n.value = t - n.startedMs, l.a.sendAnalytics(Object(d.J)(n))); };
                    g.prototype._onLastNChanged = function (e, t) {
                        if (e === void 0) { e = []; }
                        if (t === void 0) { t = []; }
                        var n = Date.now();
                        m.debug("leaving/entering lastN", e, t, n);
                        for (var _i = 0, e_49 = e; _i < e_49.length; _i++) {
                            var t_49 = e_49[_i];
                            this.enteredLastNTimestamp.delete(t_49), this._clearRestoringTimer(t_49), this.figureOutConnectionStatus(t_49);
                        }
                        for (var _a = 0, t_48 = t; _a < t_48.length; _a++) {
                            var e_50 = t_48[_a];
                            this.enteredLastNTimestamp.set(e_50, n), this.figureOutConnectionStatus(e_50);
                        }
                    };
                    g.prototype._clearRestoringTimer = function (e) { var t = this.restoringTimers.get(e); t && (clearTimeout(t), this.restoringTimers.delete(e)); };
                    g.prototype._isRestoringTimedout = function (e) {
                        var _this = this;
                        var t = this.enteredLastNTimestamp.get(e);
                        if (t && Date.now() - t >= 1e4)
                            return !0;
                        return this.restoringTimers.get(e) || this.restoringTimers.set(e, setTimeout(function () { return _this.figureOutConnectionStatus(e); }, 1e4)), !1;
                    };
                    g.prototype.onUserLeft = function (e) { this.maybeSendParticipantConnectionStatusEvent(e, Date.now()), delete this.connectionStatusMap[e]; };
                    g.prototype.onTrackRtcMuted = function (e) {
                        var _this = this;
                        var t = e.getParticipantId(), n = this.conference.getParticipantById(t);
                        if (m.debug("Detector track RTC muted: " + t, Date.now()), n) {
                            if (this.rtcMutedTimestamp[t] = Date.now(), !n.isVideoMuted()) {
                                this.clearTimeout(t);
                                var e_51 = this._getVideoFrozenTimeout(t);
                                this.trackTimers[t] = window.setTimeout(function () { m.debug("Set RTC mute timeout for: " + t + "                     of " + e_51 + " ms"), _this.clearTimeout(t), _this.figureOutConnectionStatus(t); }, e_51);
                            }
                        }
                        else
                            m.error("No participant for id: " + t);
                    };
                    g.prototype.onTrackRtcUnmuted = function (e) { var t = e.getParticipantId(); m.debug("Detector track RTC unmuted: " + t, Date.now()), this.clearTimeout(t), this.clearRtcMutedTimestamp(t), this.figureOutConnectionStatus(t); };
                    g.prototype.onSignallingMuteChanged = function (e) { var t = e.getParticipantId(); m.debug("Detector on track signalling mute changed: " + t, e.isMuted()), this.figureOutConnectionStatus(t); };
                    g.prototype.onTrackVideoTypeChanged = function (e, t) { var n = e.getParticipantId(), i = Date.now(); this.maybeSendParticipantConnectionStatusEvent(n, i), this.connectionStatusMap[n] = h({}, this.connectionStatusMap[n] || {}, { videoType: t, startedMs: i }); };
                    return g;
                }());  }).call(this, "modules/connectivity/ParticipantConnectionStatus.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return s; })); var i = n(4), r = n(20); var s = "NETWORK_INFO_CHANGED", o = Object(i.getLogger)(e);
                var a = /** @class */ (function (_super) {
                    __extends(a, _super);
                    function a() {
                        var _this = this;
                        _this = _super.call(this) || this, _this._current = { isOnline: !0 };
                        return _this;
                    }
                    a.prototype.updateNetworkInfo = function (_a) {
                        var e = _a.isOnline;
                        o.debug("updateNetworkInfo", { isOnline: e }), this._current = { isOnline: !0 === e }, this.eventEmitter.emit(s, this._current);
                    };
                    a.prototype.isOnline = function () { return !0 === this._current.isOnline; };
                    return a;
                }(r.a));  var c = new a; t.b = c; }).call(this, "modules/connectivity/NetworkInfo.js");
        }, function (e, t, n) {
            "use strict";
            var i = { generateIdentifier: function () { return Math.random().toString(36).substr(2, 10); } };
            i.localCName = i.generateIdentifier(), i.splitLines = function (e) { return e.trim().split("\n").map((function (e) { return e.trim(); })); }, i.splitSections = function (e) { return e.split("\nm=").map((function (e, t) { return (t > 0 ? "m=" + e : e).trim() + "\r\n"; })); }, i.getDescription = function (e) { var t = i.splitSections(e); return t && t[0]; }, i.getMediaSections = function (e) { var t = i.splitSections(e); return t.shift(), t; }, i.matchPrefix = function (e, t) { return i.splitLines(e).filter((function (e) { return 0 === e.indexOf(t); })); }, i.parseCandidate = function (e) { for (var t, n = { foundation: (t = 0 === e.indexOf("a=candidate:") ? e.substring(12).split(" ") : e.substring(10).split(" "))[0], component: parseInt(t[1], 10), protocol: t[2].toLowerCase(), priority: parseInt(t[3], 10), ip: t[4], address: t[4], port: parseInt(t[5], 10), type: t[7] }, i = 8; i < t.length; i += 2)
                switch (t[i]) {
                    case "raddr":
                        n.relatedAddress = t[i + 1];
                        break;
                    case "rport":
                        n.relatedPort = parseInt(t[i + 1], 10);
                        break;
                    case "tcptype":
                        n.tcpType = t[i + 1];
                        break;
                    case "ufrag":
                        n.ufrag = t[i + 1], n.usernameFragment = t[i + 1];
                        break;
                    default: n[t[i]] = t[i + 1];
                } return n; }, i.writeCandidate = function (e) { var t = []; t.push(e.foundation), t.push(e.component), t.push(e.protocol.toUpperCase()), t.push(e.priority), t.push(e.address || e.ip), t.push(e.port); var n = e.type; return t.push("typ"), t.push(n), "host" !== n && e.relatedAddress && e.relatedPort && (t.push("raddr"), t.push(e.relatedAddress), t.push("rport"), t.push(e.relatedPort)), e.tcpType && "tcp" === e.protocol.toLowerCase() && (t.push("tcptype"), t.push(e.tcpType)), (e.usernameFragment || e.ufrag) && (t.push("ufrag"), t.push(e.usernameFragment || e.ufrag)), "candidate:" + t.join(" "); }, i.parseIceOptions = function (e) { return e.substr(14).split(" "); }, i.parseRtpMap = function (e) { var t = e.substr(9).split(" "), n = { payloadType: parseInt(t.shift(), 10) }; return t = t[0].split("/"), n.name = t[0], n.clockRate = parseInt(t[1], 10), n.channels = 3 === t.length ? parseInt(t[2], 10) : 1, n.numChannels = n.channels, n; }, i.writeRtpMap = function (e) { var t = e.payloadType; void 0 !== e.preferredPayloadType && (t = e.preferredPayloadType); var n = e.channels || e.numChannels || 1; return "a=rtpmap:" + t + " " + e.name + "/" + e.clockRate + (1 !== n ? "/" + n : "") + "\r\n"; }, i.parseExtmap = function (e) { var t = e.substr(9).split(" "); return { id: parseInt(t[0], 10), direction: t[0].indexOf("/") > 0 ? t[0].split("/")[1] : "sendrecv", uri: t[1] }; }, i.writeExtmap = function (e) { return "a=extmap:" + (e.id || e.preferredId) + (e.direction && "sendrecv" !== e.direction ? "/" + e.direction : "") + " " + e.uri + "\r\n"; }, i.parseFmtp = function (e) { for (var t, n = {}, i = e.substr(e.indexOf(" ") + 1).split(";"), r = 0; r < i.length; r++)
                n[(t = i[r].trim().split("="))[0].trim()] = t[1]; return n; }, i.writeFmtp = function (e) { var t = "", n = e.payloadType; if (void 0 !== e.preferredPayloadType && (n = e.preferredPayloadType), e.parameters && Object.keys(e.parameters).length) {
                var i = [];
                Object.keys(e.parameters).forEach((function (t) { e.parameters[t] ? i.push(t + "=" + e.parameters[t]) : i.push(t); })), t += "a=fmtp:" + n + " " + i.join(";") + "\r\n";
            } return t; }, i.parseRtcpFb = function (e) { var t = e.substr(e.indexOf(" ") + 1).split(" "); return { type: t.shift(), parameter: t.join(" ") }; }, i.writeRtcpFb = function (e) { var t = "", n = e.payloadType; return void 0 !== e.preferredPayloadType && (n = e.preferredPayloadType), e.rtcpFeedback && e.rtcpFeedback.length && e.rtcpFeedback.forEach((function (e) { t += "a=rtcp-fb:" + n + " " + e.type + (e.parameter && e.parameter.length ? " " + e.parameter : "") + "\r\n"; })), t; }, i.parseSsrcMedia = function (e) { var t = e.indexOf(" "), n = { ssrc: parseInt(e.substr(7, t - 7), 10) }, i = e.indexOf(":", t); return i > -1 ? (n.attribute = e.substr(t + 1, i - t - 1), n.value = e.substr(i + 1)) : n.attribute = e.substr(t + 1), n; }, i.parseSsrcGroup = function (e) { var t = e.substr(13).split(" "); return { semantics: t.shift(), ssrcs: t.map((function (e) { return parseInt(e, 10); })) }; }, i.getMid = function (e) { var t = i.matchPrefix(e, "a=mid:")[0]; if (t)
                return t.substr(6); }, i.parseFingerprint = function (e) { var t = e.substr(14).split(" "); return { algorithm: t[0].toLowerCase(), value: t[1] }; }, i.getDtlsParameters = function (e, t) { return { role: "auto", fingerprints: i.matchPrefix(e + t, "a=fingerprint:").map(i.parseFingerprint) }; }, i.writeDtlsParameters = function (e, t) { var n = "a=setup:" + t + "\r\n"; return e.fingerprints.forEach((function (e) { n += "a=fingerprint:" + e.algorithm + " " + e.value + "\r\n"; })), n; }, i.parseCryptoLine = function (e) { var t = e.substr(9).split(" "); return { tag: parseInt(t[0], 10), cryptoSuite: t[1], keyParams: t[2], sessionParams: t.slice(3) }; }, i.writeCryptoLine = function (e) { return "a=crypto:" + e.tag + " " + e.cryptoSuite + " " + ("object" == typeof e.keyParams ? i.writeCryptoKeyParams(e.keyParams) : e.keyParams) + (e.sessionParams ? " " + e.sessionParams.join(" ") : "") + "\r\n"; }, i.parseCryptoKeyParams = function (e) { if (0 !== e.indexOf("inline:"))
                return null; var t = e.substr(7).split("|"); return { keyMethod: "inline", keySalt: t[0], lifeTime: t[1], mkiValue: t[2] ? t[2].split(":")[0] : void 0, mkiLength: t[2] ? t[2].split(":")[1] : void 0 }; }, i.writeCryptoKeyParams = function (e) { return e.keyMethod + ":" + e.keySalt + (e.lifeTime ? "|" + e.lifeTime : "") + (e.mkiValue && e.mkiLength ? "|" + e.mkiValue + ":" + e.mkiLength : ""); }, i.getCryptoParameters = function (e, t) { return i.matchPrefix(e + t, "a=crypto:").map(i.parseCryptoLine); }, i.getIceParameters = function (e, t) { var n = i.matchPrefix(e + t, "a=ice-ufrag:")[0], r = i.matchPrefix(e + t, "a=ice-pwd:")[0]; return n && r ? { usernameFragment: n.substr(12), password: r.substr(10) } : null; }, i.writeIceParameters = function (e) { return "a=ice-ufrag:" + e.usernameFragment + "\r\na=ice-pwd:" + e.password + "\r\n"; }, i.parseRtpParameters = function (e) { for (var t = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] }, n = i.splitLines(e)[0].split(" "), r = 3; r < n.length; r++) {
                var s = n[r], o = i.matchPrefix(e, "a=rtpmap:" + s + " ")[0];
                if (o) {
                    var a = i.parseRtpMap(o), c = i.matchPrefix(e, "a=fmtp:" + s + " ");
                    switch (a.parameters = c.length ? i.parseFmtp(c[0]) : {}, a.rtcpFeedback = i.matchPrefix(e, "a=rtcp-fb:" + s + " ").map(i.parseRtcpFb), t.codecs.push(a), a.name.toUpperCase()) {
                        case "RED":
                        case "ULPFEC": t.fecMechanisms.push(a.name.toUpperCase());
                    }
                }
            } return i.matchPrefix(e, "a=extmap:").forEach((function (e) { t.headerExtensions.push(i.parseExtmap(e)); })), t; }, i.writeRtpDescription = function (e, t) { var n = ""; n += "m=" + e + " ", n += t.codecs.length > 0 ? "9" : "0", n += " UDP/TLS/RTP/SAVPF ", n += t.codecs.map((function (e) { return void 0 !== e.preferredPayloadType ? e.preferredPayloadType : e.payloadType; })).join(" ") + "\r\n", n += "c=IN IP4 0.0.0.0\r\n", n += "a=rtcp:9 IN IP4 0.0.0.0\r\n", t.codecs.forEach((function (e) { n += i.writeRtpMap(e), n += i.writeFmtp(e), n += i.writeRtcpFb(e); })); var r = 0; return t.codecs.forEach((function (e) { e.maxptime > r && (r = e.maxptime); })), r > 0 && (n += "a=maxptime:" + r + "\r\n"), n += "a=rtcp-mux\r\n", t.headerExtensions && t.headerExtensions.forEach((function (e) { n += i.writeExtmap(e); })), n; }, i.parseRtpEncodingParameters = function (e) { var t, n = [], r = i.parseRtpParameters(e), s = -1 !== r.fecMechanisms.indexOf("RED"), o = -1 !== r.fecMechanisms.indexOf("ULPFEC"), a = i.matchPrefix(e, "a=ssrc:").map((function (e) { return i.parseSsrcMedia(e); })).filter((function (e) { return "cname" === e.attribute; })), c = a.length > 0 && a[0].ssrc, d = i.matchPrefix(e, "a=ssrc-group:FID").map((function (e) { return e.substr(17).split(" ").map((function (e) { return parseInt(e, 10); })); })); d.length > 0 && d[0].length > 1 && d[0][0] === c && (t = d[0][1]), r.codecs.forEach((function (e) { if ("RTX" === e.name.toUpperCase() && e.parameters.apt) {
                var i = { ssrc: c, codecPayloadType: parseInt(e.parameters.apt, 10) };
                c && t && (i.rtx = { ssrc: t }), n.push(i), s && ((i = JSON.parse(JSON.stringify(i))).fec = { ssrc: c, mechanism: o ? "red+ulpfec" : "red" }, n.push(i));
            } })), 0 === n.length && c && n.push({ ssrc: c }); var u = i.matchPrefix(e, "b="); return u.length && (u = 0 === u[0].indexOf("b=TIAS:") ? parseInt(u[0].substr(7), 10) : 0 === u[0].indexOf("b=AS:") ? 1e3 * parseInt(u[0].substr(5), 10) * .95 - 16e3 : void 0, n.forEach((function (e) { e.maxBitrate = u; }))), n; }, i.parseRtcpParameters = function (e) { var t = {}, n = i.matchPrefix(e, "a=ssrc:").map((function (e) { return i.parseSsrcMedia(e); })).filter((function (e) { return "cname" === e.attribute; }))[0]; n && (t.cname = n.value, t.ssrc = n.ssrc); var r = i.matchPrefix(e, "a=rtcp-rsize"); t.reducedSize = r.length > 0, t.compound = 0 === r.length; var s = i.matchPrefix(e, "a=rtcp-mux"); return t.mux = s.length > 0, t; }, i.parseMsid = function (e) { var t, n = i.matchPrefix(e, "a=msid:"); if (1 === n.length)
                return { stream: (t = n[0].substr(7).split(" "))[0], track: t[1] }; var r = i.matchPrefix(e, "a=ssrc:").map((function (e) { return i.parseSsrcMedia(e); })).filter((function (e) { return "msid" === e.attribute; })); return r.length > 0 ? { stream: (t = r[0].value.split(" "))[0], track: t[1] } : void 0; }, i.parseSctpDescription = function (e) { var t, n = i.parseMLine(e), r = i.matchPrefix(e, "a=max-message-size:"); r.length > 0 && (t = parseInt(r[0].substr(19), 10)), isNaN(t) && (t = 65536); var s = i.matchPrefix(e, "a=sctp-port:"); if (s.length > 0)
                return { port: parseInt(s[0].substr(12), 10), protocol: n.fmt, maxMessageSize: t }; if (i.matchPrefix(e, "a=sctpmap:").length > 0) {
                var o = i.matchPrefix(e, "a=sctpmap:")[0].substr(10).split(" ");
                return { port: parseInt(o[0], 10), protocol: o[1], maxMessageSize: t };
            } }, i.writeSctpDescription = function (e, t) { var n = []; return n = "DTLS/SCTP" !== e.protocol ? ["m=" + e.kind + " 9 " + e.protocol + " " + t.protocol + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctp-port:" + t.port + "\r\n"] : ["m=" + e.kind + " 9 " + e.protocol + " " + t.port + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctpmap:" + t.port + " " + t.protocol + " 65535\r\n"], void 0 !== t.maxMessageSize && n.push("a=max-message-size:" + t.maxMessageSize + "\r\n"), n.join(""); }, i.generateSessionId = function () { return Math.random().toString().substr(2, 21); }, i.writeSessionBoilerplate = function (e, t, n) { var r = void 0 !== t ? t : 2; return "v=0\r\no=" + (n || "thisisadapterortc") + " " + (e || i.generateSessionId()) + " " + r + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"; }, i.writeMediaSection = function (e, t, n, r) { var s = i.writeRtpDescription(e.kind, t); if (s += i.writeIceParameters(e.iceGatherer.getLocalParameters()), s += i.writeDtlsParameters(e.dtlsTransport.getLocalParameters(), "offer" === n ? "actpass" : "active"), s += "a=mid:" + e.mid + "\r\n", e.direction ? s += "a=" + e.direction + "\r\n" : e.rtpSender && e.rtpReceiver ? s += "a=sendrecv\r\n" : e.rtpSender ? s += "a=sendonly\r\n" : e.rtpReceiver ? s += "a=recvonly\r\n" : s += "a=inactive\r\n", e.rtpSender) {
                var o = "msid:" + r.id + " " + e.rtpSender.track.id + "\r\n";
                s += "a=" + o, s += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " " + o, e.sendEncodingParameters[0].rtx && (s += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " " + o, s += "a=ssrc-group:FID " + e.sendEncodingParameters[0].ssrc + " " + e.sendEncodingParameters[0].rtx.ssrc + "\r\n");
            } return s += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " cname:" + i.localCName + "\r\n", e.rtpSender && e.sendEncodingParameters[0].rtx && (s += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " cname:" + i.localCName + "\r\n"), s; }, i.getDirection = function (e, t) { for (var n = i.splitLines(e), r = 0; r < n.length; r++)
                switch (n[r]) {
                    case "a=sendrecv":
                    case "a=sendonly":
                    case "a=recvonly":
                    case "a=inactive": return n[r].substr(2);
                } return t ? i.getDirection(t) : "sendrecv"; }, i.getKind = function (e) { return i.splitLines(e)[0].split(" ")[0].substr(2); }, i.isRejected = function (e) { return "0" === e.split(" ", 2)[1]; }, i.parseMLine = function (e) { var t = i.splitLines(e)[0].substr(2).split(" "); return { kind: t[0], port: parseInt(t[1], 10), protocol: t[2], fmt: t.slice(3).join(" ") }; }, i.parseOLine = function (e) { var t = i.matchPrefix(e, "o=")[0].substr(2).split(" "); return { username: t[0], sessionId: t[1], sessionVersion: parseInt(t[2], 10), netType: t[3], addressType: t[4], address: t[5] }; }, i.isValidSDP = function (e) { if ("string" != typeof e || 0 === e.length)
                return !1; for (var t = i.splitLines(e), n = 0; n < t.length; n++)
                if (t[n].length < 2 || "=" !== t[n].charAt(1))
                    return !1; return !0; }, e.exports = i;
        }, function (e, t, n) {
            "use strict";
            t.a = { getFocusRecordingUpdate: function (e) { var t = e && e.getElementsByTagName("jibri-recording-status")[0]; if (t)
                    return { error: t.getAttribute("failure_reason"), initiator: t.getAttribute("initiator"), recordingMode: t.getAttribute("recording_mode"), sessionID: t.getAttribute("session_id"), status: t.getAttribute("status") }; }, getHiddenDomainUpdate: function (e) { var t = e.getElementsByTagName("live-stream-view-url")[0], n = t && t.textContent, i = e.getElementsByTagName("mode")[0], r = i && i.textContent && i.textContent.toLowerCase(), s = e.getElementsByTagName("session_id")[0]; return { liveStreamViewURL: n, mode: r, sessionID: s && s.textContent }; }, getSessionIdFromIq: function (e) { var t = e && e.getElementsByTagName("jibri")[0]; return t && t.getAttribute("session_id"); }, getSessionId: function (e) { var t = e.getElementsByTagName("session_id")[0]; return t && t.textContent; }, isFromFocus: function (e) { return e.getAttribute("from").includes("focus"); } };
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return E; })); var i = n(58), r = n.n(i), s = n(4), o = n(33), a = n.n(o), c = n(78), d = n(0), u = n(47), l = n(20), h = n(22); var p = Object(s.getLogger)(e), m = "error", f = "key-info", g = "key-info-ack", _ = "session-ack", v = "session-init", S = Symbol("OlmData"), y = { OLM_ID_KEY_READY: "olm.id_key_ready", PARTICIPANT_E2EE_CHANNEL_READY: "olm.participant_e2ee_channel_ready", PARTICIPANT_KEY_UPDATED: "olm.partitipant_key_updated" };
                var E = /** @class */ (function (_super) {
                    __extends(E, _super);
                    function E(e) {
                        var _this = this;
                        _this = _super.call(this) || this, _this._conf = e, _this._init = new u.a, _this._key = void 0, _this._keyIndex = -1, _this._reqs = new Map, _this._sessionInitialization = void 0, E.isSupported() ? (_this._bootstrapOlm(), _this._conf.on(d.ENDPOINT_MESSAGE_RECEIVED, _this._onEndpointMessageReceived.bind(_this)), _this._conf.on(d.CONFERENCE_LEFT, _this._onConferenceLeft.bind(_this)), _this._conf.on(d.USER_LEFT, _this._onParticipantLeft.bind(_this)), _this._conf.on(d.PARTICIPANT_PROPERTY_CHANGED, _this._onParticipantPropertyChanged.bind(_this))) : _this._init.reject(new Error("Olm not supported"));
                        return _this;
                    }
                    E.prototype.initSessions = function () {
                        return __awaiter(this, void 0, void 0, function () { var e_52, t_50, _i, _a, n_35; return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (this._sessionInitialization)
                                        throw new Error("OlmAdapte initSessions called multiple times");
                                    this._sessionInitialization = new u.a;
                                    return [4 /*yield*/, this._init];
                                case 1:
                                    _b.sent();
                                    e_52 = [], t_50 = this._conf.myUserId();
                                    _i = 0, _a = this._conf.getParticipants();
                                    _b.label = 2;
                                case 2:
                                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                                    n_35 = _a[_i];
                                    return [4 /*yield*/, n_35.getFeatures()];
                                case 3:
                                    (_b.sent()).has(h.b) && t_50 < n_35.getId() && e_52.push(this._sendSessionInit(n_35));
                                    _b.label = 4;
                                case 4:
                                    _i++;
                                    return [3 /*break*/, 2];
                                case 5: return [4 /*yield*/, Promise.allSettled(e_52)];
                                case 6:
                                    _b.sent(), this._sessionInitialization.resolve(), this._sessionInitialization = void 0;
                                    return [2 /*return*/];
                            }
                        }); });
                    };
                    E.isSupported = function () { return void 0 !== window.Olm; };
                    E.prototype.updateKey = function (e) {
                        return __awaiter(this, void 0, void 0, function () {
                            var t, _loop_5, this_3, _i, _a, e_53;
                            var _this = this;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        this._key = e, this._keyIndex++;
                                        t = [];
                                        _loop_5 = function (e_53) {
                                            var _d;
                                            var n_36 = e_53.getId(), i_17 = this_3._getParticipantOlmData(e_53);
                                            if (!i_17.session) {
                                                p.warn("Tried to send key to participant " + n_36 + " but we have no session");
                                                return "continue";
                                            }
                                            var r_7 = Object(c.a)(), s_5 = (_d = {}, _d[h.d] = "olm", _d.olm = { type: f, data: { ciphertext: this_3._encryptKeyInfo(i_17.session), uuid: r_7 } }, _d), o_3 = new u.a;
                                            o_3.setRejectTimeout(5e3), o_3.catch(function () { _this._reqs.delete(r_7); }), this_3._reqs.set(r_7, o_3), t.push(o_3), this_3._sendMessage(s_5, n_36);
                                        };
                                        this_3 = this;
                                        for (_i = 0, _a = this._conf.getParticipants(); _i < _a.length; _i++) {
                                            e_53 = _a[_i];
                                            _loop_5(e_53);
                                        }
                                        return [4 /*yield*/, Promise.allSettled(t)];
                                    case 1: return [2 /*return*/, (_b.sent(), this._keyIndex)];
                                }
                            });
                        });
                    };
                    E.prototype.updateCurrentKey = function (e) { return this._key = e, this._keyIndex; };
                    E.prototype.clearParticipantSession = function (e) { var t = this._getParticipantOlmData(e); t.session && (t.session.free(), t.session = void 0); };
                    E.prototype._bootstrapOlm = function () {
                        return __awaiter(this, void 0, void 0, function () { var e_55, e_54; return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    p.debug("Initializing Olm...");
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, Olm.init()];
                                case 2:
                                    _a.sent(), this._olmAccount = new Olm.Account, this._olmAccount.create();
                                    e_55 = JSON.parse(this._olmAccount.identity_keys());
                                    this._idKey = e_55.curve25519, p.debug("Olm " + Olm.get_library_version().join(".") + " initialized"), this._init.resolve(), this.eventEmitter.emit(y.OLM_ID_KEY_READY, this._idKey);
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_54 = _a.sent();
                                    p.error("Failed to initialize Olm", e_54), this._init.reject(e_54);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        }); });
                    };
                    E.prototype._encryptKeyInfo = function (e) { var t = {}; return void 0 !== this._key && (t.key = !!this._key && r.a.fromByteArray(this._key), t.keyIndex = this._keyIndex), e.encrypt(JSON.stringify(t)); };
                    E.prototype._getParticipantOlmData = function (e) { return e[S] = e[S] || {}, e[S]; };
                    E.prototype._onConferenceLeft = function () {
                        return __awaiter(this, void 0, void 0, function () { var _i, _a, e_56; return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    p.debug("Conference left");
                                    return [4 /*yield*/, this._init];
                                case 1:
                                    _b.sent();
                                    for (_i = 0, _a = this._conf.getParticipants(); _i < _a.length; _i++) {
                                        e_56 = _a[_i];
                                        this._onParticipantLeft(e_56.getId(), e_56);
                                    }
                                    this._olmAccount && (this._olmAccount.free(), this._olmAccount = void 0);
                                    return [2 /*return*/];
                            }
                        }); });
                    };
                    E.prototype._onEndpointMessageReceived = function (e, t) {
                        return __awaiter(this, void 0, void 0, function () {
                            var n, i, s, e_57, t_51, e_58, t_52, o_4, a_4, c_1, e_59, t_53, e_60, t_54, e_61, o_5, c_2, e_62, t_55, e_63, n_37, o_6;
                            var _a, _b;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        if ("olm" !== t[h.d])
                                            return [2 /*return*/];
                                        if (!t.olm)
                                            return [2 /*return*/, void p.warn("Incorrectly formatted message")];
                                        return [4 /*yield*/, this._init];
                                    case 1:
                                        _d.sent();
                                        n = t.olm, i = e.getId(), s = this._getParticipantOlmData(e);
                                        switch (n.type) {
                                            case v:
                                                if (s.session)
                                                    p.warn("Participant " + i + " already has a session"), this._sendError(e, "Session already established");
                                                else {
                                                    e_57 = new Olm.Session;
                                                    e_57.create_outbound(this._olmAccount, n.data.idKey, n.data.otKey), s.session = e_57;
                                                    t_51 = (_a = {}, _a[h.d] = "olm", _a.olm = { type: _, data: { ciphertext: this._encryptKeyInfo(e_57), uuid: n.data.uuid } }, _a);
                                                    this._sendMessage(t_51, i), this.eventEmitter.emit(y.PARTICIPANT_E2EE_CHANNEL_READY, i);
                                                }
                                                break;
                                            case _:
                                                if (s.session)
                                                    p.warn("Participant " + i + " already has a session"), this._sendError(e, "No session found");
                                                else if (n.data.uuid === s.pendingSessionUuid) {
                                                    e_58 = n.data.ciphertext, t_52 = this._reqs.get(n.data.uuid), o_4 = new Olm.Session;
                                                    o_4.create_inbound(this._olmAccount, e_58.body), this._olmAccount.remove_one_time_keys(o_4);
                                                    a_4 = o_4.decrypt(e_58.type, e_58.body);
                                                    s.session = o_4, s.pendingSessionUuid = void 0, this.eventEmitter.emit(y.PARTICIPANT_E2EE_CHANNEL_READY, i), this._reqs.delete(n.data.uuid), t_52.resolve();
                                                    c_1 = b(a_4);
                                                    if (c_1.key) {
                                                        e_59 = r.a.toByteArray(c_1.key), t_53 = c_1.keyIndex;
                                                        s.lastKey = e_59, this.eventEmitter.emit(y.PARTICIPANT_KEY_UPDATED, i, e_59, t_53);
                                                    }
                                                }
                                                else
                                                    p.warn("Received ACK with the wrong UUID"), this._sendError(e, "Invalid UUID");
                                                break;
                                            case m:
                                                p.error(n.data.error);
                                                break;
                                            case f:
                                                if (s.session) {
                                                    e_60 = n.data.ciphertext, t_54 = b(s.session.decrypt(e_60.type, e_60.body));
                                                    if (void 0 !== t_54.key && void 0 !== t_54.keyIndex) {
                                                        e_61 = !!t_54.key && r.a.toByteArray(t_54.key), o_5 = t_54.keyIndex;
                                                        a()(s.lastKey, e_61) || (s.lastKey = e_61, this.eventEmitter.emit(y.PARTICIPANT_KEY_UPDATED, i, e_61, o_5));
                                                        c_2 = (_b = {}, _b[h.d] = "olm", _b.olm = { type: g, data: { ciphertext: this._encryptKeyInfo(s.session), uuid: n.data.uuid } }, _b);
                                                        this._sendMessage(c_2, i);
                                                    }
                                                }
                                                else
                                                    p.debug("Received key info message from " + i + " but we have no session for them!"), this._sendError(e, "No session found while processing key-info");
                                                break;
                                            case g: if (s.session) {
                                                e_62 = n.data.ciphertext, t_55 = b(s.session.decrypt(e_62.type, e_62.body));
                                                if (void 0 !== t_55.key && void 0 !== t_55.keyIndex) {
                                                    e_63 = !!t_55.key && r.a.toByteArray(t_55.key), n_37 = t_55.keyIndex;
                                                    a()(s.lastKey, e_63) || (s.lastKey = e_63, this.eventEmitter.emit(y.PARTICIPANT_KEY_UPDATED, i, e_63, n_37));
                                                }
                                                o_6 = this._reqs.get(n.data.uuid);
                                                this._reqs.delete(n.data.uuid), o_6.resolve();
                                            }
                                            else
                                                p.debug("Received key info ack message from " + i + " but we have no session for them!"), this._sendError(e, "No session found while processing key-info-ack");
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                    E.prototype._onParticipantLeft = function (e, t) { p.debug("Participant " + e + " left"), this.clearParticipantSession(t); };
                    E.prototype._onParticipantPropertyChanged = function (e, t, n, i) {
                        return __awaiter(this, void 0, void 0, function () {
                            var _a, t_56, n_38, _b, t_57, i_18, r_8;
                            var _d;
                            return __generator(this, function (_f) {
                                switch (_f.label) {
                                    case 0:
                                        _a = t;
                                        switch (_a) {
                                            case "e2ee.enabled": return [3 /*break*/, 1];
                                        }
                                        return [3 /*break*/, 6];
                                    case 1:
                                        if (!(i && this._conf.isE2EEEnabled())) return [3 /*break*/, 6];
                                        t_56 = this._conf.myUserId(), n_38 = e.getId();
                                        return [4 /*yield*/, e.getFeatures()];
                                    case 2:
                                        if (!((_f.sent()).has(h.b) && t_56 < n_38)) return [3 /*break*/, 6];
                                        _b = this._sessionInitialization;
                                        if (!_b) return [3 /*break*/, 4];
                                        return [4 /*yield*/, this._sessionInitialization];
                                    case 3:
                                        _b = (_f.sent());
                                        _f.label = 4;
                                    case 4:
                                        _b;
                                        return [4 /*yield*/, this._sendSessionInit(e)];
                                    case 5:
                                        _f.sent();
                                        t_57 = this._getParticipantOlmData(e), i_18 = Object(c.a)(), r_8 = (_d = {}, _d[h.d] = "olm", _d.olm = { type: f, data: { ciphertext: this._encryptKeyInfo(t_57.session), uuid: i_18 } }, _d);
                                        this._sendMessage(r_8, n_38);
                                        _f.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        });
                    };
                    E.prototype._sendError = function (e, t) {
                        var _a;
                        var n = e.getId(), i = (_a = {}, _a[h.d] = "olm", _a.olm = { type: m, data: { error: t } }, _a);
                        this._sendMessage(i, n);
                    };
                    E.prototype._sendMessage = function (e, t) { this._conf.sendMessage(e, t); };
                    E.prototype._sendSessionInit = function (e) {
                        var _a;
                        var _this = this;
                        var t = e.getId(), n = this._getParticipantOlmData(e);
                        if (n.session)
                            return p.warn("Tried to send session-init to " + t + " but we already have a session"), Promise.reject();
                        if (void 0 !== n.pendingSessionUuid)
                            return p.warn("Tried to send session-init to " + t + " but we already have a pending session"), Promise.reject();
                        this._olmAccount.generate_one_time_keys(1);
                        var i = JSON.parse(this._olmAccount.one_time_keys()), r = Object.values(i.curve25519)[0];
                        if (!r)
                            return Promise.reject(new Error("No one-time-keys generated"));
                        this._olmAccount.mark_keys_as_published();
                        var s = Object(c.a)(), o = (_a = {}, _a[h.d] = "olm", _a.olm = { type: v, data: { idKey: this._idKey, otKey: r, uuid: s } }, _a), a = new u.a;
                        return a.setRejectTimeout(5e3), a.catch(function () { _this._reqs.delete(s), n.pendingSessionUuid = void 0; }), this._reqs.set(s, a), this._sendMessage(o, t), n.pendingSessionUuid = s, a;
                    };
                    return E;
                }(l.a));  function b(e) { try {
                return JSON.parse(e);
            }
            catch (e) {
                return {};
            } } E.events = y; }).call(this, "modules/e2ee/OlmAdapter.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return f; })); var i = n(4), r = n(73), s = n.n(r), o = n(0), a = n(7), c = n.n(a), d = n(3), u = n(47), l = n(94), h = n(55), p = n(74); var m = Object(i.getLogger)(e);
                var f = /** @class */ (function () {
                    function f(e) {
                        var _this = this;
                        this.conference = e, this._conferenceJoined = !1, this._enabled = !1, this._initialized = !1, this._key = void 0, this._enabling = void 0, this._e2eeCtx = new l.a, this._olmAdapter = new h.a(e), this._ratchetKey = s()(this._ratchetKeyImpl, 5e3), this._rotateKey = s()(this._rotateKeyImpl, 5e3), this.conference.on(o.CONFERENCE_JOINED, function () { _this._conferenceJoined = !0; }), this.conference.on(o.PARTICIPANT_PROPERTY_CHANGED, this._onParticipantPropertyChanged.bind(this)), this.conference.on(o.USER_JOINED, this._onParticipantJoined.bind(this)), this.conference.on(o.USER_LEFT, this._onParticipantLeft.bind(this)), this.conference.on(o._MEDIA_SESSION_STARTED, this._onMediaSessionStarted.bind(this)), this.conference.on(o.TRACK_ADDED, function (e) { return e.isLocal() && _this._onLocalTrackAdded(e); }), this.conference.rtc.on(c.a.REMOTE_TRACK_ADDED, function (e, t) { return _this._setupReceiverE2EEForTrack(t, e); }), this.conference.on(o.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this)), this._olmAdapter.on(h.a.events.OLM_ID_KEY_READY, this._onOlmIdKeyReady.bind(this)), this._olmAdapter.on(h.a.events.PARTICIPANT_E2EE_CHANNEL_READY, this._onParticipantE2EEChannelReady.bind(this)), this._olmAdapter.on(h.a.events.PARTICIPANT_KEY_UPDATED, this._onParticipantKeyUpdated.bind(this));
                    }
                    f.isSupported = function (e) { return d.a.supportsInsertableStreams() && h.a.isSupported() && !(e.testing && e.testing.disableE2EE); };
                    f.prototype.isEnabled = function () { return this._enabled; };
                    f.prototype.setEnabled = function (e) {
                        return __awaiter(this, void 0, void 0, function () { var _a, _b, t; return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    if (e === this._enabled)
                                        return [2 /*return*/];
                                    _a = this._enabling;
                                    if (!_a) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this._enabling];
                                case 1:
                                    _a = (_d.sent());
                                    _d.label = 2;
                                case 2:
                                    _a, this._enabling = new u.a, this._enabled = e;
                                    _b = e;
                                    if (!_b) return [3 /*break*/, 4];
                                    return [4 /*yield*/, this._olmAdapter.initSessions()];
                                case 3:
                                    _b = (_d.sent());
                                    _d.label = 4;
                                case 4:
                                    _b, this.conference.setLocalParticipantProperty("e2ee.enabled", e), !this._initialized && e && (this.conference._restartMediaSessions(), this._initialized = !0), this._key = !!e && this._generateKey();
                                    return [4 /*yield*/, this._olmAdapter.updateKey(this._key)];
                                case 5:
                                    t = _d.sent();
                                    this._e2eeCtx.setKey(this.conference.myUserId(), this._key, t), this._enabling.resolve();
                                    return [2 /*return*/];
                            }
                        }); });
                    };
                    f.prototype._generateKey = function () { return window.crypto.getRandomValues(new Uint8Array(32)); };
                    f.prototype._onLocalTrackAdded = function (e) { for (var _i = 0, _a = this.conference._getMediaSessions(); _i < _a.length; _i++) {
                        var t_58 = _a[_i];
                        this._setupSenderE2EEForTrack(t_58, e);
                    } };
                    f.prototype._onMediaSessionStarted = function (e) { var t = this.conference.getLocalTracks(); for (var _i = 0, t_59 = t; _i < t_59.length; _i++) {
                        var n_39 = t_59[_i];
                        this._setupSenderE2EEForTrack(e, n_39);
                    } };
                    f.prototype._onOlmIdKeyReady = function (e) { m.debug("Olm id key ready: " + e), this.conference.setLocalParticipantProperty("e2ee.idKey", e); };
                    f.prototype._onParticipantJoined = function (e) { m.debug("Participant " + e + " joined"), this._conferenceJoined && this._enabled && this._ratchetKey(); };
                    f.prototype._onParticipantLeft = function (e) { m.debug("Participant " + e + " left"), this._e2eeCtx.cleanup(e), this._enabled && this._rotateKey(); };
                    f.prototype._onParticipantE2EEChannelReady = function (e) { m.debug("E2EE channel with participant " + e + " is ready"); };
                    f.prototype._onParticipantKeyUpdated = function (e, t, n) { m.debug("Participant " + e + " updated their key"), this._e2eeCtx.setKey(e, t, n); };
                    f.prototype._onParticipantPropertyChanged = function (e, t, n, i) {
                        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (t) {
                                case "e2ee.idKey":
                                    m.debug("Participant " + e.getId() + " updated their id key: " + i);
                                    break;
                                case "e2ee.enabled": !i && this._enabled && (this._olmAdapter.clearParticipantSession(e), this._rotateKey());
                            }
                            return [2 /*return*/];
                        }); });
                    };
                    f.prototype._ratchetKeyImpl = function () {
                        return __awaiter(this, void 0, void 0, function () { var e, t, n; return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    m.debug("Ratchetting key");
                                    return [4 /*yield*/, Object(p.a)(this._key)];
                                case 1:
                                    e = _a.sent();
                                    return [4 /*yield*/, Object(p.b)(e)];
                                case 2:
                                    t = _a.sent();
                                    this._key = new Uint8Array(t);
                                    n = this._olmAdapter.updateCurrentKey(this._key);
                                    this._e2eeCtx.setKey(this.conference.myUserId(), this._key, n);
                                    return [2 /*return*/];
                            }
                        }); });
                    };
                    f.prototype._rotateKeyImpl = function () {
                        return __awaiter(this, void 0, void 0, function () { var e; return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    m.debug("Rotating key"), this._key = this._generateKey();
                                    return [4 /*yield*/, this._olmAdapter.updateKey(this._key)];
                                case 1:
                                    e = _a.sent();
                                    this._e2eeCtx.setKey(this.conference.myUserId(), this._key, e);
                                    return [2 /*return*/];
                            }
                        }); });
                    };
                    f.prototype._setupReceiverE2EEForTrack = function (e, t) { if (!this._enabled)
                        return; var n = e.findReceiverForTrack(t.track); n ? this._e2eeCtx.handleReceiver(n, t.getType(), t.getParticipantId()) : m.warn("Could not handle E2EE for " + t + ": receiver not found in: " + e); };
                    f.prototype._setupSenderE2EEForTrack = function (e, t) { if (!this._enabled)
                        return; var n = e.peerconnection, i = n && n.findSenderForTrack(t.track); i ? this._e2eeCtx.handleSender(i, t.getType(), t.getParticipantId()) : m.warn("Could not handle E2EE for " + t + ": sender not found in " + n); };
                    f.prototype._trackMuteChanged = function (e) { if (d.a.doesVideoMuteByStreamRemove() && e.isLocal() && e.isVideoTrack() && !e.isMuted())
                        for (var _i = 0, _a = this.conference._getMediaSessions(); _i < _a.length; _i++) {
                            var t_60 = _a[_i];
                            this._setupSenderE2EEForTrack(t_60, e);
                        } };
                    return f;
                }());  }).call(this, "modules/e2ee/E2EEncryption.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return C; })); var i = n(4), r = n(2), s = n(23), o = n(8), a = n(1), c = n.n(a), d = n(6), u = n(106), l = n(11), h = n.n(l), p = n(108), m = n(3), f = n(109), g = n(34), _ = n(63), v = n(17), S = n(59), y = n(9), E = n(110), b = n(41); var T = Object(i.getLogger)(e);
                var C = /** @class */ (function (_super) {
                    __extends(C, _super);
                    function C(e, t, n, i, r, s, o, a) {
                        var _this = this;
                        _this = _super.call(this, e, t, n, i, r, s, a) || this, _this._bridgeSessionId = null, _this._cachedOldLocalSdp = void 0, _this._cachedNewLocalSdp = void 0, _this._iceCheckingStartedTimestamp = null, _this._gatheringStartedTimestamp = null, _this.localRecvMaxFrameHeight = void 0, _this._localVideoActive = !0, _this._remoteVideoActive = !0, _this._gatheringReported = !1, _this.lasticecandidate = !1, _this.closed = !1, _this.isP2P = o, _this.remoteRecvMaxFrameHeight = void 0, _this.signalingLayer = new E.a, _this.modificationQueue = new u.a, _this.wasConnected = !1, _this.establishmentDuration = void 0, _this._xmppListeners = [], _this._xmppListeners.push(i.addEventListener(b.a.Events.CONN_STATUS_CHANGED, _this.onXmppStatusChanged.bind(_this))), _this._removeSenderVideoConstraintsChangeListener = void 0;
                        return _this;
                    }
                    C.parseVideoSenders = function (e) { var t = e.find('>content[name="video"]'); if (t.length) {
                        var e_64 = t[0].getAttribute("senders");
                        if ("both" === e_64 || "initiator" === e_64 || "responder" === e_64 || "none" === e_64)
                            return e_64;
                    } return null; };
                    C.parseMaxFrameHeight = function (e) { var t = e.find('>content[name="video"]>max-frame-height'); return t.length ? Number(t.text()) : null; };
                    C.prototype._assertNotEnded = function () { return this.state !== g.b; };
                    C.prototype.doInitialize = function (e) {
                        var _this = this;
                        this.failICE = Boolean(e.failICE), this.lasticecandidate = !1, this.options = e, this.isReconnect = !1, this.wasstable = !1, this.webrtcIceUdpDisable = Boolean(e.webrtcIceUdpDisable), this.webrtcIceTcpDisable = Boolean(e.webrtcIceTcpDisable);
                        var t = { disableRtx: e.disableRtx };
                        if (e.gatherStats && (t.maxstats = 300), t.capScreenshareBitrate = !1, t.enableInsertableStreams = e.enableInsertableStreams, t.videoQuality = e.videoQuality, t.forceTurnRelay = e.forceTurnRelay, this.isP2P) {
                            t.disableSimulcast = !0;
                            var n_40 = this._abtestSuspendVideoEnabled(e);
                            void 0 !== n_40 && (t.abtestSuspendVideo = n_40);
                        }
                        else
                            t.disableSimulcast = e.disableSimulcast || e.preferH264 && !e.disableH264 || e.videoQuality && e.videoQuality.preferredCodec === s.H264, e.testing && e.testing.capScreenshareBitrate && "number" == typeof e.testing.capScreenshareBitrate && (t.capScreenshareBitrate = Math.random() < e.testing.capScreenshareBitrate, d.a.analytics.addPermanentProperties({ capScreenshareBitrate: t.capScreenshareBitrate }));
                        e.startSilent && (t.startSilent = !0), this.peerconnection = this.rtc.createPeerConnection(this.signalingLayer, this.iceConfig, this.isP2P, t), this.peerconnection.onicecandidate = function (e) { if (!e)
                            return; var t = e.candidate, n = window.performance.now(); if (t) {
                            null === _this._gatheringStartedTimestamp && (_this._gatheringStartedTimestamp = n);
                            var e_65 = t.protocol;
                            if ("string" == typeof e_65)
                                if (e_65 = e_65.toLowerCase(), "tcp" === e_65 || "ssltcp" === e_65) {
                                    if (_this.webrtcIceTcpDisable)
                                        return;
                                }
                                else if ("udp" === e_65 && _this.webrtcIceUdpDisable)
                                    return;
                        }
                        else
                            _this._gatheringReported || (d.a.sendAnalytics(o.o, { phase: "gathering", value: n - _this._gatheringStartedTimestamp, p2p: _this.isP2P, initiator: _this.isInitiator }), _this._gatheringReported = !0); _this.sendIceCandidate(t); }, this.peerconnection.onsignalingstatechange = function () { "stable" === _this.peerconnection.signalingState ? _this.wasstable = !0 : "closed" !== _this.peerconnection.signalingState && "closed" !== _this.peerconnection.connectionState || _this.room.eventEmitter.emit(c.a.SUSPEND_DETECTED, _this); }, this.peerconnection.oniceconnectionstatechange = function () { var e = window.performance.now(); switch ((_this.isP2P || (_this.room.connectionTimes["ice.state." + _this.peerconnection.iceConnectionState] = e), T.log("(TIME) ICE " + _this.peerconnection.iceConnectionState + (" P2P? " + _this.isP2P + ":\t"), e), d.a.sendAnalytics(o.q, { p2p: _this.isP2P, state: _this.peerconnection.iceConnectionState, signaling_state: _this.peerconnection.signalingState, reconnect: _this.isReconnect, value: e }), _this.room.eventEmitter.emit(c.a.ICE_CONNECTION_STATE_CHANGED, _this, _this.peerconnection.iceConnectionState), _this.peerconnection.iceConnectionState)) {
                            case "checking":
                                _this._iceCheckingStartedTimestamp = e;
                                break;
                            case "connected":
                                if ("stable" === _this.peerconnection.signalingState) {
                                    var e_66 = !_this.options.enableIceRestart && _this.room.supportsRestartByTerminate();
                                    (_this.isReconnect || e_66) && _this.room.eventEmitter.emit(c.a.CONNECTION_RESTORED, _this);
                                }
                                if (!_this.wasConnected && _this.wasstable) {
                                    d.a.sendAnalytics(o.o, { phase: "checking", value: e - _this._iceCheckingStartedTimestamp, p2p: _this.isP2P, initiator: _this.isInitiator });
                                    var t_61 = Math.min(_this._iceCheckingStartedTimestamp, _this._gatheringStartedTimestamp);
                                    _this.establishmentDuration = e - t_61, d.a.sendAnalytics(o.o, { phase: "establishment", value: _this.establishmentDuration, p2p: _this.isP2P, initiator: _this.isInitiator }), _this.wasConnected = !0, _this.room.eventEmitter.emit(c.a.CONNECTION_ESTABLISHED, _this);
                                }
                                _this.isReconnect = !1;
                                break;
                            case "disconnected":
                                _this.isReconnect = !0, _this.wasstable && _this.room.eventEmitter.emit(c.a.CONNECTION_INTERRUPTED, _this);
                                break;
                            case "failed": _this.room.eventEmitter.emit(c.a.CONNECTION_ICE_FAILED, _this);
                        } }, this.peerconnection.onnegotiationneeded = function () { var e = _this.peerconnection.signalingState, t = _this.peerconnection.remoteDescription; if (m.a.usesUnifiedPlan() && "stable" === e && t && "string" == typeof t.sdp) {
                            T.debug("onnegotiationneeded fired on " + _this.peerconnection + " in state: " + e);
                            var t_62 = function (e) { var t = new v.a(_this.peerconnection.localDescription.sdp); _this._renegotiate().then(function () { var n = new v.a(_this.peerconnection.localDescription.sdp); _this.notifyMySSRCUpdate(t, n), e(); }, e); };
                            _this.modificationQueue.push(t_62, function (e) { e ? T.error("onnegotiationneeded error on " + _this, e) : T.debug("onnegotiationneeded executed - OK on " + _this); });
                        } }, this.signalingLayer.setChatRoom(this.room);
                    };
                    C.prototype.getRemoteRecvMaxFrameHeight = function () { if (this.isP2P)
                        return this.remoteRecvMaxFrameHeight; };
                    C.prototype.sendIceCandidate = function (e) {
                        var _this = this;
                        var t = new v.a(this.peerconnection.localDescription.sdp);
                        if (e && e.candidate.length && !this.lasticecandidate) {
                            var n_41 = y.a.iceparams(t.media[e.sdpMLineIndex], t.session), i_19 = y.a.candidateToJingle(e.candidate);
                            if (!n_41 || !i_19) {
                                var e_67 = "failed to get ice && jcand";
                                return h.a.callErrorHandler(new Error(e_67)), void T.error(e_67);
                            }
                            n_41.xmlns = "urn:xmpp:jingle:transports:ice-udp:1", this.usedrip ? (0 === this.dripContainer.length && setTimeout(function () { 0 !== _this.dripContainer.length && (_this.sendIceCandidates(_this.dripContainer), _this.dripContainer = []); }, 20), this.dripContainer.push(e)) : this.sendIceCandidates([e]);
                        }
                        else
                            T.log("sendIceCandidate: last candidate."), this.lasticecandidate = !0;
                    };
                    C.prototype.sendIceCandidates = function (e) { if (!this._assertNotEnded("sendIceCandidates"))
                        return; T.log("sendIceCandidates", e); var t = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "transport-info", initiator: this.initiatorJid, sid: this.sid }), n = new v.a(this.peerconnection.localDescription.sdp); var _loop_6 = function (i_20) {
                        var r_9 = e.filter(function (e) { return e.sdpMLineIndex === i_20; }), s_6 = y.a.parseMLine(n.media[i_20].split("\r\n")[0]);
                        if (r_9.length > 0) {
                            var e_68 = y.a.iceparams(n.media[i_20], n.session);
                            e_68.xmlns = "urn:xmpp:jingle:transports:ice-udp:1", t.c("content", { creator: this_4.initiatorJid === this_4.localJid ? "initiator" : "responder", name: r_9[0].sdpMid ? r_9[0].sdpMid : s_6.media }).c("transport", e_68);
                            for (var e_69 = 0; e_69 < r_9.length; e_69++) {
                                var n_42 = y.a.candidateToJingle(r_9[e_69].candidate);
                                this_4.failICE && (n_42.ip = "1.1.1.1"), t.c("candidate", n_42).up();
                            }
                            var o_7 = y.a.findLine(n.media[i_20], "a=fingerprint:", n.session);
                            if (o_7) {
                                var e_70 = y.a.parseFingerprint(o_7);
                                e_70.required = !0, t.c("fingerprint", { xmlns: "urn:xmpp:jingle:apps:dtls:0" }).t(e_70.fingerprint), delete e_70.fingerprint, t.attrs(e_70), t.up();
                            }
                            t.up(), t.up();
                        }
                    }; var this_4 = this; for (var i_20 = 0; i_20 < n.media.length; i_20++) {
                        _loop_6(i_20);
                    } this.connection.sendIQ(t, null, this.newJingleErrorHandler(t), 1e4); };
                    C.prototype.sendIceFailedNotification = function () { var e = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "session-info", initiator: this.initiatorJid, sid: this.sid }).c("ice-state", { xmlns: "http://jitsi.org/protocol/focus" }).t("failed").up(); this._bridgeSessionId && e.c("bridge-session", { xmlns: "http://jitsi.org/protocol/focus", id: this._bridgeSessionId }), this.connection.sendIQ2(e, { timeout: 65 }).catch(this.newJingleErrorHandler(e)); };
                    C.prototype.addIceCandidates = function (e) {
                        var _this = this;
                        if ("closed" === this.peerconnection.signalingState)
                            return void T.warn("Ignored add ICE candidate when in closed state");
                        var t = [];
                        if (e.find(">content>transport>candidate").each(function (e, n) { var i = y.a.candidateFromJingle(n); i = i.replace("\r\n", "").replace("a=", ""); var r = new RTCIceCandidate({ sdpMLineIndex: 0, sdpMid: "", candidate: i }); t.push(r); }), !t.length)
                            return void T.error("No ICE candidates to add ?", e[0] && e[0].outerHTML);
                        T.debug("Queued add (" + t.length + ") ICE candidates task..."), this.modificationQueue.push(function (e) { for (var _i = 0, t_63 = t; _i < t_63.length; _i++) {
                            var e_71 = t_63[_i];
                            _this.peerconnection.addIceCandidate(e_71).then(function () { return T.debug("addIceCandidate ok!"); }, function (e) { return T.error("addIceCandidate failed!", e); });
                        } e(), T.debug("ICE candidates task finished on " + _this); });
                    };
                    C.prototype.readSsrcInfo = function (e) {
                        var _this = this;
                        $(e).find('>description>source[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each(function (e, t) { var n = Number(t.getAttribute("ssrc")); _this.isP2P ? _this.signalingLayer.setSSRCOwner(n, r.Strophe.getResourceFromJid(_this.remoteJid)) : $(t).find('>ssrc-info[xmlns="http://jitsi.org/jitmeet"]').each(function (e, t) { var i = t.getAttribute("owner"); i && i.length && (isNaN(n) || n < 0 ? T.warn("Invalid SSRC " + n + " value received for " + i) : _this.signalingLayer.setSSRCOwner(n, r.Strophe.getResourceFromJid(i))); }); });
                    };
                    C.prototype.generateRecvonlySsrc = function () { this.peerconnection ? this.peerconnection.generateRecvonlySsrc() : T.error("Unable to generate recvonly SSRC - no peerconnection"); };
                    C.prototype.getConfiguredVideoCodec = function () { return this.peerconnection.getConfiguredVideoCodec(); };
                    C.prototype.acceptOffer = function (e, t, n, i) {
                        var _this = this;
                        this.setOfferAnswerCycle(e, function () { _this.sendSessionAccept(t, n); }, n, i);
                    };
                    C.prototype.invite = function (e) {
                        var _this = this;
                        if (e === void 0) { e = []; }
                        if (!this.isInitiator)
                            throw new Error("Trying to invite from the responder session");
                        T.debug("Queued invite task on " + this + "."), this.modificationQueue.push(function (t) { var n = []; for (var _i = 0, e_72 = e; _i < e_72.length; _i++) {
                            var t_64 = e_72[_i];
                            n.push(_this.peerconnection.addTrack(t_64, _this.isInitiator));
                        } Promise.all(n).then(function () { return _this.peerconnection.createOffer(_this.mediaConstraints); }).then(function (e) { return _this.peerconnection.setLocalDescription(e); }).then(function () { _this.sendSessionInitiate(_this.peerconnection.localDescription.sdp); }).then(function () { return t(); }, function (e) { return t(e); }); }, function (e) { e ? T.error("invite error on " + _this, e) : T.debug("invite executed - OK on " + _this); });
                    };
                    C.prototype.sendSessionInitiate = function (e) { var t = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "session-initiate", initiator: this.initiatorJid, sid: this.sid }); new v.a(e).toJingle(t, this.isInitiator ? "initiator" : "responder"), t = t.tree(), T.info("Session-initiate: ", t), this.connection.sendIQ(t, function () { T.info('Got RESULT for "session-initiate"'); }, function (e) { T.error('"session-initiate" error', e); }, 1e4); };
                    C.prototype.setAnswer = function (e) { if (!this.isInitiator)
                        throw new Error("Trying to set an answer on the responder session"); this.setOfferAnswerCycle(e, function () { T.info("setAnswer - succeeded"); }, function (e) { T.error("setAnswer failed: ", e); }); };
                    C.prototype.setOfferAnswerCycle = function (e, t, n, i) {
                        var _this = this;
                        if (i === void 0) { i = []; }
                        T.debug("Queued setOfferAnswerCycle task on " + this), this.modificationQueue.push(function (t) { var n = []; for (var _i = 0, i_21 = i; _i < i_21.length; _i++) {
                            var e_73 = i_21[_i];
                            n.push(_this.peerconnection.addTrack(e_73, _this.isInitiator));
                        } var r = _this._processNewJingleOfferIq(e), s = _this.peerconnection.localDescription.sdp, o = $(e).find('>bridge-session[xmlns="http://jitsi.org/protocol/focus"]').attr("id"); o !== _this._bridgeSessionId && (_this._bridgeSessionId = o), Promise.all(n).then(function () { return _this._renegotiate(r.raw); }).then(function () { if (_this.state === g.c && (_this.state = g.a, !_this.isP2P || _this._localVideoActive && !_this.localRecvMaxFrameHeight || _this.sendContentModify()), s) {
                            var e_74 = new v.a(_this.peerconnection.localDescription.sdp);
                            _this.notifyMySSRCUpdate(new v.a(s), e_74);
                        } }).then(function () { return t(); }, function (e) { return t(e); }); }, function (e) { e ? (T.error("setOfferAnswerCycle task on " + _this + " failed: " + e), n(e)) : (T.debug("setOfferAnswerCycle task on " + _this + " done."), t()); });
                    };
                    C.prototype.setVideoCodecs = function (e, t) {
                        var _this = this;
                        if (e === void 0) { e = null; }
                        if (t === void 0) { t = null; }
                        var n = this.peerconnection.getConfiguredVideoCodec();
                        if (this._assertNotEnded() && e !== n) {
                            T.info(this + " Switching video codec from " + n + " to " + e), this.peerconnection.setVideoCodecs(e, t);
                            var i_22 = function (e) { _this._renegotiate().then(function () { return (T.debug("setVideoCodecs task on " + _this + " is done."), e()); }, function (t) { return (T.error("setVideoCodecs task on " + _this + " failed: " + t), e(t)); }); };
                            T.debug("Queued setVideoCodecs task on " + this), this.modificationQueue.push(i_22);
                        }
                    };
                    C.prototype.replaceTransport = function (e, t, n) {
                        var _this = this;
                        if (this.options.enableForcedReload) {
                            var e_75 = new v.a(this.peerconnection.localDescription.sdp);
                            return this.sendTransportAccept(e_75, t, n), void this.room.eventEmitter.emit(c.a.CONNECTION_RESTARTED, this);
                        }
                        this.room.eventEmitter.emit(c.a.ICE_RESTARTING, this);
                        var i = e.clone();
                        e.find(">content[name='data']").attr("senders", "rejected"), e.find(">content>description>source").remove(), e.find(">content>description>ssrc-group").remove();
                        var r = e.find(">content>transport>fingerprint");
                        r.attr("hash", "sha-1"), r.text("00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00"), this.setOfferAnswerCycle(e, function () { _this.setOfferAnswerCycle(i, function () { var e = new v.a(_this.peerconnection.localDescription.sdp); _this.sendTransportAccept(e, t, n), _this.room.eventEmitter.emit(c.a.ICE_RESTART_SUCCESS, _this, i); }, n); }, n);
                    };
                    C.prototype.sendSessionAccept = function (e, t) {
                        var _this = this;
                        var n = new v.a(this.peerconnection.localDescription.sdp);
                        var i = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "session-accept", initiator: this.initiatorJid, responder: this.responderJid, sid: this.sid });
                        this.webrtcIceTcpDisable && (n.removeTcpCandidates = !0), this.webrtcIceUdpDisable && (n.removeUdpCandidates = !0), this.failICE && (n.failICE = !0), n.toJingle(i, this.initiatorJid === this.localJid ? "initiator" : "responder", null), i = i.tree(), T.info("Sending session-accept", i), this.connection.sendIQ(i, e, this.newJingleErrorHandler(i, function (e) { t(e), _this.room.eventEmitter.emit(c.a.SESSION_ACCEPT_TIMEOUT, _this); }), 1e4);
                    };
                    C.prototype.sendContentModify = function () { var e = this.localRecvMaxFrameHeight, t = this._localVideoActive ? "both" : "none"; var n = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "content-modify", initiator: this.initiatorJid, sid: this.sid }).c("content", { name: "video", senders: t }); void 0 !== e && (n = n.c("max-frame-height", { xmlns: "http://jitsi.org/jitmeet/video" }).t(e)), T.info(this + " sending content-modify, video senders: " + t + ", max frame height: " + e), this.connection.sendIQ(n, null, this.newJingleErrorHandler(n), 1e4); };
                    C.prototype.setReceiverVideoConstraint = function (e) { T.info(this + " setReceiverVideoConstraint - max frame height: " + e), this.localRecvMaxFrameHeight = e, this.isP2P ? this.state === g.a && this.sendContentModify() : this.rtc.setReceiverVideoConstraint(e); };
                    C.prototype.sendTransportAccept = function (e, t, n) {
                        var _this = this;
                        var i = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "transport-accept", initiator: this.initiatorJid, sid: this.sid });
                        e.media.forEach(function (t, n) { var r = y.a.parseMLine(t.split("\r\n")[0]); i.c("content", { creator: _this.initiatorJid === _this.localJid ? "initiator" : "responder", name: r.media }), e.transportToJingle(n, i), i.up(); }), i = i.tree(), T.info("Sending transport-accept: ", i), this.connection.sendIQ(i, t, this.newJingleErrorHandler(i, n), 1e4);
                    };
                    C.prototype.sendTransportReject = function (e, t) { var n = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "transport-reject", initiator: this.initiatorJid, sid: this.sid }); n = n.tree(), T.info("Sending 'transport-reject", n), this.connection.sendIQ(n, e, this.newJingleErrorHandler(n, t), 1e4); };
                    C.prototype.setSenderMaxBitrates = function () { return this._assertNotEnded() ? this.peerconnection.setMaxBitRate() : Promise.resolve(); };
                    C.prototype.setSenderVideoConstraint = function (e) { if (this._assertNotEnded()) {
                        if (T.info(this + " setSenderVideoConstraint: " + e), !this.isP2P && m.a.isReactNative() && void 0 !== e) {
                            var t_65 = e > 0;
                            return this.setMediaTransferActive(!0, t_65);
                        }
                        return this.peerconnection.setSenderVideoConstraint(e);
                    } return Promise.resolve(); };
                    C.prototype.setSenderVideoDegradationPreference = function () { return this._assertNotEnded() ? this.peerconnection.setSenderVideoDegradationPreference() : Promise.resolve(); };
                    C.prototype.terminate = function (e, t, n) { if (this.state !== g.b) {
                        if (!n || Boolean(n.sendSessionTerminate)) {
                            var i_23 = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "session-terminate", initiator: this.initiatorJid, sid: this.sid }).c("reason").c(n && n.reason || "success").up();
                            n && n.reasonDescription ? i_23.c("text").t(n.reasonDescription).up().up() : i_23.up(), this._bridgeSessionId && i_23.c("bridge-session", { xmlns: "http://jitsi.org/protocol/focus", id: this._bridgeSessionId, restart: n && !0 === n.requestRestart }).up(), i_23 = i_23.tree(), T.info("Sending session-terminate", i_23), this.connection.sendIQ(i_23, e, this.newJingleErrorHandler(i_23, t), 1e4);
                        }
                        else
                            T.info("Skipped sending session-terminate for " + this);
                        this.connection.jingle.terminate(this.sid);
                    } };
                    C.prototype.onTerminated = function (e, t) { T.info("Session terminated " + this, e, t), this._xmppListeners.forEach(function (e) { return e(); }), this._xmppListeners = [], this._removeSenderVideoConstraintsChangeListener && this._removeSenderVideoConstraintsChangeListener(), this.close(); };
                    C.prototype.onXmppStatusChanged = function (e) { e === b.a.Status.CONNECTED && this._cachedOldLocalSdp && (T.info("Sending SSRC update on reconnect"), this.notifyMySSRCUpdate(this._cachedOldLocalSdp, this._cachedNewLocalSdp)); };
                    C.prototype._parseSsrcInfoFromSourceAdd = function (e, t) { var n = []; return $(e).each(function (e, i) { var r = $(i).attr("name"); var s = ""; $(i).find('ssrc-group[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each((function () { var e = this.getAttribute("semantics"), t = $(this).find(">source").map((function () { return this.getAttribute("ssrc"); })).get(); t.length && (s += "a=ssrc-group:" + e + " " + t.join(" ") + "\r\n"); })); $(i).find('source[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each((function () { var e = $(this).attr("ssrc"); t.containsSSRC(e) ? T.warn("Source-add request for existing SSRC: " + e) : $(this).find(">parameter").each((function () { s += "a=ssrc:" + e + " " + $(this).attr("name"), $(this).attr("value") && $(this).attr("value").length && (s += ":" + $(this).attr("value")), s += "\r\n"; })); })), t.media.forEach(function (e, t) { y.a.findLine(e, "a=mid:" + r) && (n[t] || (n[t] = ""), n[t] += s); }); }), n; };
                    C.prototype.addRemoteStream = function (e) { this._addOrRemoveRemoteStream(!0, e); };
                    C.prototype.removeRemoteStream = function (e) { this._addOrRemoveRemoteStream(!1, e); };
                    C.prototype.removeRemoteStreamsOnLeave = function (e) {
                        var _this = this;
                        var t = [];
                        var n = function (n) { var i = _this.peerconnection.getRemoteSourceInfoByParticipant(e); if (i.length) {
                            var r_10 = new v.a(_this.peerconnection.localDescription.sdp), s_7 = _this._processRemoteRemoveSource(i);
                            t = _this.peerconnection.removeRemoteTracks(e), _this._renegotiate(s_7.raw).then(function () { var e = new v.a(_this.peerconnection.localDescription.sdp); _this.notifyMySSRCUpdate(r_10, e), n(); }).catch(function (e) { return n(e); });
                        }
                        else
                            n(); };
                        return new Promise(function (i, r) { T.debug("Queued removeRemoteStreamsOnLeave task for participant " + e + " on " + _this), _this.modificationQueue.push(n, function (e) { e ? (T.error("removeRemoteStreamsOnLeave error on " + _this + ":", e), r(e)) : (T.info("removeRemoteStreamsOnLeave done on " + _this + "!"), i(t)); }); });
                    };
                    C.prototype._addOrRemoveRemoteStream = function (e, t) {
                        var _this = this;
                        var n = e ? "addRemoteStream" : "removeRemoteStream";
                        e && this.readSsrcInfo(t);
                        T.debug("Queued " + n + " task on " + this), this.modificationQueue.push(function (i) { if (!_this.peerconnection.localDescription || !_this.peerconnection.localDescription.sdp) {
                            var e_76 = n + " - localDescription not ready yet";
                            return T.error(e_76), void i(e_76);
                        } T.log("Processing " + n), T.log("ICE connection state: ", _this.peerconnection.iceConnectionState); var r = new v.a(_this.peerconnection.localDescription.sdp), s = new v.a(_this.peerconnection.remoteDescription.sdp), o = e ? _this._parseSsrcInfoFromSourceAdd(t, s) : _this._parseSsrcInfoFromSourceRemove(t, s), a = e ? _this._processRemoteAddSource(o) : _this._processRemoteRemoveSource(o); _this._renegotiate(a.raw).then(function () { var e = new v.a(_this.peerconnection.localDescription.sdp); T.log(n + " - OK, SDPs: ", r, e), _this.notifyMySSRCUpdate(r, e), i(); }, function (e) { T.error(n + " failed:", e), i(e); }); });
                    };
                    C.prototype._processNewJingleOfferIq = function (e) { var t = new v.a(""); return this.webrtcIceTcpDisable && (t.removeTcpCandidates = !0), this.webrtcIceUdpDisable && (t.removeUdpCandidates = !0), this.failICE && (t.failICE = !0), t.fromJingle(e), this.readSsrcInfo($(e).find(">content")), t; };
                    C.prototype._processRemoteRemoveSource = function (e) { var t = m.a.usesPlanB() ? new v.a(this.peerconnection.remoteDescription.sdp) : new v.a(this.peerconnection.peerconnection.remoteDescription.sdp); return e.forEach(function (e, n) { (e = e.split("\r\n")).pop(), m.a.usesPlanB() ? e.forEach(function (e) { t.media[n] = t.media[n].replace(e + "\r\n", ""); }) : e.forEach(function (e) { var n = t.media.findIndex(function (t) { return t.includes(e); }); n > -1 && (t.media[n] = t.media[n].replace(e + "\r\n", ""), m.a.isFirefox() && (t.media[n] = t.media[n].replace("a=sendonly", "a=inactive"))); }); }), t.raw = t.session + t.media.join(""), t; };
                    C.prototype._processRemoteAddSource = function (e) { var t = new v.a(this.peerconnection.remoteDescription.sdp); return e.forEach(function (e, n) { t.media[n] += e; }), t.raw = t.session + t.media.join(""), t; };
                    C.prototype._renegotiate = function (e) { if ("closed" === this.peerconnection.signalingState) {
                        var e_77 = new Error("Attempted to renegotiate in state closed");
                        return this.room.eventEmitter.emit(c.a.RENEGOTIATION_FAILED, e_77, this), Promise.reject(e_77);
                    } var t = e || this.peerconnection.remoteDescription.sdp; if (!t) {
                        var e_78 = new Error("Can not renegotiate without remote description, current state: " + this.state);
                        return this.room.eventEmitter.emit(c.a.RENEGOTIATION_FAILED, e_78, this), Promise.reject(e_78);
                    } var n = new RTCSessionDescription({ type: this.isInitiator ? "answer" : "offer", sdp: t }); return this.isInitiator ? this._initiatorRenegotiate(n) : this._responderRenegotiate(n); };
                    C.prototype._responderRenegotiate = function (e) {
                        var _this = this;
                        return T.debug("Renegotiate: setting remote description"), this.peerconnection.setRemoteDescription(e).then(function () { return (T.debug("Renegotiate: creating answer"), _this.peerconnection.createAnswer(_this.mediaConstraints).then(function (e) { return (T.debug("Renegotiate: setting local description"), _this.peerconnection.setLocalDescription(e)); })); });
                    };
                    C.prototype._initiatorRenegotiate = function (e) {
                        var _this = this;
                        return T.debug("Renegotiate: creating offer"), this.peerconnection.createOffer(this.mediaConstraints).then(function (t) { return (T.debug("Renegotiate: setting local description"), _this.peerconnection.setLocalDescription(t).then(function () { return (T.debug("Renegotiate: setting remote description"), _this.peerconnection.setRemoteDescription(e)); })); });
                    };
                    C.prototype.replaceTrack = function (e, t) {
                        var _this = this;
                        var n = function (n) { T.debug("replaceTrack worker started. oldTrack = " + e + ", newTrack = " + t + ", " + _this); var i = _this.peerconnection.localDescription.sdp; m.a.usesPlanB() && (_this.peerconnection.options.capScreenshareBitrate && e && t && t.isVideoTrack() && _this.peerconnection.clearRecvonlySsrc(), !e && t && t.isVideoTrack() ? _this.peerconnection.clearRecvonlySsrc() : e && e.isVideoTrack() && !t && (_this.peerconnection.clearRecvonlySsrc(), _this.peerconnection.generateRecvonlySsrc())), _this.peerconnection.replaceTrack(e, t).then(function (n) { var r = Promise.resolve(); return T.debug("TPC.replaceTrack finished. shouldRenegotiate = " + n + ", JingleSessionState = " + _this.state + ", " + _this), n && (e || t) && _this.state === g.a && (r = _this._renegotiate().then(function () { var e = new v.a(_this.peerconnection.localDescription.sdp); _this.notifyMySSRCUpdate(new v.a(i), e); })), r.then(function () { if (t && t.isVideoTrack())
                            return T.debug("replaceTrack worker: setSenderVideoDegradationPreference(), " + _this), _this.peerconnection.setSenderVideoDegradationPreference().then(function () { return (T.debug("replaceTrack worker: setSenderVideoConstraint(), " + _this), _this.peerconnection.setSenderVideoConstraint()); }).then(function () { return (T.debug("replaceTrack worker: setMaxBitRate(), " + _this), _this.peerconnection.setMaxBitRate()); }); }); }).then(function () { return n(); }, function (e) { return n(e); }); };
                        return new Promise(function (i, r) { T.debug("Queued replaceTrack task. Old track = " + e + ", new track = " + t + ", " + _this), _this.modificationQueue.push(n, function (e) { e ? (T.error("Replace track error on " + _this + ":", e), r(e)) : (T.info("Replace track done on " + _this + "!"), i()); }); });
                    };
                    C.prototype._parseSsrcInfoFromSourceRemove = function (e, t) { var n = []; return $(e).each(function (e, i) { var r = $(i).attr("name"); var s = ""; $(i).find('ssrc-group[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each((function () { var e = this.getAttribute("semantics"), t = $(this).find(">source").map((function () { return this.getAttribute("ssrc"); })).get(); t.length && (s += "a=ssrc-group:" + e + " " + t.join(" ") + "\r\n"); })); var o = []; $(i).find('source[xmlns="urn:xmpp:jingle:apps:rtp:ssma:0"]').each((function () { var e = $(this).attr("ssrc"); o.push(e); })), t.media.forEach(function (e, t) { y.a.findLine(e, "a=mid:" + r) && (n[t] || (n[t] = ""), o.forEach(function (i) { var r = y.a.findLines(e, "a=ssrc:" + i); r.length && (n[t] += r.join("\r\n") + "\r\n"); }), n[t] += s); }); }), n; };
                    C.prototype._verifyNoSSRCChanged = function (e, t) { var n = new v.a(this.peerconnection.localDescription.sdp); var i = new S.a(t, n); var r = i.getNewMedia(); if (Object.keys(r).length)
                        return T.error(this + " - some SSRC were added on " + e, r), !1; i = new S.a(n, t); var s = i.getNewMedia(); return !Object.keys(s).length || (T.error(this + " - some SSRCs were removed on " + e, s), !1); };
                    C.prototype.addTrackAsUnmute = function (e) {
                        var _this = this;
                        return this._addRemoveTrackAsMuteUnmute(!1, e).then(function () { if (e.isVideoTrack() && m.a.doesVideoMuteByStreamRemove())
                            return _this.setSenderMaxBitrates().then(function () { return _this.setSenderVideoDegradationPreference(); }).then(function () { return _this.setSenderVideoConstraint(); }); });
                    };
                    C.prototype.removeTrackAsMute = function (e) { return this._addRemoveTrackAsMuteUnmute(!0, e); };
                    C.prototype._addRemoveTrackAsMuteUnmute = function (e, t) {
                        var _this = this;
                        if (!t)
                            return Promise.reject('invalid "track" argument value');
                        var n = e ? "removeTrackMute" : "addTrackUnmute", i = function (i) { var r = _this.peerconnection; if (!r)
                            return void i("Error:  tried " + n + " track with no active peerconnection"); var s = r.localDescription.sdp; (e ? r.removeTrackMute(t) : r.addTrackUnmute(t)).then(function (e) { e && s && r.remoteDescription.sdp ? _this._renegotiate().then(function () { _this._verifyNoSSRCChanged(n, new v.a(s)), i(); }) : i(); }, i); };
                        return T.debug("Queued _addRemoveTrackAsMuteUnmute task on " + this + ". Operation - " + n), new Promise(function (e, t) { _this.modificationQueue.push(i, function (i) { i ? (T.error("_addRemoveTrackAsMuteUnmute failed. Operation - " + n + ", peerconnection = " + _this), t(i)) : (T.debug("_addRemoveTrackAsMuteUnmute done. Operation - " + n + ", peerconnection = " + _this), e()); }); });
                    };
                    C.prototype.setMediaTransferActive = function (e, t) {
                        var _this = this;
                        if (!this.peerconnection)
                            return Promise.reject('Can not modify transfer active state, before "initialize" is called');
                        var n = e ? "audio active" : "audio inactive", i = t ? "video active" : "video inactive";
                        T.info("Queued make " + i + ", " + n + " task...");
                        var r = function (n) { var i = _this.state === g.a, r = _this.peerconnection.setAudioTransferActive(e); _this._localVideoActive !== t && (_this._localVideoActive = t, _this.isP2P && i && _this.sendContentModify()); var s = _this.peerconnection.setVideoTransferActive(_this._localVideoActive && _this._remoteVideoActive); i && (r || s) ? _this._renegotiate().then(n, n) : n(); };
                        return new Promise(function (e, t) { _this.modificationQueue.push(r, function (r) { r ? (T.error("Make " + i + ", " + n + " task failed!"), t(r)) : (T.debug("Make " + i + ", " + n + " task done!"), e()); }); });
                    };
                    C.prototype.modifyContents = function (e) {
                        var _this = this;
                        var t = C.parseVideoSenders(e), n = C.parseMaxFrameHeight(e);
                        if (n && (T.info(this + " received remote max frame height: " + n), this.remoteRecvMaxFrameHeight = n, this.eventEmitter.emit(_.a.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this)), null === t)
                            return void T.error(this + ' - failed to parse video "senders" attribute in"content-modify" action');
                        T.debug(this + " queued \"content-modify\" task(video senders=\"" + t + "\")"), this.modificationQueue.push(function (e) { _this._assertNotEnded("content-modify") && _this._modifyRemoteVideoActive(t) ? _this._renegotiate().then(e, e) : e(); }, function (e) { e ? T.error('"content-modify" failed on PC - ' + _this, e) : T.debug("\"content-modify\" task(video senders=\"" + t + "\") done. PC = " + _this); });
                    };
                    C.prototype._modifyRemoteVideoActive = function (e) { var t = "both" === e || "initiator" === e && this.isInitiator || "responder" === e && !this.isInitiator; return t !== this._remoteVideoActive && (T.debug(this + " new remote video active: " + t), this._remoteVideoActive = t), this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive); };
                    C.prototype.notifyMySSRCUpdate = function (e, t) { if (this.state !== g.a)
                        return void T.warn("Skipping SSRC update in '" + this.state + " ' state."); if (!this.connection.connected)
                        return this._cachedOldLocalSdp || (this._cachedOldLocalSdp = e), this._cachedNewLocalSdp = t, void T.warn("Not sending SSRC update while the signaling is disconnected"); this._cachedOldLocalSdp = void 0, this._cachedNewLocalSdp = void 0; var n = new S.a(t, e); var i = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "source-remove", initiator: this.initiatorJid, sid: this.sid }); n.toJingle(i) ? (T.info("Sending source-remove", i.tree()), this.connection.sendIQ(i, null, this.newJingleErrorHandler(i), 1e4)) : T.log("removal not necessary"), n = new S.a(e, t); var s = Object(r.$iq)({ to: this.remoteJid, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: "source-add", initiator: this.initiatorJid, sid: this.sid }); n.toJingle(s) ? (T.info("Sending source-add", s.tree()), this.connection.sendIQ(s, null, this.newJingleErrorHandler(s), 1e4)) : T.log("addition not necessary"); };
                    C.prototype.newJingleErrorHandler = function (e, t) {
                        var _this = this;
                        return function (e) { var n = {}, i = $(e).find("error"); if (i.length) {
                            n.code = i.attr("code");
                            var t_66 = $(e).find("error :first");
                            t_66.length && (n.reason = t_66[0].tagName);
                            var r_11 = i.find(">text");
                            r_11.length && (n.msg = r_11.text());
                        } e || (n.reason = "timeout"), n.session = _this.toString(), t ? t(n) : _this.state === g.b && "item-not-found" === n.reason ? T.debug("Jingle error: " + JSON.stringify(n)) : h.a.callErrorHandler(new Error("Jingle error: " + JSON.stringify(n))); };
                    };
                    C.prototype.getIceConnectionState = function () { return this.peerconnection.getConnectionState(); };
                    C.prototype.close = function () {
                        var _this = this;
                        this.state = g.b, this.establishmentDuration = void 0, this.peerconnection && (this.peerconnection.onicecandidate = null, this.peerconnection.oniceconnectionstatechange = null, this.peerconnection.onnegotiationneeded = null, this.peerconnection.onsignalingstatechange = null), T.debug("Clearing modificationQueue on " + this + "..."), this.modificationQueue.clear(), T.debug("Queued PC close task on " + this + "..."), this.modificationQueue.push(function (e) { _this.signalingLayer.setChatRoom(null), _this.peerconnection && _this.peerconnection.close(), e(), T.debug("PC close task on " + _this + " done!"); }), T.debug("Shutdown modificationQueue on " + this + "!"), this.modificationQueue.shutdown();
                    };
                    C.prototype.toString = function () { return "JingleSessionPC[p2p=" + this.isP2P + ",initiator=" + this.isInitiator + ",sid=" + this.sid + "]"; };
                    C.prototype._abtestSuspendVideoEnabled = function (_a) {
                        var e = _a.abTesting;
                        if (!e || !e.enableSuspendVideoTest)
                            return;
                        var t = this._getInitiatorJid();
                        return Object(p.integerHash)(t) % 2 == 0;
                    };
                    return C;
                }(f.a));  }).call(this, "modules/xmpp/JingleSessionPC.js");
        }, function (e, t, n) {
            "use strict";
            t.byteLength = function (e) { var t = d(e), n = t[0], i = t[1]; return 3 * (n + i) / 4 - i; }, t.toByteArray = function (e) { var t, n, i = d(e), o = i[0], a = i[1], c = new s(function (e, t, n) { return 3 * (t + n) / 4 - n; }(0, o, a)), u = 0, l = a > 0 ? o - 4 : o; for (n = 0; n < l; n += 4)
                t = r[e.charCodeAt(n)] << 18 | r[e.charCodeAt(n + 1)] << 12 | r[e.charCodeAt(n + 2)] << 6 | r[e.charCodeAt(n + 3)], c[u++] = t >> 16 & 255, c[u++] = t >> 8 & 255, c[u++] = 255 & t; 2 === a && (t = r[e.charCodeAt(n)] << 2 | r[e.charCodeAt(n + 1)] >> 4, c[u++] = 255 & t); 1 === a && (t = r[e.charCodeAt(n)] << 10 | r[e.charCodeAt(n + 1)] << 4 | r[e.charCodeAt(n + 2)] >> 2, c[u++] = t >> 8 & 255, c[u++] = 255 & t); return c; }, t.fromByteArray = function (e) { for (var t, n = e.length, r = n % 3, s = [], o = 0, a = n - r; o < a; o += 16383)
                s.push(u(e, o, o + 16383 > a ? a : o + 16383)); 1 === r ? (t = e[n - 1], s.push(i[t >> 2] + i[t << 4 & 63] + "==")) : 2 === r && (t = (e[n - 2] << 8) + e[n - 1], s.push(i[t >> 10] + i[t >> 4 & 63] + i[t << 2 & 63] + "=")); return s.join(""); };
            for (var i = [], r = [], s = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, c = o.length; a < c; ++a)
                i[a] = o[a], r[o.charCodeAt(a)] = a;
            function d(e) { var t = e.length; if (t % 4 > 0)
                throw new Error("Invalid string. Length must be a multiple of 4"); var n = e.indexOf("="); return -1 === n && (n = t), [n, n === t ? 0 : 4 - n % 4]; }
            function u(e, t, n) { for (var r, s, o = [], a = t; a < n; a += 3)
                r = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), o.push(i[(s = r) >> 18 & 63] + i[s >> 12 & 63] + i[s >> 6 & 63] + i[63 & s]); return o.join(""); }
            r["-".charCodeAt(0)] = 62, r["_".charCodeAt(0)] = 63;
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return s; }));
            var i = n(9);
            function r(e, t) { if (!t)
                return !1; if (e.length !== t.length)
                return !1; for (var n_43 = 0, i_24 = e.length; n_43 < i_24; n_43++)
                if (e[n_43] instanceof Array && t[n_43] instanceof Array) {
                    if (!e[n_43].equals(t[n_43]))
                        return !1;
                }
                else if (e[n_43] !== t[n_43])
                    return !1; return !0; }
            function s(e, t) { if (this.mySDP = e, this.otherSDP = t, !e)
                throw new Error('"mySDP" is undefined!'); if (!t)
                throw new Error('"otherSDP" is undefined!'); }
            s.prototype.getNewMedia = function () { var e = this.mySDP.getMediaSsrcMap(), t = this.otherSDP.getMediaSsrcMap(), n = {}; return Object.keys(t).forEach(function (i) { var s = e[i], o = t[i]; s || !o ? (Object.keys(o.ssrcs).forEach(function (e) { if (-1 === Object.keys(s.ssrcs).indexOf(e))
                n[i] || (n[i] = { mediaindex: o.mediaindex, mid: o.mid, ssrcs: {}, ssrcGroups: [] }), n[i].ssrcs[e] = o.ssrcs[e];
            else if (o.ssrcs[e].lines && s.ssrcs[e].lines) {
                void 0 !== s.ssrcs[e].lines.find(function (e) { return -1 !== e.indexOf("msid"); }) !== (void 0 !== o.ssrcs[e].lines.find(function (e) { return -1 !== e.indexOf("msid"); })) && (n[i] || (n[i] = { mediaindex: o.mediaindex, mid: o.mid, ssrcs: {}, ssrcGroups: [] }), n[i].ssrcs[e] = o.ssrcs[e]);
            } }), o.ssrcGroups.forEach(function (e) { var t = !1; for (var n_44 = 0; n_44 < s.ssrcGroups.length; n_44++) {
                var i_25 = s.ssrcGroups[n_44];
                if (e.semantics === i_25.semantics && r(e.ssrcs, i_25.ssrcs)) {
                    t = !0;
                    break;
                }
            } t || (n[i] || (n[i] = { mediaindex: o.mediaindex, mid: o.mid, ssrcs: {}, ssrcGroups: [] }), n[i].ssrcGroups.push(e)); })) : n[i] = o; }), n; }, s.prototype.toJingle = function (e) { var t = this.getNewMedia(); var n = !1; return Object.keys(t).forEach(function (r) { n = !0; var s = t[r]; e.c("content", { name: s.mid }), e.c("description", { xmlns: "urn:xmpp:jingle:apps:rtp:1", media: s.mid }), Object.keys(s.ssrcs).forEach(function (t) { var n = s.ssrcs[t]; e.c("source", { xmlns: "urn:xmpp:jingle:apps:rtp:ssma:0" }), e.attrs({ ssrc: n.ssrc }), n.lines.forEach(function (t) { var n = t.indexOf(" "), r = t.substr(n + 1); if (e.c("parameter"), -1 === r.indexOf(":"))
                e.attrs({ name: r });
            else {
                var t_67 = r.split(":", 2), n_45 = t_67[0], s_8 = i.a.filterSpecialChars(t_67[1]);
                e.attrs({ name: n_45 }), e.attrs({ value: s_8 });
            } e.up(); }), e.up(); }), s.ssrcGroups.forEach(function (t) { t.ssrcs.length && (e.c("ssrc-group", { semantics: t.semantics, xmlns: "urn:xmpp:jingle:apps:rtp:ssma:0" }), t.ssrcs.forEach(function (t) { e.c("source", { ssrc: t }).up(); }), e.up()); }), e.up(), e.up(); }), n; };
        }, function (e, t) { var n, i, r = e.exports = {}; function s() { throw new Error("setTimeout has not been defined"); } function o() { throw new Error("clearTimeout has not been defined"); } function a(e) { if (n === setTimeout)
            return setTimeout(e, 0); if ((n === s || !n) && setTimeout)
            return n = setTimeout, setTimeout(e, 0); try {
            return n(e, 0);
        }
        catch (t) {
            try {
                return n.call(null, e, 0);
            }
            catch (t) {
                return n.call(this, e, 0);
            }
        } } !function () { try {
            n = "function" == typeof setTimeout ? setTimeout : s;
        }
        catch (e) {
            n = s;
        } try {
            i = "function" == typeof clearTimeout ? clearTimeout : o;
        }
        catch (e) {
            i = o;
        } }(); var c, d = [], u = !1, l = -1; function h() { u && c && (u = !1, c.length ? d = c.concat(d) : l = -1, d.length && p()); } function p() { if (!u) {
            var e = a(h);
            u = !0;
            for (var t = d.length; t;) {
                for (c = d, d = []; ++l < t;)
                    c && c[l].run();
                l = -1, t = d.length;
            }
            c = null, u = !1, function (e) { if (i === clearTimeout)
                return clearTimeout(e); if ((i === o || !i) && clearTimeout)
                return i = clearTimeout, clearTimeout(e); try {
                i(e);
            }
            catch (t) {
                try {
                    return i.call(null, e);
                }
                catch (t) {
                    return i.call(this, e);
                }
            } }(e);
        } } function m(e, t) { this.fun = e, this.array = t; } function f() { } r.nextTick = function (e) { var t = new Array(arguments.length - 1); if (arguments.length > 1)
            for (var n = 1; n < arguments.length; n++)
                t[n - 1] = arguments[n]; d.push(new m(e, t)), 1 !== d.length || u || a(p); }, m.prototype.run = function () { this.fun.apply(null, this.array); }, r.title = "browser", r.browser = !0, r.env = {}, r.argv = [], r.version = "", r.versions = {}, r.on = f, r.addListener = f, r.once = f, r.off = f, r.removeListener = f, r.removeAllListeners = f, r.emit = f, r.prependListener = f, r.prependOnceListener = f, r.listeners = function (e) { return []; }, r.binding = function (e) { throw new Error("process.binding is not supported"); }, r.cwd = function () { return "/"; }, r.chdir = function (e) { throw new Error("process.chdir is not supported"); }, r.umask = function () { return 0; }; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return r; }));
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            var i = null;
            function r(e, t, n) { this.stream = e, this.intervalId = null, this.intervalMilis = t, this.audioLevel = 0, this.callback = n; }
            window.AudioContext && (i = new AudioContext, i.suspend && i.suspend()), r.prototype.start = function () {
                var _this = this;
                if (!r.isLocalStatsSupported())
                    return;
                i.resume();
                var e = i.createAnalyser();
                e.smoothingTimeConstant = .8, e.fftSize = 2048;
                i.createMediaStreamSource(this.stream).connect(e), this.intervalId = setInterval(function () { var t = new Uint8Array(e.frequencyBinCount); e.getByteTimeDomainData(t); var n = function (e) { var t = 0; var n = e.length; for (var i_26 = 0; i_26 < n; i_26++)
                    t < e[i_26] && (t = e[i_26]); return parseFloat(((t - 127) / 128).toFixed(3)); }(t); _this.audioLevel = function (e, t) { var n = 0; var i = t - e; return n = i > .2 ? t - .2 : i < -.4 ? t + .4 : e, parseFloat(n.toFixed(3)); }(n, _this.audioLevel), _this.callback(_this.audioLevel); }, this.intervalMilis);
            }, r.prototype.stop = function () { this.intervalId && (clearInterval(this.intervalId), this.intervalId = null); }, r.isLocalStatsSupported = function () { return Boolean(i); };
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "ON", (function () { return i; })), n.d(t, "OFF", (function () { return r; }));
            var i = "on", r = "off";
        }, function (e, t, n) {
            "use strict";
            t.a = { REMOTE_VIDEO_CONSTRAINTS_CHANGED: "media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED" };
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return h; })); var i = n(18), r = n.n(i), s = n(4), o = n(15), a = n(5), c = n(3), d = n(10); var u = Object(s.getLogger)(e), l = { track_mute: "onmute", track_unmute: "onunmute", track_ended: "onended" };
                var h = /** @class */ (function (_super) {
                    __extends(h, _super);
                    function h(e, t, n, i, r, s) {
                        var _this = this;
                        _this = _super.call(this) || this, _this.addEventListener = _this.addListener, _this.removeEventListener = _this.off = _this.removeListener, _this.containers = [], _this.conference = e, _this.audioLevel = -1, _this.type = r, _this.track = n, _this.videoType = s, _this.handlers = new Map, _this.disposed = !1, _this._streamInactiveHandler = i, _this._setStream(t);
                        return _this;
                    }
                    h.prototype._addMediaStreamInactiveHandler = function (e) { c.a.isFirefox() ? this.track.onended = e : this.stream.oninactive = e; };
                    h.prototype._setHandler = function (e, t) { if (l.hasOwnProperty(e)) {
                        if (t ? this.handlers.set(e, t) : this.handlers.delete(e), this.stream)
                            for (var _i = 0, _a = this.stream.getTracks(); _i < _a.length; _i++) {
                                var n_46 = _a[_i];
                                n_46[l[e]] = t;
                            }
                    }
                    else
                        u.error("Invalid handler type " + e); };
                    h.prototype._unregisterHandlers = function () { if (this.stream) {
                        for (var _i = 0, _a = this.handlers.keys(); _i < _a.length; _i++) {
                            var e_79 = _a[_i];
                            for (var _b = 0, _d = this.stream.getVideoTracks(); _b < _d.length; _b++) {
                                var t_68 = _d[_b];
                                t_68[l[e_79]] = void 0;
                            }
                        }
                        this._streamInactiveHandler && this._addMediaStreamInactiveHandler(void 0);
                    }
                    else
                        u.warn(this + ": unable to unregister handlers - no stream object"); };
                    h.prototype._setStream = function (e) { if (this.stream !== e && (this.stream = e, this.stream)) {
                        for (var _i = 0, _a = this.handlers.keys(); _i < _a.length; _i++) {
                            var e_80 = _a[_i];
                            this._setHandler(e_80, this.handlers.get(e_80));
                        }
                        this._streamInactiveHandler && this._addMediaStreamInactiveHandler(this._streamInactiveHandler);
                    } };
                    h.prototype.getType = function () { return this.type; };
                    h.prototype.isAudioTrack = function () { return this.getType() === a.a; };
                    h.prototype.isWebRTCTrackMuted = function () { return this.track && this.track.muted; };
                    h.prototype.isVideoTrack = function () { return this.getType() === a.c; };
                    h.prototype.isLocal = function () { throw new Error("Not implemented by subclass"); };
                    h.prototype.isLocalAudioTrack = function () { return this.isAudioTrack() && this.isLocal(); };
                    h.prototype.getOriginalStream = function () { return this.stream; };
                    h.prototype.getStreamId = function () { return this.stream ? this.stream.id : null; };
                    h.prototype.getTrack = function () { return this.track; };
                    h.prototype.getTrackLabel = function () { return this.track.label; };
                    h.prototype.getTrackId = function () { return this.track ? this.track.id : null; };
                    h.prototype.getUsageLabel = function () { return this.isAudioTrack() ? "mic" : this.videoType ? this.videoType : "default"; };
                    h.prototype._maybeFireTrackAttached = function (e) { this.conference && e && this.conference._onTrackAttach(this, e); };
                    h.prototype.attach = function (e) { this.stream && (this._onTrackAttach(e), d.a.attachMediaStream(e, this.stream)), this.containers.push(e), this._maybeFireTrackAttached(e), this._attachTTFMTracker(e); };
                    h.prototype.detach = function (e) { for (var t_69 = this.containers, n_47 = t_69.length - 1; n_47 >= 0; --n_47) {
                        var i_27 = t_69[n_47];
                        e || (this._onTrackDetach(i_27), d.a.attachMediaStream(i_27, null)), e && i_27 !== e || t_69.splice(n_47, 1);
                    } e && (this._onTrackDetach(e), d.a.attachMediaStream(e, null)); };
                    h.prototype._onTrackAttach = function (e) { };
                    h.prototype._onTrackDetach = function (e) { };
                    h.prototype._attachTTFMTracker = function (e) { };
                    h.prototype.dispose = function () { return this.removeAllListeners(), this.disposed = !0, Promise.resolve(); };
                    h.prototype.isScreenSharing = function () { };
                    h.prototype.getId = function () { return this.stream ? d.a.getStreamID(this.stream) : null; };
                    h.prototype.isActive = function () { return void 0 === this.stream.active || this.stream.active; };
                    h.prototype.setAudioLevel = function (e, t) { var n = e; c.a.supportsReceiverStats() && void 0 !== t && this.isMuted() && (n = 0), this.audioLevel !== n ? (this.audioLevel = n, this.emit(o.TRACK_AUDIO_LEVEL_CHANGED, n, t)) : 0 === this.audioLevel && 0 === n && this.isLocal() && !this.isWebRTCTrackMuted() && this.emit(o.NO_AUDIO_INPUT, n); };
                    h.prototype.getMSID = function () { var e = this.getStreamId(), t = this.getTrackId(); return e && t ? e + " " + t : null; };
                    h.prototype.setAudioOutput = function (e) {
                        var _this = this;
                        return d.a.isDeviceChangeAvailable("output") ? this.isVideoTrack() ? Promise.resolve() : Promise.all(this.containers.map(function (t) { return t.setSinkId(e).catch(function (e) { throw u.warn("Failed to change audio output device on element. Default or previously set audio output device will be used.", t, e), e; }); })).then(function () { _this.emit(o.TRACK_AUDIO_OUTPUT_CHANGED, e); }) : Promise.reject(new Error("Audio output device change is not supported"));
                    };
                    return h;
                }(r.a));  }).call(this, "modules/RTC/JitsiTrack.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return c; }));
            var i = n(18), r = n.n(i), s = n(13), o = n(66), a = n(21);
            var c = /** @class */ (function (_super) {
                __extends(c, _super);
                function c(e, t, n) {
                    var _this = this;
                    _this = _super.call(this) || this, _this._procNodeSampleRate = e, _this._vadProcessor = t, _this._localTrack = n, _this._bufferResidue = new Float32Array([]), _this._audioContext = Object(o.a)({ sampleRate: t.getRequiredPCMFrequency() }), _this._vadSampleSize = t.getSampleLength(), _this._onAudioProcess = _this._onAudioProcess.bind(_this), _this._initializeAudioContext();
                    return _this;
                }
                c.create = function (e, t, n) { return s.a.obtainAudioAndVideoPermissions({ devices: ["audio"], micDeviceId: e }).then(function (i) { if (!i[0])
                    throw new Error("Failed to create jitsi local track for device id: " + e); return new c(t, n, i[0]); }); };
                c.prototype._initializeAudioContext = function () { this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream), this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1); };
                c.prototype._onAudioProcess = function (e) { var t = e.inputBuffer.getChannelData(0), n = __spreadArray(__spreadArray([], this._bufferResidue), t), i = Date.now(); var r = 0; for (; r + this._vadSampleSize < n.length; r += this._vadSampleSize) {
                    var e_81 = n.slice(r, r + this._vadSampleSize), t_70 = this._vadProcessor.calculateAudioFrameVAD(e_81.slice());
                    this.emit(a.VAD_SCORE_PUBLISHED, { timestamp: i, score: t_70, pcmData: e_81, deviceId: this._localTrack.getDeviceId() });
                } this._bufferResidue = n.slice(r, n.length); };
                c.prototype._connectAudioGraph = function () { this._audioProcessingNode.onaudioprocess = this._onAudioProcess, this._audioSource.connect(this._audioProcessingNode), this._audioProcessingNode.connect(this._audioContext.destination); };
                c.prototype._disconnectAudioGraph = function () { this._audioProcessingNode.onaudioprocess = function () { }, this._audioProcessingNode.disconnect(), this._audioSource.disconnect(); };
                c.prototype._cleanupResources = function () { this._disconnectAudioGraph(), this._localTrack.stopStream(); };
                c.prototype.getDeviceId = function () { return this._localTrack.getDeviceId(); };
                c.prototype.getTrackLabel = function () { return this._localTrack.getDeviceLabel(); };
                c.prototype.start = function () { this._connectAudioGraph(); };
                c.prototype.stop = function () { this._disconnectAudioGraph(), this._bufferResidue = []; };
                c.prototype.destroy = function () { this._destroyed || (this._cleanupResources(), this._destroyed = !0); };
                return c;
            }(r.a));
        }, function (e, t, n) {
            "use strict";
            function i(e) { var t = window.AudioContext || window.webkitAudioContext; if (t)
                return new t(e); }
            n.d(t, "a", (function () { return i; }));
        }, function (e, t, n) {
            "use strict";
            n.r(t), n.d(t, "E2E_RTT_CHANGED", (function () { return i; }));
            var i = "e2eping.e2e_rtt_changed";
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return l; })), n.d(t, "b", (function () { return h; })); var i = n(4), r = n(25), s = n.n(r), o = n(5), a = n(7), c = n.n(a), d = n(3); var u = Object(i.getLogger)(e), l = ["1", "2", "3"];
                var h = /** @class */ (function () {
                    function h(e, t) {
                        this.pc = e, this.videoBitrates = t.VP8 || t, this.localStreamEncodingsConfig = [{ active: !0, maxBitrate: d.a.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low, rid: "1", scaleResolutionDownBy: d.a.isFirefox() ? 1 : 4 }, { active: !0, maxBitrate: this.videoBitrates.standard, rid: "2", scaleResolutionDownBy: 2 }, { active: !0, maxBitrate: d.a.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high, rid: "3", scaleResolutionDownBy: d.a.isFirefox() ? 4 : 1 }];
                    }
                    h.prototype.ensureCorrectOrderOfSsrcs = function (e) { var t = s.a.parse(e.sdp); return t.media.forEach(function (e) { if ("audio" === e.type)
                        return; if (!e.ssrcGroups || !e.ssrcGroups.length)
                        return; var t = []; e.ssrcGroups[0].ssrcs.split(" ").forEach(function (n) { var i = e.ssrcs.filter(function (e) { return e.id.toString() === n; }); t = t.concat(i); }), e.ssrcs = t; }), new RTCSessionDescription({ type: e.type, sdp: s.a.write(t) }); };
                    h.prototype._getStreamEncodings = function (e) { return this.pc.isSimulcastOn() && e.isVideoTrack() ? this.localStreamEncodingsConfig : e.isVideoTrack() ? [{ active: !0, maxBitrate: this.videoBitrates.high }] : [{ active: !0 }]; };
                    h.prototype.insertUnifiedPlanSimulcastReceive = function (e) { if (d.a.usesSdpMungingForSimulcast())
                        return e; var t = s.a.parse(e.sdp), n = t.media.findIndex(function (e) { return "video" === e.type; }); if (t.media[n].rids && (t.media[n].simulcast_03 || t.media[n].simulcast))
                        return t.media.forEach(function (e, i) { "video" === e.type && i !== n && (t.media[i].rids = void 0, t.media[i].simulcast = void 0, t.media[i].simulcast_03 = void 0); }), new RTCSessionDescription({ type: e.type, sdp: s.a.write(t) }); t.media[n].rids = [{ id: "1", direction: "recv" }, { id: "2", direction: "recv" }, { id: "3", direction: "recv" }]; var i = d.a.isFirefox() && d.a.isVersionGreaterThan(71) ? "recv " + l.join(";") : "recv rid=" + l.join(";"); return t.media[n].simulcast_03 = { value: i }, new RTCSessionDescription({ type: e.type, sdp: s.a.write(t) }); };
                    h.prototype.addTrack = function (e, t) { var n = e.getTrack(); if (t) {
                        var t_71 = { direction: "sendrecv", streams: [e.getOriginalStream()], sendEncodings: [] };
                        d.a.isFirefox() || (t_71.sendEncodings = this._getStreamEncodings(e)), this.pc.peerconnection.addTransceiver(n, t_71);
                    }
                    else
                        this.pc.peerconnection.addTrack(n); };
                    h.prototype.addTrackUnmute = function (e) {
                        var _this = this;
                        var t = e.getType(), n = e.getTrack(), i = this.pc.peerconnection.getTransceivers().find(function (e) { return e.receiver && e.receiver.track && e.receiver.track.kind === t; });
                        if (!i)
                            return Promise.reject(new Error("RTCRtpTransceiver for " + t + " not found"));
                        if (u.debug("Adding " + e + " on " + this.pc), "recvonly" === i.direction) {
                            return e.getOriginalStream() ? (this.pc.peerconnection.addStream(e.getOriginalStream()), this.setEncodings(e).then(function () { _this.pc.localTracks.set(e.rtcId, e), i.direction = "sendrecv"; })) : Promise.resolve();
                        }
                        return i.sender.replaceTrack(n);
                    };
                    h.prototype.getLocalStreamHeightConstraints = function (e) { if (d.a.isReactNative())
                        return null; var t = [], _a = e.getSettings().height, n = _a === void 0 ? 720 : _a; for (var _i = 0, _b = this.localStreamEncodingsConfig; _i < _b.length; _i++) {
                        var e_82 = _b[_i];
                        t.push(n / e_82.scaleResolutionDownBy);
                    } return t; };
                    h.prototype.removeTrackMute = function (e) { var t = e.getType(), n = this.pc.peerconnection.getTransceivers().find(function (t) { return t.sender && t.sender.track && t.sender.track.id === e.getTrackId(); }); return n ? (u.debug("Removing " + e + " on " + this.pc), n.sender.replaceTrack(null)) : Promise.reject(new Error("RTCRtpTransceiver for " + t + " not found")); };
                    h.prototype.replaceTrack = function (e, t) {
                        var _this = this;
                        if (e && t) {
                            var n_48 = t.getType(), i_28 = t.getOriginalStream();
                            if (!i_28)
                                return this.pc.localTracks.delete(e.rtcId), this.pc.localTracks.set(t.rtcId, t), Promise.resolve();
                            var r_12 = n_48 === o.a ? i_28.getAudioTracks()[0] : i_28.getVideoTracks()[0], s_9 = this.pc.peerconnection.getTransceivers().find(function (e) { return e.receiver.track.kind === n_48 && !e.stopped; });
                            return s_9 ? (u.debug("Replacing " + e + " with " + t + " on " + this.pc), s_9.sender.replaceTrack(r_12).then(function () { var n = _this.pc.localSSRCs.get(e.rtcId); _this.pc.localTracks.delete(e.rtcId), _this.pc.localSSRCs.delete(e.rtcId), _this.pc._addedStreams = _this.pc._addedStreams.filter(function (e) { return e !== i_28; }), _this.pc.localTracks.set(t.rtcId, t), _this.pc._addedStreams.push(i_28), _this.pc.localSSRCs.set(t.rtcId, n), _this.pc.eventEmitter.emit(c.a.LOCAL_TRACK_SSRC_UPDATED, t, _this.pc._extractPrimarySSRC(n)); })) : Promise.reject(new Error("replace track failed"));
                        }
                        if (e && !t)
                            return this.removeTrackMute(e).then(function () { _this.pc.localTracks.delete(e.rtcId), _this.pc.localSSRCs.delete(e.rtcId); });
                        if (t && !e) {
                            var e_83 = this.pc.localSSRCs.get(t.rtcId);
                            return this.addTrackUnmute(t).then(function () { _this.pc.localTracks.set(t.rtcId, t), _this.pc.localSSRCs.set(t.rtcId, e_83); });
                        }
                        return u.info("TPCUtils.replaceTrack called with no new track and no old track"), Promise.resolve();
                    };
                    h.prototype.setAudioTransferActive = function (e) { this.setMediaTransferActive(o.a, e); };
                    h.prototype.setEncodings = function (e) { var t = this.pc.peerconnection.getTransceivers().find(function (t) { return t.sender && t.sender.track && t.sender.track.kind === e.getType(); }), n = t.sender.getParameters(); return n.encodings = this._getStreamEncodings(e), t.sender.setParameters(n); };
                    h.prototype.setMediaTransferActive = function (e, t) { var n = this.pc.peerconnection.getTransceivers().filter(function (t) { return t.receiver && t.receiver.track && t.receiver.track.kind === e; }), i = this.pc.getLocalTracks(e); u.info((t ? "Enabling" : "Suspending") + " " + e + " media transfer on " + this.pc), n.forEach(function (e, n) { t ? 0 === n && i.length ? e.direction = "sendrecv" : e.direction = "recvonly" : e.direction = "inactive"; }); };
                    h.prototype.setVideoTransferActive = function (e) { this.setMediaTransferActive(o.c, e); };
                    h.prototype.updateEncodingsResolution = function (e) {
                        var _this = this;
                        if (!(d.a.isWebKitBased() && e.encodings && Array.isArray(e.encodings)))
                            return;
                        var t;
                        (t = e.encodings).every(function (e) { return void 0 !== e.scaleResolutionDownBy && e.scaleResolutionDownBy === t[0].scaleResolutionDownBy; }) && e.encodings.forEach(function (e, t) { e.scaleResolutionDownBy = _this.localStreamEncodingsConfig[t].scaleResolutionDownBy; });
                    };
                    return h;
                }());  }).call(this, "modules/RTC/TPCUtils.js");
        }, function (e, t) { e.exports = /** @class */ (function () {
            function exports(e, t, n) {
                this._userId = e, this.setDisplayName(t), this._isLocalStats = n || !1, this.setDominantSpeaker(!1), this.totalDominantSpeakerTime = 0, this._dominantSpeakerStart = 0, this._hasLeft = !1;
            }
            exports.prototype.getUserId = function () { return this._userId; };
            exports.prototype.getDisplayName = function () { return this.displayName; };
            exports.prototype.setDisplayName = function (e) { this.displayName = e; };
            exports.prototype.isLocalStats = function () { return this._isLocalStats; };
            exports.prototype.isDominantSpeaker = function () { return this._dominantSpeakerStart > 0; };
            exports.prototype.setDominantSpeaker = function (e) { if (!this.isDominantSpeaker() && e)
                this._dominantSpeakerStart = Date.now();
            else if (this.isDominantSpeaker() && !e) {
                var e_84 = Date.now() - this._dominantSpeakerStart;
                this.totalDominantSpeakerTime += e_84, this._dominantSpeakerStart = 0;
            } };
            exports.prototype.getTotalDominantSpeakerTime = function () { var e = this.totalDominantSpeakerTime; return this.isDominantSpeaker() && (e += Date.now() - this._dominantSpeakerStart), e; };
            exports.prototype.hasLeft = function () { return this._hasLeft; };
            exports.prototype.markAsHasLeft = function () { this._hasLeft = !0, this.setDominantSpeaker(!1); };
            return exports;
        }()); }, function (e, t, n) {
            "use strict";
            var i = n(18), r = n.n(i), s = n(48), o = n(13), a = n(3), c = n(6), d = n(5), u = n(7), l = n.n(u);
            function h(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; }
            t.a = new /** @class */ (function () {
                function class_3() {
                    var _this = this;
                    this._eventEmitter = new r.a, this._permissions = {}, o.a.addListener(l.a.DEVICE_LIST_CHANGED, function (e) { return _this._eventEmitter.emit(s.DEVICE_LIST_CHANGED, e); }), o.a.addListener(l.a.DEVICE_LIST_AVAILABLE, function (e) { return _this._logOutputDevice(_this.getAudioOutputDevice(), e); }), o.a.addListener(l.a.PERMISSIONS_CHANGED, function (e) { return _this._handlePermissionsChange(e); }), this._permissionsApiSupported = new Promise(function (e) { if (!navigator.permissions)
                        return void e(!1); var t = _this, n = []; n.push(navigator.permissions.query({ name: "camera" }).then(function (e) {
                        var _a;
                        return (_this._handlePermissionsChange((_a = {}, _a[d.c] = _this._parsePermissionState(e), _a)), e.onchange = function () {
                            var _a;
                            try {
                                t._handlePermissionsChange((_a = {}, _a[d.c] = t._parsePermissionState(this), _a));
                            }
                            catch (e) { }
                        }, !0);
                    }).catch(function () { return !1; })), n.push(navigator.permissions.query({ name: "microphone" }).then(function (e) {
                        var _a;
                        return (_this._handlePermissionsChange((_a = {}, _a[d.a] = _this._parsePermissionState(e), _a)), e.onchange = function () {
                            var _a;
                            try {
                                t._handlePermissionsChange((_a = {}, _a[d.a] = t._parsePermissionState(this), _a));
                            }
                            catch (e) { }
                        }, !0);
                    }).catch(function () { return !1; })), Promise.all(n).then(function (t) { return e(t.every(function (e) { return e; })); }); });
                }
                class_3.prototype._parsePermissionState = function (e) {
                    if (e === void 0) { e = {}; }
                    var t = e.state || e.status;
                    if ("string" != typeof t)
                        throw new TypeError;
                    return "granted" === t;
                };
                class_3.prototype._handlePermissionsChange = function (e) {
                    var _this = this;
                    [d.a, d.c].some(function (t) { return t in e && e[t] !== _this._permissions[t]; }) && (this._permissions = function (e) { for (var t = 1; t < arguments.length; t++) {
                        var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                        "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { h(e, t, n[t]); }));
                    } return e; }({}, this._permissions, e), this._eventEmitter.emit(s.PERMISSIONS_CHANGED, this._permissions), (this._permissions[d.a] || this._permissions[d.c]) && this.enumerateDevices(function () { }));
                };
                class_3.prototype._logOutputDevice = function (e, t) { var n = t.find(function (t) { return "audiooutput" === t.kind && t.deviceId === e; }); n && c.a.sendActiveDeviceListEvent(o.a.getEventDataForActiveDevice(n)); };
                class_3.prototype.enumerateDevices = function (e) { o.a.enumerateDevices(e); };
                class_3.prototype.isDeviceListAvailable = function () { return o.a.isDeviceListAvailable(); };
                class_3.prototype.isDeviceChangeAvailable = function (e) { return o.a.isDeviceChangeAvailable(e); };
                class_3.prototype.isDevicePermissionGranted = function (e) {
                    var _this = this;
                    return new Promise(function (t) { e in _this._permissions ? t(_this._permissions[e]) : _this._permissionsApiSupported.then(function (n) { if (!n)
                        return void t(!1); var i = []; switch (e) {
                        case d.c:
                            i.push(navigator.permissions.query({ name: "camera" }));
                            break;
                        case d.a:
                            i.push(navigator.permissions.query({ name: "microphone" }));
                            break;
                        default: i.push(navigator.permissions.query({ name: "camera" })), i.push(navigator.permissions.query({ name: "microphone" }));
                    } Promise.all(i).then(function (e) { return t(e.every(function (e) { try {
                        return _this._parsePermissionState(e);
                    }
                    catch (e) {
                        return !1;
                    } })); }, function () { return t(!1); }); }); });
                };
                class_3.prototype.isMultipleAudioInputSupported = function () { return !a.a.isFirefox(); };
                class_3.prototype.getAudioOutputDevice = function () { return o.a.getAudioOutputDevice(); };
                class_3.prototype.setAudioOutputDevice = function (e) { return o.a.getCurrentlyAvailableMediaDevices().length > 0 && this._logOutputDevice(e, o.a.getCurrentlyAvailableMediaDevices()), o.a.setAudioOutputDevice(e); };
                class_3.prototype.addEventListener = function (e, t) { this._eventEmitter.addListener(e, t); };
                class_3.prototype.removeEventListener = function (e, t) { this._eventEmitter.removeListener(e, t); };
                class_3.prototype.emitEvent = function (e) {
                    var _a;
                    var t = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        t[_i - 1] = arguments[_i];
                    }
                    (_a = this._eventEmitter).emit.apply(_a, __spreadArray([e], t));
                };
                return class_3;
            }());
        }, function (e, t) { e.exports = { IDENTITY_UPDATED: "authentication.identity_updated" }; }, function (module, exports, __webpack_require__) {
            (function (process, global) {
                var __WEBPACK_AMD_DEFINE_RESULT__;
                /**
                 * [js-md5]{@link https://github.com/emn178/js-md5}
                 *
                 * @namespace md5
                 * @version 0.7.3
                 * @author Chen, Yi-Cyuan [emn178@gmail.com]
                 * @copyright Chen, Yi-Cyuan 2014-2017
                 * @license MIT
                 */ !function () {
                    "use strict";
                    var ERROR = "input is invalid type", WINDOW = "object" == typeof window, root = WINDOW ? window : {};
                    root.JS_MD5_NO_WINDOW && (WINDOW = !1);
                    var WEB_WORKER = !WINDOW && "object" == typeof self, NODE_JS = !root.JS_MD5_NO_NODE_JS && "object" == typeof process && process.versions && process.versions.node;
                    NODE_JS ? root = global : WEB_WORKER && (root = self);
                    var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && "object" == typeof module && module.exports, AMD = __webpack_require__(152), ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, HEX_CHARS = "0123456789abcdef".split(""), EXTRA = [128, 32768, 8388608, -2147483648], SHIFT = [0, 8, 16, 24], OUTPUT_TYPES = ["hex", "array", "digest", "buffer", "arrayBuffer", "base64"], BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), blocks = [], buffer8;
                    if (ARRAY_BUFFER) {
                        var buffer = new ArrayBuffer(68);
                        buffer8 = new Uint8Array(buffer), blocks = new Uint32Array(buffer);
                    }
                    !root.JS_MD5_NO_NODE_JS && Array.isArray || (Array.isArray = function (e) { return "[object Array]" === Object.prototype.toString.call(e); }), !ARRAY_BUFFER || !root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function (e) { return "object" == typeof e && e.buffer && e.buffer.constructor === ArrayBuffer; });
                    var createOutputMethod = function (e) { return function (t) { return new Md5(!0).update(t)[e](); }; }, createMethod = function () { var e = createOutputMethod("hex"); NODE_JS && (e = nodeWrap(e)), e.create = function () { return new Md5; }, e.update = function (t) { return e.create().update(t); }; for (var t = 0; t < OUTPUT_TYPES.length; ++t) {
                        var n = OUTPUT_TYPES[t];
                        e[n] = createOutputMethod(n);
                    } return e; }, nodeWrap = function (method) { var crypto = eval("require('crypto')"), Buffer = eval("require('buffer').Buffer"), nodeMethod = function (e) { if ("string" == typeof e)
                        return crypto.createHash("md5").update(e, "utf8").digest("hex"); if (null == e)
                        throw ERROR; return e.constructor === ArrayBuffer && (e = new Uint8Array(e)), Array.isArray(e) || ArrayBuffer.isView(e) || e.constructor === Buffer ? crypto.createHash("md5").update(new Buffer(e)).digest("hex") : method(e); }; return nodeMethod; };
                    function Md5(e) { if (e)
                        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0, this.blocks = blocks, this.buffer8 = buffer8;
                    else if (ARRAY_BUFFER) {
                        var t = new ArrayBuffer(68);
                        this.buffer8 = new Uint8Array(t), this.blocks = new Uint32Array(t);
                    }
                    else
                        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0, this.finalized = this.hashed = !1, this.first = !0; }
                    Md5.prototype.update = function (e) { if (!this.finalized) {
                        var t, n = typeof e;
                        if ("string" !== n) {
                            if ("object" !== n)
                                throw ERROR;
                            if (null === e)
                                throw ERROR;
                            if (ARRAY_BUFFER && e.constructor === ArrayBuffer)
                                e = new Uint8Array(e);
                            else if (!(Array.isArray(e) || ARRAY_BUFFER && ArrayBuffer.isView(e)))
                                throw ERROR;
                            t = !0;
                        }
                        for (var i, r, s = 0, o = e.length, a = this.blocks, c = this.buffer8; s < o;) {
                            if (this.hashed && (this.hashed = !1, a[0] = a[16], a[16] = a[1] = a[2] = a[3] = a[4] = a[5] = a[6] = a[7] = a[8] = a[9] = a[10] = a[11] = a[12] = a[13] = a[14] = a[15] = 0), t)
                                if (ARRAY_BUFFER)
                                    for (r = this.start; s < o && r < 64; ++s)
                                        c[r++] = e[s];
                                else
                                    for (r = this.start; s < o && r < 64; ++s)
                                        a[r >> 2] |= e[s] << SHIFT[3 & r++];
                            else if (ARRAY_BUFFER)
                                for (r = this.start; s < o && r < 64; ++s)
                                    (i = e.charCodeAt(s)) < 128 ? c[r++] = i : i < 2048 ? (c[r++] = 192 | i >> 6, c[r++] = 128 | 63 & i) : i < 55296 || i >= 57344 ? (c[r++] = 224 | i >> 12, c[r++] = 128 | i >> 6 & 63, c[r++] = 128 | 63 & i) : (i = 65536 + ((1023 & i) << 10 | 1023 & e.charCodeAt(++s)), c[r++] = 240 | i >> 18, c[r++] = 128 | i >> 12 & 63, c[r++] = 128 | i >> 6 & 63, c[r++] = 128 | 63 & i);
                            else
                                for (r = this.start; s < o && r < 64; ++s)
                                    (i = e.charCodeAt(s)) < 128 ? a[r >> 2] |= i << SHIFT[3 & r++] : i < 2048 ? (a[r >> 2] |= (192 | i >> 6) << SHIFT[3 & r++], a[r >> 2] |= (128 | 63 & i) << SHIFT[3 & r++]) : i < 55296 || i >= 57344 ? (a[r >> 2] |= (224 | i >> 12) << SHIFT[3 & r++], a[r >> 2] |= (128 | i >> 6 & 63) << SHIFT[3 & r++], a[r >> 2] |= (128 | 63 & i) << SHIFT[3 & r++]) : (i = 65536 + ((1023 & i) << 10 | 1023 & e.charCodeAt(++s)), a[r >> 2] |= (240 | i >> 18) << SHIFT[3 & r++], a[r >> 2] |= (128 | i >> 12 & 63) << SHIFT[3 & r++], a[r >> 2] |= (128 | i >> 6 & 63) << SHIFT[3 & r++], a[r >> 2] |= (128 | 63 & i) << SHIFT[3 & r++]);
                            this.lastByteIndex = r, this.bytes += r - this.start, r >= 64 ? (this.start = r - 64, this.hash(), this.hashed = !0) : this.start = r;
                        }
                        return this.bytes > 4294967295 && (this.hBytes += this.bytes / 4294967296 << 0, this.bytes = this.bytes % 4294967296), this;
                    } }, Md5.prototype.finalize = function () { if (!this.finalized) {
                        this.finalized = !0;
                        var e = this.blocks, t = this.lastByteIndex;
                        e[t >> 2] |= EXTRA[3 & t], t >= 56 && (this.hashed || this.hash(), e[0] = e[16], e[16] = e[1] = e[2] = e[3] = e[4] = e[5] = e[6] = e[7] = e[8] = e[9] = e[10] = e[11] = e[12] = e[13] = e[14] = e[15] = 0), e[14] = this.bytes << 3, e[15] = this.hBytes << 3 | this.bytes >>> 29, this.hash();
                    } }, Md5.prototype.hash = function () { var e, t, n, i, r, s, o = this.blocks; this.first ? t = ((t = ((e = ((e = o[0] - 680876937) << 7 | e >>> 25) - 271733879 << 0) ^ (n = ((n = (-271733879 ^ (i = ((i = (-1732584194 ^ 2004318071 & e) + o[1] - 117830708) << 12 | i >>> 20) + e << 0) & (-271733879 ^ e)) + o[2] - 1126478375) << 17 | n >>> 15) + i << 0) & (i ^ e)) + o[3] - 1316259209) << 22 | t >>> 10) + n << 0 : (e = this.h0, t = this.h1, n = this.h2, t = ((t += ((e = ((e += ((i = this.h3) ^ t & (n ^ i)) + o[0] - 680876936) << 7 | e >>> 25) + t << 0) ^ (n = ((n += (t ^ (i = ((i += (n ^ e & (t ^ n)) + o[1] - 389564586) << 12 | i >>> 20) + e << 0) & (e ^ t)) + o[2] + 606105819) << 17 | n >>> 15) + i << 0) & (i ^ e)) + o[3] - 1044525330) << 22 | t >>> 10) + n << 0), t = ((t += ((e = ((e += (i ^ t & (n ^ i)) + o[4] - 176418897) << 7 | e >>> 25) + t << 0) ^ (n = ((n += (t ^ (i = ((i += (n ^ e & (t ^ n)) + o[5] + 1200080426) << 12 | i >>> 20) + e << 0) & (e ^ t)) + o[6] - 1473231341) << 17 | n >>> 15) + i << 0) & (i ^ e)) + o[7] - 45705983) << 22 | t >>> 10) + n << 0, t = ((t += ((e = ((e += (i ^ t & (n ^ i)) + o[8] + 1770035416) << 7 | e >>> 25) + t << 0) ^ (n = ((n += (t ^ (i = ((i += (n ^ e & (t ^ n)) + o[9] - 1958414417) << 12 | i >>> 20) + e << 0) & (e ^ t)) + o[10] - 42063) << 17 | n >>> 15) + i << 0) & (i ^ e)) + o[11] - 1990404162) << 22 | t >>> 10) + n << 0, t = ((t += ((e = ((e += (i ^ t & (n ^ i)) + o[12] + 1804603682) << 7 | e >>> 25) + t << 0) ^ (n = ((n += (t ^ (i = ((i += (n ^ e & (t ^ n)) + o[13] - 40341101) << 12 | i >>> 20) + e << 0) & (e ^ t)) + o[14] - 1502002290) << 17 | n >>> 15) + i << 0) & (i ^ e)) + o[15] + 1236535329) << 22 | t >>> 10) + n << 0, t = ((t += ((i = ((i += (t ^ n & ((e = ((e += (n ^ i & (t ^ n)) + o[1] - 165796510) << 5 | e >>> 27) + t << 0) ^ t)) + o[6] - 1069501632) << 9 | i >>> 23) + e << 0) ^ e & ((n = ((n += (e ^ t & (i ^ e)) + o[11] + 643717713) << 14 | n >>> 18) + i << 0) ^ i)) + o[0] - 373897302) << 20 | t >>> 12) + n << 0, t = ((t += ((i = ((i += (t ^ n & ((e = ((e += (n ^ i & (t ^ n)) + o[5] - 701558691) << 5 | e >>> 27) + t << 0) ^ t)) + o[10] + 38016083) << 9 | i >>> 23) + e << 0) ^ e & ((n = ((n += (e ^ t & (i ^ e)) + o[15] - 660478335) << 14 | n >>> 18) + i << 0) ^ i)) + o[4] - 405537848) << 20 | t >>> 12) + n << 0, t = ((t += ((i = ((i += (t ^ n & ((e = ((e += (n ^ i & (t ^ n)) + o[9] + 568446438) << 5 | e >>> 27) + t << 0) ^ t)) + o[14] - 1019803690) << 9 | i >>> 23) + e << 0) ^ e & ((n = ((n += (e ^ t & (i ^ e)) + o[3] - 187363961) << 14 | n >>> 18) + i << 0) ^ i)) + o[8] + 1163531501) << 20 | t >>> 12) + n << 0, t = ((t += ((i = ((i += (t ^ n & ((e = ((e += (n ^ i & (t ^ n)) + o[13] - 1444681467) << 5 | e >>> 27) + t << 0) ^ t)) + o[2] - 51403784) << 9 | i >>> 23) + e << 0) ^ e & ((n = ((n += (e ^ t & (i ^ e)) + o[7] + 1735328473) << 14 | n >>> 18) + i << 0) ^ i)) + o[12] - 1926607734) << 20 | t >>> 12) + n << 0, t = ((t += ((s = (i = ((i += ((r = t ^ n) ^ (e = ((e += (r ^ i) + o[5] - 378558) << 4 | e >>> 28) + t << 0)) + o[8] - 2022574463) << 11 | i >>> 21) + e << 0) ^ e) ^ (n = ((n += (s ^ t) + o[11] + 1839030562) << 16 | n >>> 16) + i << 0)) + o[14] - 35309556) << 23 | t >>> 9) + n << 0, t = ((t += ((s = (i = ((i += ((r = t ^ n) ^ (e = ((e += (r ^ i) + o[1] - 1530992060) << 4 | e >>> 28) + t << 0)) + o[4] + 1272893353) << 11 | i >>> 21) + e << 0) ^ e) ^ (n = ((n += (s ^ t) + o[7] - 155497632) << 16 | n >>> 16) + i << 0)) + o[10] - 1094730640) << 23 | t >>> 9) + n << 0, t = ((t += ((s = (i = ((i += ((r = t ^ n) ^ (e = ((e += (r ^ i) + o[13] + 681279174) << 4 | e >>> 28) + t << 0)) + o[0] - 358537222) << 11 | i >>> 21) + e << 0) ^ e) ^ (n = ((n += (s ^ t) + o[3] - 722521979) << 16 | n >>> 16) + i << 0)) + o[6] + 76029189) << 23 | t >>> 9) + n << 0, t = ((t += ((s = (i = ((i += ((r = t ^ n) ^ (e = ((e += (r ^ i) + o[9] - 640364487) << 4 | e >>> 28) + t << 0)) + o[12] - 421815835) << 11 | i >>> 21) + e << 0) ^ e) ^ (n = ((n += (s ^ t) + o[15] + 530742520) << 16 | n >>> 16) + i << 0)) + o[2] - 995338651) << 23 | t >>> 9) + n << 0, t = ((t += ((i = ((i += (t ^ ((e = ((e += (n ^ (t | ~i)) + o[0] - 198630844) << 6 | e >>> 26) + t << 0) | ~n)) + o[7] + 1126891415) << 10 | i >>> 22) + e << 0) ^ ((n = ((n += (e ^ (i | ~t)) + o[14] - 1416354905) << 15 | n >>> 17) + i << 0) | ~e)) + o[5] - 57434055) << 21 | t >>> 11) + n << 0, t = ((t += ((i = ((i += (t ^ ((e = ((e += (n ^ (t | ~i)) + o[12] + 1700485571) << 6 | e >>> 26) + t << 0) | ~n)) + o[3] - 1894986606) << 10 | i >>> 22) + e << 0) ^ ((n = ((n += (e ^ (i | ~t)) + o[10] - 1051523) << 15 | n >>> 17) + i << 0) | ~e)) + o[1] - 2054922799) << 21 | t >>> 11) + n << 0, t = ((t += ((i = ((i += (t ^ ((e = ((e += (n ^ (t | ~i)) + o[8] + 1873313359) << 6 | e >>> 26) + t << 0) | ~n)) + o[15] - 30611744) << 10 | i >>> 22) + e << 0) ^ ((n = ((n += (e ^ (i | ~t)) + o[6] - 1560198380) << 15 | n >>> 17) + i << 0) | ~e)) + o[13] + 1309151649) << 21 | t >>> 11) + n << 0, t = ((t += ((i = ((i += (t ^ ((e = ((e += (n ^ (t | ~i)) + o[4] - 145523070) << 6 | e >>> 26) + t << 0) | ~n)) + o[11] - 1120210379) << 10 | i >>> 22) + e << 0) ^ ((n = ((n += (e ^ (i | ~t)) + o[2] + 718787259) << 15 | n >>> 17) + i << 0) | ~e)) + o[9] - 343485551) << 21 | t >>> 11) + n << 0, this.first ? (this.h0 = e + 1732584193 << 0, this.h1 = t - 271733879 << 0, this.h2 = n - 1732584194 << 0, this.h3 = i + 271733878 << 0, this.first = !1) : (this.h0 = this.h0 + e << 0, this.h1 = this.h1 + t << 0, this.h2 = this.h2 + n << 0, this.h3 = this.h3 + i << 0); }, Md5.prototype.hex = function () { this.finalize(); var e = this.h0, t = this.h1, n = this.h2, i = this.h3; return HEX_CHARS[e >> 4 & 15] + HEX_CHARS[15 & e] + HEX_CHARS[e >> 12 & 15] + HEX_CHARS[e >> 8 & 15] + HEX_CHARS[e >> 20 & 15] + HEX_CHARS[e >> 16 & 15] + HEX_CHARS[e >> 28 & 15] + HEX_CHARS[e >> 24 & 15] + HEX_CHARS[t >> 4 & 15] + HEX_CHARS[15 & t] + HEX_CHARS[t >> 12 & 15] + HEX_CHARS[t >> 8 & 15] + HEX_CHARS[t >> 20 & 15] + HEX_CHARS[t >> 16 & 15] + HEX_CHARS[t >> 28 & 15] + HEX_CHARS[t >> 24 & 15] + HEX_CHARS[n >> 4 & 15] + HEX_CHARS[15 & n] + HEX_CHARS[n >> 12 & 15] + HEX_CHARS[n >> 8 & 15] + HEX_CHARS[n >> 20 & 15] + HEX_CHARS[n >> 16 & 15] + HEX_CHARS[n >> 28 & 15] + HEX_CHARS[n >> 24 & 15] + HEX_CHARS[i >> 4 & 15] + HEX_CHARS[15 & i] + HEX_CHARS[i >> 12 & 15] + HEX_CHARS[i >> 8 & 15] + HEX_CHARS[i >> 20 & 15] + HEX_CHARS[i >> 16 & 15] + HEX_CHARS[i >> 28 & 15] + HEX_CHARS[i >> 24 & 15]; }, Md5.prototype.toString = Md5.prototype.hex, Md5.prototype.digest = function () { this.finalize(); var e = this.h0, t = this.h1, n = this.h2, i = this.h3; return [255 & e, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255, 255 & t, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255, 255 & n, n >> 8 & 255, n >> 16 & 255, n >> 24 & 255, 255 & i, i >> 8 & 255, i >> 16 & 255, i >> 24 & 255]; }, Md5.prototype.array = Md5.prototype.digest, Md5.prototype.arrayBuffer = function () { this.finalize(); var e = new ArrayBuffer(16), t = new Uint32Array(e); return t[0] = this.h0, t[1] = this.h1, t[2] = this.h2, t[3] = this.h3, e; }, Md5.prototype.buffer = Md5.prototype.arrayBuffer, Md5.prototype.base64 = function () { for (var e, t, n, i = "", r = this.array(), s = 0; s < 15;)
                        e = r[s++], t = r[s++], n = r[s++], i += BASE64_ENCODE_CHAR[e >>> 2] + BASE64_ENCODE_CHAR[63 & (e << 4 | t >>> 4)] + BASE64_ENCODE_CHAR[63 & (t << 2 | n >>> 6)] + BASE64_ENCODE_CHAR[63 & n]; return e = r[s], i += BASE64_ENCODE_CHAR[e >>> 2] + BASE64_ENCODE_CHAR[e << 4 & 63] + "=="; };
                    var exports = createMethod();
                    COMMON_JS ? module.exports = exports : (root.md5 = exports, AMD && (__WEBPACK_AMD_DEFINE_RESULT__ = function () { return exports; }.call(exports, __webpack_require__, exports, module), void 0 === __WEBPACK_AMD_DEFINE_RESULT__ || (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)));
                }();
            }).call(this, __webpack_require__(60), __webpack_require__(46));
        }, function (e, t, n) { (function (t) { var n = /^\s+|\s+$/g, i = /^[-+]0x[0-9a-f]+$/i, r = /^0b[01]+$/i, s = /^0o[0-7]+$/i, o = parseInt, a = "object" == typeof t && t && t.Object === Object && t, c = "object" == typeof self && self && self.Object === Object && self, d = a || c || Function("return this")(), u = Object.prototype.toString, l = Math.max, h = Math.min, p = function () { return d.Date.now(); }; function m(e) { var t = typeof e; return !!e && ("object" == t || "function" == t); } function f(e) { if ("number" == typeof e)
            return e; if (function (e) { return "symbol" == typeof e || function (e) { return !!e && "object" == typeof e; }(e) && "[object Symbol]" == u.call(e); }(e))
            return NaN; if (m(e)) {
            var t = "function" == typeof e.valueOf ? e.valueOf() : e;
            e = m(t) ? t + "" : t;
        } if ("string" != typeof e)
            return 0 === e ? e : +e; e = e.replace(n, ""); var a = r.test(e); return a || s.test(e) ? o(e.slice(2), a ? 2 : 8) : i.test(e) ? NaN : +e; } e.exports = function (e, t, n) { var i, r, s, o, a, c, d = 0, u = !1, g = !1, _ = !0; if ("function" != typeof e)
            throw new TypeError("Expected a function"); function v(t) { var n = i, s = r; return i = r = void 0, d = t, o = e.apply(s, n); } function S(e) { return d = e, a = setTimeout(E, t), u ? v(e) : o; } function y(e) { var n = e - c; return void 0 === c || n >= t || n < 0 || g && e - d >= s; } function E() { var e = p(); if (y(e))
            return b(e); a = setTimeout(E, function (e) { var n = t - (e - c); return g ? h(n, s - (e - d)) : n; }(e)); } function b(e) { return a = void 0, _ && i ? v(e) : (i = r = void 0, o); } function T() { var e = p(), n = y(e); if (i = arguments, r = this, c = e, n) {
            if (void 0 === a)
                return S(c);
            if (g)
                return a = setTimeout(E, t), v(c);
        } return void 0 === a && (a = setTimeout(E, t)), o; } return t = f(t) || 0, m(n) && (u = !!n.leading, s = (g = "maxWait" in n) ? l(f(n.maxWait) || 0, t) : s, _ = "trailing" in n ? !!n.trailing : _), T.cancel = function () { void 0 !== a && clearTimeout(a), d = 0, i = c = r = a = void 0; }, T.flush = function () { return void 0 === a ? o : b(p()); }, T; }; }).call(this, n(46)); }, function (e, t, n) {
            "use strict";
            function i(e) {
                return __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (_a) {
                    t = new TextEncoder;
                    return [2 /*return*/, crypto.subtle.deriveBits({ name: "HKDF", salt: t.encode("JFrameRatchetKey"), hash: "SHA-256", info: new ArrayBuffer }, e, 256)];
                }); });
            }
            function r(e) {
                return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, crypto.subtle.importKey("raw", e, "HKDF", !1, ["deriveBits", "deriveKey"])];
                }); });
            }
            n.d(t, "b", (function () { return i; })), n.d(t, "a", (function () { return r; }));
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return y; })); var i = n(4), r = n(19), s = n(14), o = n(15), a = n(45), c = n.n(a), d = n(5), u = n(7), l = n.n(u), h = n(12), p = n.n(h), m = n(8), f = n(3), g = n(6), _ = n(64), v = n(10); var S = Object(i.getLogger)(e);
                var y = /** @class */ (function (_super) {
                    __extends(y, _super);
                    function y(_a) {
                        var e = _a.deviceId, t = _a.facingMode, n = _a.mediaType, i = _a.resolution, r = _a.rtcId, s = _a.sourceId, a = _a.sourceType, c = _a.stream, d = _a.track, u = _a.videoType, _b = _a.effects, h = _b === void 0 ? [] : _b;
                        var _this = this;
                        _this = _super.call(this, null, c, d, function () { return _this.emit(o.LOCAL_TRACK_STOPPED); }, n, u) || this, _this._setEffectInProgress = !1;
                        var m = h.find(function (e) { return e.isEnabled(_this); });
                        m && _this._startStreamEffect(m), _this.rtcId = r, _this.sourceId = s, _this.sourceType = a, f.a.usesNewGumFlow() ? (_this.resolution = d.getSettings().height, _this.maxEnabledResolution = i, _this._constraints = d.getConstraints(), Object.keys(_this._constraints).length || u !== p.a.CAMERA || (_this._constraints = { height: d.getSettings().height, width: d.getSettings().width })) : (_this.resolution = f.a.isFirefox() ? null : i, _this.maxEnabledResolution = _this.resolution), _this.deviceId = e, _this._prevSetMuted = Promise.resolve(), _this._facingMode = t, _this._trackEnded = !1, _this._hasSentData = !1, _this._testDataSent = !0, _this._realDeviceId = "" === _this.deviceId ? void 0 : _this.deviceId, _this._trackMutedTS = 0, _this._onDeviceListWillChange = function (e) { var t = _this._realDeviceId; _this._setRealDeviceIdFromDeviceList(e), (void 0 === _this.getTrack().readyState && void 0 !== _this._realDeviceId && !e.find(function (e) { return e.deviceId === _this._realDeviceId; }) || void 0 !== t && void 0 === _this._realDeviceId) && (_this._trackEnded = !0); }, _this.isAudioTrack() && v.a.isDeviceChangeAvailable("output") && (_this._onAudioOutputDeviceChanged = _this.setAudioOutput.bind(_this), v.a.addListener(l.a.AUDIO_OUTPUT_DEVICE_CHANGED, _this._onAudioOutputDeviceChanged)), v.a.addListener(l.a.DEVICE_LIST_WILL_CHANGE, _this._onDeviceListWillChange), _this._initNoDataFromSourceHandlers();
                        return _this;
                    }
                    y.prototype.isEnded = function () { return this.isVideoTrack() && this.isMuted() ? this._trackEnded : "ended" === this.getTrack().readyState || this._trackEnded; };
                    y.prototype._initNoDataFromSourceHandlers = function () {
                        var _this = this;
                        this._isNoDataFromSourceEventsEnabled() && (this._setHandler("track_mute", function () { _this._trackMutedTS = window.performance.now(), _this._fireNoDataFromSourceEvent(); }), this._setHandler("track_unmute", function () { _this._fireNoDataFromSourceEvent(), g.a.sendAnalyticsAndLog(m.s, { media_type: _this.getType(), track_type: "local", value: window.performance.now() - _this._trackMutedTS }); }), this.isVideoTrack() && this.videoType === p.a.CAMERA && this._setHandler("track_ended", function () { _this.isReceivingData() || _this._fireNoDataFromSourceEvent(); }));
                    };
                    y.prototype._isNoDataFromSourceEventsEnabled = function () { return !this.isVideoTrack() || this.videoType !== p.a.DESKTOP; };
                    y.prototype._fireNoDataFromSourceEvent = function () { var e = !this.isReceivingData(); this.emit(o.NO_DATA_FROM_SOURCE, e), g.a.sendAnalytics(Object(m.H)(this.getType(), e)), g.a.sendLog(JSON.stringify({ name: o.NO_DATA_FROM_SOURCE, log: e })); };
                    y.prototype._setRealDeviceIdFromDeviceList = function (e) { var t = this.getTrack(), n = t.kind + "input"; var i = e.find(function (e) { return e.kind === n && e.label === t.label; }); if (!i && "default" === this._realDeviceId) {
                        var r_13 = (t.label || "").replace("Default - ", "");
                        i = e.find(function (e) { return e.kind === n && e.label === r_13; });
                    } this._realDeviceId = i ? i.deviceId : void 0; };
                    y.prototype._setStream = function (e) { _super.prototype._setStream.call(this, e), e ? (this.storedMSID = this.getMSID(), S.debug("Setting new MSID: " + this.storedMSID + " on " + this)) : S.debug("Setting 'null' stream on " + this); };
                    y.prototype._startStreamEffect = function (e) { this._streamEffect = e, this._originalStream = this.stream, this._setStream(this._streamEffect.startEffect(this._originalStream)), this.track = this.stream.getTracks()[0]; };
                    y.prototype._stopStreamEffect = function () { this._streamEffect && (this._streamEffect.stopEffect(), this._setStream(this._originalStream), this._originalStream = null, this.track = this.stream.getTracks()[0]); };
                    y.prototype._switchStreamEffect = function (e) { this._streamEffect && (this._stopStreamEffect(), this._streamEffect = void 0), e && this._startStreamEffect(e); };
                    y.prototype.setEffect = function (e) {
                        var _this = this;
                        if (void 0 === this._streamEffect && void 0 === e)
                            return Promise.resolve();
                        if (void 0 !== e && !e.isEnabled(this))
                            return Promise.reject(new Error("Incompatible effect instance!"));
                        if (!0 === this._setEffectInProgress)
                            return Promise.reject(new Error("setEffect already in progress!"));
                        if (this.isMuted() && !this.isAudioTrack())
                            return this._streamEffect = e, Promise.resolve();
                        var t = this.conference;
                        return t ? (this._setEffectInProgress = !0, f.a.usesUnifiedPlan() ? (this._switchStreamEffect(e), this.isVideoTrack() && this.containers.forEach(function (e) { return v.a.attachMediaStream(e, _this.stream); }), t.replaceTrack(this, this).then(function () { _this._setEffectInProgress = !1; }).catch(function (e) { throw _this._setEffectInProgress = !1, _this._switchStreamEffect(), S.error("Failed to switch to the new stream!", e), e; })) : t.removeTrack(this).then(function () { return (_this._switchStreamEffect(e), _this.isVideoTrack() && _this.containers.forEach(function (e) { return v.a.attachMediaStream(e, _this.stream); }), t.addTrack(_this)); }).then(function () { _this._setEffectInProgress = !1; }).catch(function (e) { throw _this._setEffectInProgress = !1, _this._switchStreamEffect(), S.error("Failed to switch to the new stream!", e), e; })) : (this._switchStreamEffect(e), this.isVideoTrack() && this.containers.forEach(function (e) { return v.a.attachMediaStream(e, _this.stream); }), Promise.resolve());
                    };
                    y.prototype.mute = function () { return this._queueSetMuted(!0); };
                    y.prototype.unmute = function () { return this._queueSetMuted(!1); };
                    y.prototype._queueSetMuted = function (e) { var t = this._setMuted.bind(this, e); return this._prevSetMuted = this._prevSetMuted.then(t, t), this._prevSetMuted; };
                    y.prototype._setMuted = function (e) {
                        var _this = this;
                        if (this.isMuted() === e)
                            return Promise.resolve();
                        if (this.disposed)
                            return Promise.reject(new r.a(s.TRACK_IS_DISPOSED));
                        var t = Promise.resolve();
                        var n = function () { return S.info("Mute " + _this + ": " + e); };
                        if (this.isAudioTrack() || this.videoType === p.a.DESKTOP || !f.a.doesVideoMuteByStreamRemove())
                            n(), this._streamEffect && this._streamEffect.setMuted ? this._streamEffect.setMuted(e) : this.track && (this.track.enabled = !e);
                        else if (e)
                            t = new Promise(function (e, t) { n(), _this._removeStreamFromConferenceAsMute(function () { _this._streamEffect && _this._stopStreamEffect(), _this._unregisterHandlers(), _this.stopStream(), _this._setStream(null), e(); }, t); });
                        else {
                            n();
                            var e_85 = { cameraDeviceId: this.getDeviceId(), devices: [d.c], effects: this._streamEffect ? [this._streamEffect] : [], facingMode: this.getCameraFacingMode() };
                            f.a.usesNewGumFlow() ? t = v.a.newObtainAudioAndVideoPermissions(Object.assign({}, e_85, { constraints: { video: this._constraints } })) : (this.resolution && (e_85.resolution = this.resolution), t = v.a.obtainAudioAndVideoPermissions(e_85)), t = t.then(function (e) { var t = _this.getType() === d.b ? d.c : _this.getType(), n = f.a.usesNewGumFlow() ? e.find(function (e) { return e.track.kind === t; }) : e.find(function (e) { return e.mediaType === t; }); if (!n)
                                throw new r.a(s.TRACK_NO_STREAM_FOUND); return _this._setStream(n.stream), _this.track = n.track, _this.videoType !== n.videoType && (S.warn(_this + ": video type has changed after unmute!", _this.videoType, n.videoType), _this.videoType = n.videoType), _this._streamEffect && _this._startStreamEffect(_this._streamEffect), _this.containers.map(function (e) { return v.a.attachMediaStream(e, _this.stream); }), _this._addStreamToConferenceAsUnmute(); });
                        }
                        return t.then(function () { return _this._sendMuteStatus(e); }).then(function () { return _this.emit(o.TRACK_MUTE_CHANGED, _this); });
                    };
                    y.prototype._addStreamToConferenceAsUnmute = function () {
                        var _this = this;
                        return this.conference ? new Promise(function (e, t) { _this.conference._addLocalTrackAsUnmute(_this).then(e, function (e) { return t(new Error(e)); }); }) : Promise.resolve();
                    };
                    y.prototype._removeStreamFromConferenceAsMute = function (e, t) { this.conference ? this.conference._removeLocalTrackAsMute(this).then(e, function (e) { return t(new Error(e)); }) : e(); };
                    y.prototype._sendMuteStatus = function (e) {
                        var _this = this;
                        return this.conference && this.conference.room ? new Promise(function (t) { _this.conference.room[_this.isAudioTrack() ? "setAudioMute" : "setVideoMute"](e, t); }) : Promise.resolve();
                    };
                    y.prototype.dispose = function () {
                        var _this = this;
                        this._switchStreamEffect();
                        var e = Promise.resolve();
                        return this.conference && (e = this.conference.removeTrack(this)), this.stream && (this.stopStream(), this.detach()), v.a.removeListener(l.a.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange), this._onAudioOutputDeviceChanged && v.a.removeListener(l.a.AUDIO_OUTPUT_DEVICE_CHANGED, this._onAudioOutputDeviceChanged), e.then(function () { return _super.prototype.dispose.call(_this); });
                    };
                    y.prototype.isMuted = function () { return !this.stream || (!(!this.isVideoTrack() || this.isActive()) || (this._streamEffect && this._streamEffect.isMuted ? this._streamEffect.isMuted() : !this.track || !this.track.enabled)); };
                    y.prototype._setConference = function (e) { this.conference = e; for (var e_86 = 0; e_86 < this.containers.length; e_86++)
                        this._maybeFireTrackAttached(this.containers[e_86]); };
                    y.prototype.isLocal = function () { return !0; };
                    y.prototype.getDeviceId = function () { return this._realDeviceId || this.deviceId; };
                    y.prototype.getParticipantId = function () { return this.conference && this.conference.myUserId(); };
                    y.prototype._onByteSentStatsReceived = function (e, t) {
                        var _this = this;
                        t > 0 && (this._hasSentData = !0);
                        var n = e.getConnectionState();
                        this._testDataSent && "connected" === n && (setTimeout(function () { _this._hasSentData || (S.warn(_this + " 'bytes sent' <= 0:                         " + t), g.a.analytics.sendEvent(m.r, { media_type: _this.getType() })); }, 3e3), this._testDataSent = !1);
                    };
                    y.prototype.getCameraFacingMode = function () { if (this.isVideoTrack() && this.videoType === p.a.CAMERA) {
                        var e_87;
                        try {
                            e_87 = this.track.getSettings();
                        }
                        catch (e) { }
                        return e_87 && "facingMode" in e_87 ? e_87.facingMode : void 0 !== this._facingMode ? this._facingMode : c.a.USER;
                    } };
                    y.prototype.stopStream = function () { this._stopStreamInProgress = !0; try {
                        v.a.stopMediaStream(this.stream);
                    }
                    finally {
                        this._stopStreamInProgress = !1;
                    } };
                    y.prototype._switchCamera = function () { this.isVideoTrack() && this.videoType === p.a.CAMERA && "function" == typeof this.track._switchCamera && (this.track._switchCamera(), this._facingMode = this._facingMode === c.a.ENVIRONMENT ? c.a.USER : c.a.ENVIRONMENT); };
                    y.prototype.isReceivingData = function () { if (this.isVideoTrack() && (this.isMuted() || this._stopStreamInProgress || this.videoType === p.a.DESKTOP))
                        return !0; if (!this.stream)
                        return !1; return (this._effectEnabled ? this._originalStream : this.stream).getTracks().some(function (e) { return !("readyState" in e && "live" !== e.readyState || "muted" in e && !0 === e.muted); }); };
                    y.prototype.toString = function () { return "LocalTrack[" + this.rtcId + "," + this.getType() + "]"; };
                    return y;
                }(_.a));  }).call(this, "modules/RTC/JitsiLocalTrack.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return d; })); var i = n(18), r = n(4), s = n(0), o = n(21), a = n(65); var c = Object(r.getLogger)(e);
                var d = /** @class */ (function (_super) {
                    __extends(d, _super);
                    function d(e, t) {
                        var _this = this;
                        _this = _super.call(this) || this, _this._createVADProcessor = t, _this._vadEmitter = null, _this._isVADEmitterRunning = !1, _this._detectionServices = [], _this._vadInitTracker = Promise.resolve(), _this._processVADScore = _this._processVADScore.bind(_this), e.on(s.TRACK_ADDED, _this._trackAdded.bind(_this)), e.on(s.TRACK_REMOVED, _this._trackRemoved.bind(_this)), e.on(s.TRACK_MUTE_CHANGED, _this._trackMuteChanged.bind(_this));
                        return _this;
                    }
                    d.prototype.addVADDetectionService = function (e) {
                        var _this = this;
                        this._detectionServices.push(e), e.on(o.DETECTOR_STATE_CHANGE, function () { !_this._detectionServices.filter(function (e) { return !0 === e.isActive(); }).length && _this._isVADEmitterRunning ? _this._stopVADEmitter() : _this._isVADEmitterRunning || _this._startVADEmitter(); });
                    };
                    d.prototype._startVADEmitter = function () { this._vadEmitter.on(o.VAD_SCORE_PUBLISHED, this._processVADScore), this._vadEmitter.start(), this._isVADEmitterRunning = !0; };
                    d.prototype._stopVADEmitter = function () { this._vadEmitter.removeListener(o.VAD_SCORE_PUBLISHED, this._processVADScore), this._vadEmitter.stop(), this._isVADEmitterRunning = !1; };
                    d.prototype._processVADScore = function (e) { for (var _i = 0, _a = this._detectionServices; _i < _a.length; _i++) {
                        var t_72 = _a[_i];
                        t_72.processVADScore(e);
                    } };
                    d.prototype._changeDetectorsMuteState = function (e) { for (var _i = 0, _a = this._detectionServices; _i < _a.length; _i++) {
                        var t_73 = _a[_i];
                        t_73.changeMuteState(e);
                    } };
                    d.prototype._trackAdded = function (e) {
                        var _this = this;
                        e.isLocalAudioTrack() && (this._vadInitTracker = this._vadInitTracker.then(function () { return _this._createVADProcessor(); }).then(function (t) { return a.a.create(e.getDeviceId(), 4096, t); }).then(function (t) { c.debug("Created VAD emitter for track: ", e.getTrackLabel()), _this._vadEmitter = t, _this._changeDetectorsMuteState(e.isMuted()); }).catch(function (e) { c.warn("Failed to start VADAudioAnalyser", e); }));
                    };
                    d.prototype._trackMuteChanged = function (e) {
                        var _this = this;
                        e.isLocalAudioTrack() && (this._vadInitTracker = this._vadInitTracker.then(function () { _this._changeDetectorsMuteState(e.isMuted()); }));
                    };
                    d.prototype._trackRemoved = function (e) {
                        var _this = this;
                        e.isLocalAudioTrack() && (this._vadInitTracker = this._vadInitTracker.then(function () { c.debug("Removing track from VAD detection - ", e.getTrackLabel()), _this._vadEmitter && (_this._stopVADEmitter(), _this._vadEmitter.destroy(), _this._vadEmitter = null); for (var _i = 0, _a = _this._detectionServices; _i < _a.length; _i++) {
                            var e_88 = _a[_i];
                            e_88.reset();
                        } }));
                    };
                    return d;
                }(i.EventEmitter));  }).call(this, "modules/detection/VADAudioAnalyser.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return s; }));
            var i = n(2), r = n(54);
            var s = /** @class */ (function () {
                function s(e) {
                    if (e === void 0) { e = {}; }
                    this._connection = e.connection, this._mode = e.mode, this._setSessionID(e.sessionID), this.setStatus(e.status);
                }
                s.prototype.getError = function () { return this._error; };
                s.prototype.getID = function () { return this._sessionID; };
                s.prototype.getInitiator = function () { return this._initiator; };
                s.prototype.getLiveStreamViewURL = function () { return this._liveStreamViewURL; };
                s.prototype.getStatus = function () { return this._status; };
                s.prototype.getTerminator = function () { return this._terminator; };
                s.prototype.getMode = function () { return this._mode; };
                s.prototype.setError = function (e) { this._error = e; };
                s.prototype.setLiveStreamViewURL = function (e) { this._liveStreamViewURL = e; };
                s.prototype.setStatus = function (e) { this._status = e; };
                s.prototype.setInitiator = function (e) { this._initiator = e; };
                s.prototype.setTerminator = function (e) { this._terminator = e; };
                s.prototype.start = function (_a) {
                    var _this = this;
                    var e = _a.appData, t = _a.broadcastId, n = _a.focusMucJid, i = _a.streamId;
                    return new Promise(function (s, o) { _this._connection.sendIQ(_this._createIQ({ action: "start", appData: e, focusMucJid: n, broadcastId: t, streamId: i }), function (e) { _this.setStatus("pending"), _this._setSessionID(r.a.getSessionIdFromIq(e)), s(); }, function (e) { _this._setErrorFromIq(e), o(e); }); });
                };
                s.prototype.stop = function (_a) {
                    var _this = this;
                    var e = _a.focusMucJid;
                    return new Promise(function (t, n) { _this._connection.sendIQ(_this._createIQ({ action: "stop", focusMucJid: e }), t, n); });
                };
                s.prototype._createIQ = function (_a) {
                    var e = _a.action, t = _a.appData, n = _a.broadcastId, r = _a.focusMucJid, s = _a.streamId;
                    return Object(i.$iq)({ to: r, type: "set" }).c("jibri", { xmlns: "http://jitsi.org/protocol/jibri", action: e, app_data: t, recording_mode: this._mode, streamid: s, you_tube_broadcast_id: n }).up();
                };
                s.prototype._setErrorFromIq = function (e) { var t = e.getElementsByTagName("error")[0]; this.setError(t.children[0].tagName); };
                s.prototype._setSessionID = function (e) { this._sessionID = e; };
                return s;
            }());
        }, function (e, t, n) {
            "use strict";
            var i = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto), r = new Uint8Array(16);
            function s() { if (!i)
                throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported"); return i(r); }
            for (var o = [], a = 0; a < 256; ++a)
                o.push((a + 256).toString(16).substr(1));
            var c = function (e, t) { var n = t || 0, i = o; return (i[e[n + 0]] + i[e[n + 1]] + i[e[n + 2]] + i[e[n + 3]] + "-" + i[e[n + 4]] + i[e[n + 5]] + "-" + i[e[n + 6]] + i[e[n + 7]] + "-" + i[e[n + 8]] + i[e[n + 9]] + "-" + i[e[n + 10]] + i[e[n + 11]] + i[e[n + 12]] + i[e[n + 13]] + i[e[n + 14]] + i[e[n + 15]]).toLowerCase(); };
            t.a = function (e, t, n) { "string" == typeof e && (t = "binary" === e ? new Uint8Array(16) : null, e = null); var i = (e = e || {}).random || (e.rng || s)(); if (i[6] = 15 & i[6] | 64, i[8] = 63 & i[8] | 128, t) {
                for (var r = n || 0, o = 0; o < 16; ++o)
                    t[r + o] = i[o];
                return t;
            } return c(i); };
        }, function (e, t) { var n = { trace: 0, debug: 1, info: 2, log: 3, warn: 4, error: 5 }; a.consoleTransport = console; var i = [a.consoleTransport]; a.addGlobalTransport = function (e) { -1 === i.indexOf(e) && i.push(e); }, a.removeGlobalTransport = function (e) { var t = i.indexOf(e); -1 !== t && i.splice(t, 1); }; var r = {}; function s() { var e = { methodName: "", fileLocation: "", line: null, column: null }, t = new Error, n = t.stack ? t.stack.split("\n") : []; if (!n || n.length < 3)
            return e; var i = null; return n[3] && (i = n[3].match(/\s*at\s*(.+?)\s*\((\S*)\s*:(\d*)\s*:(\d*)\)/)), !i || i.length <= 4 ? (0 === n[2].indexOf("log@") ? e.methodName = n[3].substr(0, n[3].indexOf("@")) : e.methodName = n[2].substr(0, n[2].indexOf("@")), e) : (e.methodName = i[1], e.fileLocation = i[2], e.line = i[3], e.column = i[4], e); } function o() { var e = arguments[0], t = arguments[1], o = Array.prototype.slice.call(arguments, 2); if (!(n[t] < e.level))
            for (var a = !(e.options.disableCallerInfo || r.disableCallerInfo) && s(), c = i.concat(e.transports), d = 0; d < c.length; d++) {
                var u = c[d], l = u[t];
                if (l && "function" == typeof l) {
                    var h = [];
                    h.push((new Date).toISOString()), e.id && h.push("[" + e.id + "]"), a && a.methodName.length > 1 && h.push("<" + a.methodName + ">: ");
                    var p = h.concat(o);
                    l.bind(u).apply(u, p);
                }
            } } function a(e, t, i, r) { this.id = t, this.options = r || {}, this.transports = i, this.transports || (this.transports = []), this.level = n[e]; for (var s = Object.keys(n), a = 0; a < s.length; a++)
            this[s[a]] = o.bind(null, this, s[a]); } a.setGlobalOptions = function (e) { r = e || {}; }, a.prototype.setLevel = function (e) { this.level = n[e]; }, e.exports = a, a.levels = { TRACE: "trace", DEBUG: "debug", INFO: "info", LOG: "log", WARN: "warn", ERROR: "error" }; }, function (e, t) { e.exports = function (e) { return e.webpackPolyfill || (e.deprecate = function () { }, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", { enumerable: !0, get: function () { return e.l; } }), Object.defineProperty(e, "id", { enumerable: !0, get: function () { return e.i; } }), e.webpackPolyfill = 1), e; }; }, function (e, t) { var n = e.exports = { v: [{ name: "version", reg: /^(\d*)$/ }], o: [{ name: "origin", reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/, names: ["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"], format: "%s %s %d %s IP%d %s" }], s: [{ name: "name" }], i: [{ name: "description" }], u: [{ name: "uri" }], e: [{ name: "email" }], p: [{ name: "phone" }], z: [{ name: "timezones" }], r: [{ name: "repeats" }], t: [{ name: "timing", reg: /^(\d*) (\d*)/, names: ["start", "stop"], format: "%d %d" }], c: [{ name: "connection", reg: /^IN IP(\d) (\S*)/, names: ["version", "ip"], format: "IN IP%d %s" }], b: [{ push: "bandwidth", reg: /^(TIAS|AS|CT|RR|RS):(\d*)/, names: ["type", "limit"], format: "%s:%s" }], m: [{ reg: /^(\w*) (\d*) ([\w\/]*)(?: (.*))?/, names: ["type", "port", "protocol", "payloads"], format: "%s %d %s %s" }], a: [{ push: "rtp", reg: /^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/, names: ["payload", "codec", "rate", "encoding"], format: function (e) { return e.encoding ? "rtpmap:%d %s/%s/%s" : e.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s"; } }, { push: "fmtp", reg: /^fmtp:(\d*) ([\S| ]*)/, names: ["payload", "config"], format: "fmtp:%d %s" }, { name: "control", reg: /^control:(.*)/, format: "control:%s" }, { name: "rtcp", reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/, names: ["port", "netType", "ipVer", "address"], format: function (e) { return null != e.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d"; } }, { push: "rtcpFbTrrInt", reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/, names: ["payload", "value"], format: "rtcp-fb:%d trr-int %d" }, { push: "rtcpFb", reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/, names: ["payload", "type", "subtype"], format: function (e) { return null != e.subtype ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s"; } }, { push: "ext", reg: /^extmap:(\d+)(?:\/(\w+))? (\S*)(?: (\S*))?/, names: ["value", "direction", "uri", "config"], format: function (e) { return "extmap:%d" + (e.direction ? "/%s" : "%v") + " %s" + (e.config ? " %s" : ""); } }, { push: "crypto", reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/, names: ["id", "suite", "config", "sessionConfig"], format: function (e) { return null != e.sessionConfig ? "crypto:%d %s %s %s" : "crypto:%d %s %s"; } }, { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" }, { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" }, { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" }, { name: "ptime", reg: /^ptime:(\d*)/, format: "ptime:%d" }, { name: "maxptime", reg: /^maxptime:(\d*)/, format: "maxptime:%d" }, { name: "direction", reg: /^(sendrecv|recvonly|sendonly|inactive)/ }, { name: "icelite", reg: /^(ice-lite)/ }, { name: "iceUfrag", reg: /^ice-ufrag:(\S*)/, format: "ice-ufrag:%s" }, { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" }, { name: "fingerprint", reg: /^fingerprint:(\S*) (\S*)/, names: ["type", "hash"], format: "fingerprint:%s %s" }, { push: "candidates", reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/, names: ["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"], format: function (e) { var t = "candidate:%s %d %s %d %s %d typ %s"; return t += null != e.raddr ? " raddr %s rport %d" : "%v%v", t += null != e.tcptype ? " tcptype %s" : "%v", null != e.generation && (t += " generation %d"), t += null != e["network-id"] ? " network-id %d" : "%v", t += null != e["network-cost"] ? " network-cost %d" : "%v"; } }, { name: "endOfCandidates", reg: /^(end-of-candidates)/ }, { name: "remoteCandidates", reg: /^remote-candidates:(.*)/, format: "remote-candidates:%s" }, { name: "iceOptions", reg: /^ice-options:(\S*)/, format: "ice-options:%s" }, { push: "ssrcs", reg: /^ssrc:(\d*) ([\w_]*)(?::(.*))?/, names: ["id", "attribute", "value"], format: function (e) { var t = "ssrc:%d"; return null != e.attribute && (t += " %s", null != e.value && (t += ":%s")), t; } }, { push: "ssrcGroups", reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/, names: ["semantics", "ssrcs"], format: "ssrc-group:%s %s" }, { name: "msidSemantic", reg: /^msid-semantic:\s?(\w*) (\S*)/, names: ["semantic", "token"], format: "msid-semantic: %s %s" }, { push: "groups", reg: /^group:(\w*) (.*)/, names: ["type", "mids"], format: "group:%s %s" }, { name: "rtcpMux", reg: /^(rtcp-mux)/ }, { name: "rtcpRsize", reg: /^(rtcp-rsize)/ }, { name: "sctpmap", reg: /^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/, names: ["sctpmapNumber", "app", "maxMessageSize"], format: function (e) { return null != e.maxMessageSize ? "sctpmap:%s %s %s" : "sctpmap:%s %s"; } }, { name: "xGoogleFlag", reg: /^x-google-flag:([^\s]*)/, format: "x-google-flag:%s" }, { push: "rids", reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/, names: ["id", "direction", "params"], format: function (e) { return e.params ? "rid:%s %s %s" : "rid:%s %s"; } }, { push: "imageattrs", reg: new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"), names: ["pt", "dir1", "attrs1", "dir2", "attrs2"], format: function (e) { return "imageattr:%s %s %s" + (e.dir2 ? " %s %s" : ""); } }, { name: "simulcast", reg: new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"), names: ["dir1", "list1", "dir2", "list2"], format: function (e) { return "simulcast:%s %s" + (e.dir2 ? " %s %s" : ""); } }, { name: "simulcast_03", reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/, names: ["value"], format: "simulcast: %s" }, { name: "framerate", reg: /^framerate:(\d+(?:$|\.\d+))/, format: "framerate:%s" }, { push: "invalid", names: ["value"] }] }; Object.keys(n).forEach((function (e) { n[e].forEach((function (e) { e.reg || (e.reg = /(.*)/), e.format || (e.format = "%s"); })); })); }, function (e, t, n) { var i = n(163), r = function (e) { this.track = e, this.recorder = null, this.data = null, this.name = null, this.startTime = null; }; function s(e) { if (void 0 === e.recorder)
            throw new Error("Passed an object to startRecorder which is not a TrackRecorder object"); e.recorder.start(), e.startTime = new Date; } function o(e) { if (void 0 === e.recorder)
            throw new Error("Passed an object to stopRecorder which is not a TrackRecorder object"); e.recorder.stop(); } function a() { if (MediaRecorder.isTypeSupported("audio/webm"))
            return "audio/webm"; if (MediaRecorder.isTypeSupported("audio/ogg"))
            return "audio/ogg"; throw new Error("unable to create a MediaRecorder with the right mimetype!"); } function c(e) { this.recorders = [], this.fileType = a(), this.isRecording = !1, this.jitsiConference = e; } c.determineCorrectFileType = a, c.prototype.addTrack = function (e) { if (e.isAudioTrack()) {
            var t_74 = this.instantiateTrackRecorder(e);
            this.recorders.push(t_74), this.updateNames(), this.isRecording && s(t_74);
        } }, c.prototype.instantiateTrackRecorder = function (e) { var t = new r(e), n = t.track.getOriginalStream(), i = new MediaStream; return n.getAudioTracks().forEach(function (e) { return i.addTrack(e); }), t.recorder = new MediaRecorder(i, { mimeType: this.fileType }), t.data = [], t.recorder.ondataavailable = function (e) { e.data.size > 0 && t.data.push(e.data); }, t; }, c.prototype.removeTrack = function (e) { if (e.isVideoTrack())
            return; var t = this.recorders; var n; for (n = 0; n < t.length; n++)
            if (t[n].track.getParticipantId() === e.getParticipantId()) {
                var e_89 = t[n];
                this.isRecording ? o(e_89) : t.splice(n, 1);
            } this.updateNames(); }, c.prototype.updateNames = function () { var e = this.jitsiConference; this.recorders.forEach(function (t) { if (t.track.isLocal())
            t.name = "the transcriber";
        else {
            var n_49 = t.track.getParticipantId(), i_29 = e.getParticipantById(n_49).getDisplayName();
            "undefined" !== i_29 && (t.name = i_29);
        } }); }, c.prototype.start = function () { if (this.isRecording)
            throw new Error("audiorecorder is already recording"); this.isRecording = !0, this.recorders.forEach(function (e) { return s(e); }), console.log("Started the recording of the audio. There are currently " + this.recorders.length + " recorders active."); }, c.prototype.stop = function () { this.isRecording = !1, this.recorders.forEach(function (e) { return o(e); }), console.log("stopped recording"); }, c.prototype.download = function () {
            var _this = this;
            this.recorders.forEach(function (e) { var t = new Blob(e.data, { type: _this.fileType }), n = URL.createObjectURL(t), i = document.createElement("a"); document.body.appendChild(i), i.style = "display: none", i.href = n, i.download = "test." + _this.fileType.split("/")[1], i.click(), window.URL.revokeObjectURL(n); });
        }, c.prototype.getRecordingResults = function () {
            var _this = this;
            if (this.isRecording)
                throw new Error("cannot get blobs because the AudioRecorder is still recording!");
            this.updateNames();
            var e = [];
            return this.recorders.forEach(function (t) { return e.push(new i(new Blob(t.data, { type: _this.fileType }), t.name, t.startTime)); }), e;
        }, c.prototype.getFileType = function () { return this.fileType; }, e.exports = c; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return c; }));
            var i = n(84), r = n(28), s = n(6), o = n(22), a = n(8);
            function c(e, t, n) { this.appID = e, this.token = t, this.options = n, this.xmpp = new o.e(n, t), this.addEventListener(r.CONNECTION_FAILED, function (e, t, n, i) { s.a.sendAnalyticsAndLog(Object(a.B)(e, t, i)); }), this.addEventListener(r.CONNECTION_DISCONNECTED, function (e) { e && s.a.sendAnalytics(a.m, { message: e }), s.a.sendLog(JSON.stringify({ id: a.m, msg: e })); }); }
            c.prototype.connect = function (e) {
                if (e === void 0) { e = {}; }
                this.xmpp.connect(e.id, e.password);
            }, c.prototype.attach = function (e) { this.xmpp.attach(e); }, c.prototype.disconnect = function () {
                var _a;
                var e = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    e[_i] = arguments[_i];
                }
                return (_a = this.xmpp).disconnect.apply(_a, e);
            }, c.prototype.getJid = function () { return this.xmpp.getJid(); }, c.prototype.setToken = function (e) { this.token = e; }, c.prototype.initJitsiConference = function (e, t) { return new i.a({ name: e, config: t, connection: this }); }, c.prototype.addEventListener = function (e, t) { this.xmpp.addListener(e, t); }, c.prototype.removeEventListener = function (e, t) { this.xmpp.removeListener(e, t); }, c.prototype.getConnectionTimes = function () { return this.xmpp.connectionTimes; }, c.prototype.addFeature = function (e, t) {
                if (t === void 0) { t = !1; }
                this.xmpp.caps.addFeature(e, t, !0);
            }, c.prototype.removeFeature = function (e, t) {
                if (t === void 0) { t = !1; }
                this.xmpp.caps.removeFeature(e, t, !0);
            }, c.prototype.getLogs = function () { var e = this.xmpp.getJingleLog(), t = {}; t.time = new Date, t.url = window.location.href, t.ua = navigator.userAgent; var n = this.xmpp.getXmppLog(); return n && (t.xmpp = n), e.metadata = t, e; };
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return ae; })); var i = n(18), r = n.n(i), s = n(4), o = n(33), a = n.n(o), c = n(2), d = n(16), u = n(85), l = n(0), h = n(92), p = n(19), m = n(14), f = n(15), g = n(93), _ = n(115), v = n(13), S = n(3), y = n(123), E = n(124), b = n(51), T = n(21), C = n(125), R = n(126), A = n(76), w = n(127), I = n(128), P = n(56), O = n(129), D = n(130), N = n(131), M = n(132), k = n(133), L = n(30), x = n(134), F = n(135), j = n(136), U = n(6), H = n(137), B = n.n(H), J = n(11), V = n.n(J), G = n(38), K = n.n(G), q = n(138), W = n(139), z = n(26), Q = n(22), X = n(23), Y = n.n(X), Z = n(5), ee = n(12), te = n.n(ee), ne = n(8), ie = n(1); function re(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { se(e, t, n[t]); }));
            } return e; } function se(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var oe = Object(s.getLogger)(e); function ae(e) { if (!e.name || e.name.toLowerCase() !== e.name) {
                var e_90 = "Invalid conference name (no conference name passed or it contains invalid characters like capital letters)!";
                throw oe.error(e_90), new Error(e_90);
            } this.eventEmitter = new r.a, this.options = e, this.eventManager = new u.a(this), this.participants = {}, this._init(e), this.componentsVersions = new q.a(this), this.jvbJingleSession = null, this.lastDominantSpeaker = null, this.dtmfManager = null, this.somebodySupportsDTMF = !1, this.authEnabled = !1, this.startAudioMuted = !1, this.startVideoMuted = !1, this.startMutedPolicy = { audio: !1, video: !1 }, this.isMutedByFocus = !1, this.mutedByFocusActor = null, this.isVideoMutedByFocus = !1, this.mutedVideoByFocusActor = null, this.wasStopped = !1, this.properties = {}, this.connectionQuality = new y.a(this, this.eventEmitter, e), this.avgRtpStatsReporter = new F.a(this, e.config.avgRtpStatsN || 15), this._audioOutputProblemDetector = new x.a(this), this.isJvbConnectionInterrupted = !1, this.speakerStatsCollector = new j.a(this), this.deferredStartP2PTask = null; var t = parseInt(e.config.p2p && e.config.p2p.backToP2PDelay, 10); this.backToP2PDelay = isNaN(t) ? 5 : t, oe.info("backToP2PDelay: " + this.backToP2PDelay), this.isP2PConnectionInterrupted = !1, this.p2p = !1, this.p2pJingleSession = null, this.videoSIPGWHandler = new W.a(this.room), this.recordingManager = new k.a(this.room), this._conferenceJoinAnalyticsEventSent = void 0, this.isE2EESupported() && (oe.info("End-to-End Encryprtion is supported"), this._e2eEncryption = new P.a(this)); } ae.prototype.constructor = ae, ae.resourceCreator = function (e, t) { var n; if (t)
                n = K.a.randomHexString(8).toLowerCase();
            else {
                n = c.Strophe.getNodeFromJid(e).substr(0, 8).toLowerCase();
                /[0-9a-f]{8}/g.test(n) || (n = K.a.randomHexString(8).toLowerCase());
            } return n; }, ae.prototype._init = function (e) {
                var _this = this;
                if (e === void 0) { e = {}; }
                e.connection && (this.connection = e.connection, this.xmpp = this.connection.xmpp, this.eventManager.setupXMPPListeners());
                var t = this.options.config, n = { disabledCodec: t.videoQuality ? t.videoQuality.disabledCodec : t.p2p && t.p2p.disableH264 && Y.a.H264, enforcePreferredCodec: t.videoQuality && t.videoQuality.enforcePreferredCodec, jvbCodec: t.videoQuality && t.videoQuality.preferredCodec || t.preferH264 && Y.a.H264, p2pCodec: t.p2p ? t.p2p.preferredCodec || t.p2p.preferH264 && Y.a.H264 : Y.a.VP8 };
                this.codecSelection = new _.a(this, n), this._statsCurrentId = t.statisticsId ? t.statisticsId : L.a.callStatsUserName, this.room = this.xmpp.createRoom(this.options.name, re({}, t, { statsId: this._statsCurrentId }), ae.resourceCreator), this._onIceConnectionInterrupted = this._onIceConnectionInterrupted.bind(this), this.room.addListener(ie.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted), this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this), this.room.addListener(ie.CONNECTION_RESTORED, this._onIceConnectionRestored), this._onIceConnectionEstablished = this._onIceConnectionEstablished.bind(this), this.room.addListener(ie.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished), this._updateProperties = this._updateProperties.bind(this), this.room.addListener(ie.CONFERENCE_PROPERTIES_CHANGED, this._updateProperties), this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this), this.room.addListener(ie.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent), this.e2eping = new O.a(this, t, function (e, t) { try {
                    _this.sendMessage(e, t, !0);
                }
                catch (e) {
                    oe.warn("Failed to send E2E ping request or response.", e && e.msg);
                } }), this.rtc || (this.rtc = new v.a(this, e), this.eventManager.setupRTCListeners()), this.receiveVideoController = new N.a(this, this.rtc), this.sendVideoController = new M.a(this, this.rtc), this.participantConnectionStatus = new b.b(this.rtc, this, { rtcMuteTimeout: t._peerConnStatusRtcMuteTimeout, outOfLastNTimeout: t._peerConnStatusOutOfLastNTimeout }), this.participantConnectionStatus.init();
                var i = !0;
                if (t.testing && t.testing.callStatsThreshold && (i = 100 * Math.random() <= t.testing.callStatsThreshold), this.statistics || (this.statistics = new U.a(this.xmpp, { aliasName: this._statsCurrentId, userName: t.statisticsDisplayName ? t.statisticsDisplayName : this.myUserId(), confID: t.confID || this.connection.options.hosts.domain + "/" + this.options.name, siteID: t.siteID, customScriptUrl: t.callStatsCustomScriptUrl, callStatsID: t.callStatsID, callStatsSecret: t.callStatsSecret, callStatsApplicationLogsDisabled: t.callStatsApplicationLogsDisabled, enableCallStats: i, roomName: this.options.name, applicationName: t.applicationName, getWiFiStatsMethod: t.getWiFiStatsMethod }), U.a.analytics.addPermanentProperties({ callstats_name: this._statsCurrentId }), t.longTasksStatsInterval && this.statistics.attachLongTasksStats(this)), this.eventManager.setupChatRoomListeners(), this.eventManager.setupStatisticsListeners(), t.enableTalkWhileMuted && !S.a.isWebKitBased())
                    if (t.createVADProcessor) {
                        oe.info("Using VAD detection for generating talk while muted events"), this._audioAnalyser || (this._audioAnalyser = new A.a(this, t.createVADProcessor));
                        var e_91 = new I.a;
                        e_91.on(T.VAD_TALK_WHILE_MUTED, function () { return _this.eventEmitter.emit(l.TALK_WHILE_MUTED); }), this._audioAnalyser.addVADDetectionService(e_91);
                    }
                    else
                        oe.warn("No VAD Processor was provided. Talk while muted detection service was not initialized!");
                if (t.enableNoisyMicDetection && !S.a.isWebKitBased())
                    if (t.createVADProcessor) {
                        this._audioAnalyser || (this._audioAnalyser = new A.a(this, t.createVADProcessor));
                        var e_92 = new w.a;
                        e_92.on(T.VAD_NOISY_DEVICE, function () { return _this.eventEmitter.emit(l.NOISY_MIC); }), this._audioAnalyser.addVADDetectionService(e_92);
                    }
                    else
                        oe.warn("No VAD Processor was provided. Noisy microphone detection service was not initialized!");
                t.enableNoAudioDetection && (this._noAudioSignalDetection = new C.a(this), this._noAudioSignalDetection.on(T.NO_AUDIO_INPUT, function () { _this.eventEmitter.emit(l.NO_AUDIO_INPUT); }), this._noAudioSignalDetection.on(T.AUDIO_INPUT_STATE_CHANGE, function (e) { _this.eventEmitter.emit(l.AUDIO_INPUT_STATE_CHANGE, e); })), "channelLastN" in t && this.setLastN(t.channelLastN), this.jvb121Status = new D.a(this), this.p2pDominantSpeakerDetection = new R.a(this), t && t.deploymentInfo && t.deploymentInfo.userRegion && this.setLocalParticipantProperty("region", t.deploymentInfo.userRegion), this.setLocalParticipantProperty("codecType", this.codecSelection.getPreferredCodec());
            }, ae.prototype.join = function (e) {
                var _this = this;
                this.room && this.room.join(e).then(function () { return _this._maybeSetSITimeout(); });
            }, ae.prototype.authenticateAndUpgradeRole = function (e) { return g.a.call(this, re({}, e, { onCreateResource: ae.resourceCreator })); }, ae.prototype.isJoined = function () { return this.room && this.room.joined; }, ae.prototype.isP2PEnabled = function () { return Boolean(this.options.config.p2p && this.options.config.p2p.enabled) || void 0 === this.options.config.p2p; }, ae.prototype.isP2PTestModeEnabled = function () { return Boolean(this.options.config.testing && this.options.config.testing.p2pTestMode); }, ae.prototype.leave = function () {
                var _this = this;
                if (this.participantConnectionStatus && (this.participantConnectionStatus.dispose(), this.participantConnectionStatus = null), this.avgRtpStatsReporter && (this.avgRtpStatsReporter.dispose(), this.avgRtpStatsReporter = null), this._audioOutputProblemDetector && (this._audioOutputProblemDetector.dispose(), this._audioOutputProblemDetector = null), this.e2eping && (this.e2eping.stop(), this.e2eping = null), this.getLocalTracks().forEach(function (e) { return _this.onLocalTrackRemoved(e); }), this.rtc.closeBridgeChannel(), this._sendConferenceLeftAnalyticsEvent(), this.statistics && this.statistics.dispose(), this._delayedIceFailed && this._delayedIceFailed.cancel(), this.jvbJingleSession && (this.jvbJingleSession.close(), this.jvbJingleSession = null), this.p2pJingleSession && (this.p2pJingleSession.close(), this.p2pJingleSession = null), this.room) {
                    var e_93 = this.room;
                    return e_93.removeListener(ie.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted), e_93.removeListener(ie.CONNECTION_RESTORED, this._onIceConnectionRestored), e_93.removeListener(ie.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished), e_93.removeListener(ie.CONFERENCE_PROPERTIES_CHANGED, this._updateProperties), e_93.removeListener(ie.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent), this.eventManager.removeXMPPListeners(), this.room = null, e_93.leave().then(function () { _this.rtc && _this.rtc.destroy(); }).catch(function (e) { throw _this.getParticipants().forEach(function (e) { return _this.onMemberLeft(e.getJid()); }), e; });
                }
                return Promise.reject(new Error("The conference is has been already left"));
            }, ae.prototype._getActiveMediaSession = function () { return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession; }, ae.prototype._getMediaSessions = function () { var e = []; return this.jvbJingleSession && e.push(this.jvbJingleSession), this.p2pJingleSession && e.push(this.p2pJingleSession), e; }, ae.prototype.getName = function () { return this.options.name; }, ae.prototype.getConnection = function () { return this.connection; }, ae.prototype.isAuthEnabled = function () { return this.authEnabled; }, ae.prototype.isLoggedIn = function () { return Boolean(this.authIdentity); }, ae.prototype.getAuthLogin = function () { return this.authIdentity; }, ae.prototype.isExternalAuthEnabled = function () { return this.room && this.room.moderator.isExternalAuthEnabled(); }, ae.prototype.getExternalAuthUrl = function (e) {
                var _this = this;
                return new Promise(function (t, n) { _this.isExternalAuthEnabled() ? e ? _this.room.moderator.getPopupLoginUrl(t, n) : _this.room.moderator.getLoginUrl(t, n) : n(); });
            }, ae.prototype.getLocalTracks = function (e) { var t = []; return this.rtc && (t = this.rtc.getLocalTracks(e)), t; }, ae.prototype.getLocalAudioTrack = function () { return this.rtc ? this.rtc.getLocalAudioTrack() : null; }, ae.prototype.getLocalVideoTrack = function () { return this.rtc ? this.rtc.getLocalVideoTrack() : null; }, ae.prototype.getPerformanceStats = function () { return { longTasksStats: this.statistics.getLongTasksStats() }; }, ae.prototype.on = function (e, t) { this.eventEmitter && this.eventEmitter.on(e, t); }, ae.prototype.off = function (e, t) { this.eventEmitter && this.eventEmitter.removeListener(e, t); }, ae.prototype.addEventListener = ae.prototype.on, ae.prototype.removeEventListener = ae.prototype.off, ae.prototype.addCommandListener = function (e, t) { this.room && this.room.addPresenceListener(e, t); }, ae.prototype.removeCommandListener = function (e, t) { this.room && this.room.removePresenceListener(e, t); }, ae.prototype.sendTextMessage = function (e, t) {
                if (t === void 0) { t = "body"; }
                if (this.room) {
                    var n_50 = (this.room.getFromPresence("nick") || {}).value;
                    this.room.sendMessage(e, t, n_50);
                }
            }, ae.prototype.sendPrivateTextMessage = function (e, t, n) {
                if (n === void 0) { n = "body"; }
                this.room && this.room.sendPrivateMessage(e, t, n);
            }, ae.prototype.sendCommand = function (e, t) { this.room ? this.room.addOrReplaceInPresence(e, t) && this.room.sendPresence() : oe.warn("Not sending a command, room not initialized."); }, ae.prototype.sendCommandOnce = function (e, t) { this.sendCommand(e, t), this.removeCommand(e); }, ae.prototype.removeCommand = function (e) { this.room && this.room.removeFromPresence(e); }, ae.prototype.setDisplayName = function (e) { this.room && this.room.addOrReplaceInPresence("nick", { attributes: { xmlns: "http://jabber.org/protocol/nick" }, value: e }) && this.room.sendPresence(); }, ae.prototype.setSubject = function (e) { this.room && this.isModerator() && this.room.setSubject(e); }, ae.prototype.getTranscriber = function () { if (void 0 === this.transcriber) {
                this.transcriber = new B.a;
                var e_95 = this.getLocalTracks(Z.a);
                for (var _i = 0, e_94 = e_95; _i < e_94.length; _i++) {
                    var t_76 = e_94[_i];
                    this.transcriber.addTrack(t_76);
                }
                var t_77 = this.rtc.getRemoteTracks(Z.a);
                for (var _a = 0, t_75 = t_77; _a < t_75.length; _a++) {
                    var e_96 = t_75[_a];
                    this.transcriber.addTrack(e_96);
                }
            } return this.transcriber; }, ae.prototype.getTranscriptionStatus = function () { return this.room.transcriptionStatus; }, ae.prototype.addTrack = function (e) { var t = e.getType(), n = this.rtc.getLocalTracks(t); return n.length > 0 ? e === n[0] ? Promise.resolve(e) : Promise.reject(new Error("Cannot add second " + t + " track to the conference")) : this.replaceTrack(null, e); }, ae.prototype._fireAudioLevelChangeEvent = function (e, t) { var n = this.getActivePeerConnection(); t && n !== t || this.eventEmitter.emit(l.TRACK_AUDIO_LEVEL_CHANGED, this.myUserId(), e); }, ae.prototype._fireMuteChangeEvent = function (e) { var t; if (this.isMutedByFocus && e.isAudioTrack() && !e.isMuted() ? (this.isMutedByFocus = !1, this.room.muteParticipant(this.room.myroomjid, !1, Z.a)) : this.isVideoMutedByFocus && e.isVideoTrack() && !e.isMuted() && (this.isVideoMutedByFocus = !1, this.room.muteParticipant(this.room.myroomjid, !1, Z.c)), this.mutedByFocusActor && e.isAudioTrack()) {
                var e_97 = c.Strophe.getResourceFromJid(this.mutedByFocusActor);
                t = this.participants[e_97];
            }
            else if (this.mutedVideoByFocusActor && e.isVideoTrack()) {
                var e_98 = c.Strophe.getResourceFromJid(this.mutedVideoByFocusActor);
                t = this.participants[e_98];
            } this.eventEmitter.emit(l.TRACK_MUTE_CHANGED, e, t); }, ae.prototype._getInitialLocalTracks = function () {
                var _this = this;
                return this.getLocalTracks().filter(function (e) { return e.getType() === Z.a && !_this.isStartAudioMuted() || e.getType() === Z.c && !_this.isStartVideoMuted(); });
            }, ae.prototype.onLocalTrackRemoved = function (e) { e._setConference(null), this.rtc.removeLocalTrack(e), e.removeEventListener(f.TRACK_MUTE_CHANGED, e.muteHandler), e.removeEventListener(f.TRACK_AUDIO_LEVEL_CHANGED, e.audioLevelHandler), e.isVideoTrack() && e.videoType === te.a.DESKTOP && this.statistics.sendScreenSharingEvent(!1), this.eventEmitter.emit(l.TRACK_REMOVED, e); }, ae.prototype.removeTrack = function (e) { return this.replaceTrack(e, null); }, ae.prototype.replaceTrack = function (e, t) {
                var _this = this;
                return e && e.disposed || t && t.disposed ? Promise.reject(new p.a(m.TRACK_IS_DISPOSED)) : this._doReplaceTrack(e, t).then(function () { return (e && _this.onLocalTrackRemoved(e), t ? (_this._setupNewTrack(t), t.isVideoTrack() && _this.rtc.setVideoType(t.videoType)) : e && e.isVideoTrack() && _this.rtc.setVideoType(te.a.NONE), Promise.resolve()); }).catch(function (e) { return Promise.reject(new Error(e)); });
            }, ae.prototype._doReplaceTrack = function (e, t) { var n = []; return this.jvbJingleSession ? n.push(this.jvbJingleSession.replaceTrack(e, t)) : oe.info("_doReplaceTrack - no JVB JingleSession"), this.p2pJingleSession ? n.push(this.p2pJingleSession.replaceTrack(e, t)) : oe.info("_doReplaceTrack - no P2P JingleSession"), Promise.all(n); }, ae.prototype._setupNewTrack = function (e) { if (e.isAudioTrack() || e.isVideoTrack() && e.videoType !== te.a.DESKTOP) {
                var t_78 = v.a.getCurrentlyAvailableMediaDevices().find(function (t) { return t.kind === e.getTrack().kind + "input" && t.label === e.getTrack().label; });
                t_78 && U.a.sendActiveDeviceListEvent(v.a.getEventDataForActiveDevice(t_78));
            } e.isVideoTrack() && this.sendCommand("videoType", { value: e.videoType, attributes: { xmlns: "http://jitsi.org/jitmeet/video" } }), this.rtc.addLocalTrack(e), e.isAudioTrack() ? this.room.setAudioMute(e.isMuted()) : this.room.setVideoMute(e.isMuted()), e.muteHandler = this._fireMuteChangeEvent.bind(this, e), e.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this), e.addEventListener(f.TRACK_MUTE_CHANGED, e.muteHandler), e.addEventListener(f.TRACK_AUDIO_LEVEL_CHANGED, e.audioLevelHandler), e._setConference(this), this.eventEmitter.emit(l.TRACK_ADDED, e); }, ae.prototype._addLocalTrackAsUnmute = function (e) {
                var _this = this;
                var t = [];
                return this.jvbJingleSession ? t.push(this.jvbJingleSession.addTrackAsUnmute(e)) : oe.debug("Add local MediaStream as unmute - no JVB Jingle session started yet"), this.p2pJingleSession ? t.push(this.p2pJingleSession.addTrackAsUnmute(e)) : oe.debug("Add local MediaStream as unmute - no P2P Jingle session started yet"), Promise.allSettled(t).then(function () { e.isVideoTrack() && _this.rtc.setVideoType(e.videoType); });
            }, ae.prototype._removeLocalTrackAsMute = function (e) {
                var _this = this;
                var t = [];
                return this.jvbJingleSession ? t.push(this.jvbJingleSession.removeTrackAsMute(e)) : oe.debug("Remove local MediaStream - no JVB JingleSession started yet"), this.p2pJingleSession ? t.push(this.p2pJingleSession.removeTrackAsMute(e)) : oe.debug("Remove local MediaStream - no P2P JingleSession started yet"), Promise.allSettled(t).then(function () { e.isVideoTrack() && _this.rtc.setVideoType(te.a.NONE); });
            }, ae.prototype.getRole = function () { return this.room.role; }, ae.prototype.isHidden = function () { return this.connection ? c.Strophe.getDomainFromJid(this.connection.getJid()) === this.options.config.hiddenDomain : null; }, ae.prototype.isModerator = function () { return this.room ? this.room.isModerator() : null; }, ae.prototype.lock = function (e) {
                var _this = this;
                return this.isModerator() ? new Promise(function (t, n) { _this.room.lockRoom(e || "", function () { return t(); }, function (e) { return n(e); }, function () { return n(d.PASSWORD_NOT_SUPPORTED); }); }) : Promise.reject(new Error("You are not moderator."));
            }, ae.prototype.unlock = function () { return this.lock(); }, ae.prototype.selectParticipant = function (e) { this.selectParticipants([e]); }, ae.prototype.selectParticipants = function (e) { if (!Array.isArray(e))
                throw new Error("Invalid argument; participantIds must be an array."); this.receiveVideoController.selectEndpoints(e); }, ae.prototype.getLastN = function () { return this.receiveVideoController.getLastN(); }, ae.prototype.setLastN = function (e) { if (!Number.isInteger(e) && !Number.parseInt(e, 10))
                throw new Error("Invalid value for lastN: " + e); var t = Number(e); if (t < -1)
                throw new RangeError("lastN cannot be smaller than -1"); if (this.receiveVideoController.setLastN(t), this.p2pJingleSession) {
                var e_99 = 0 !== t;
                this.p2pJingleSession.setMediaTransferActive(!0, e_99).catch(function (t) { oe.error("Failed to adjust video transfer status (" + e_99 + ")", t); });
            } }, ae.prototype.isInLastN = function (e) { return this.rtc.isInLastN(e); }, ae.prototype.getParticipants = function () { return Object.values(this.participants); }, ae.prototype.getParticipantCount = function (e) {
                if (e === void 0) { e = !1; }
                var t = this.getParticipants();
                return e || (t = t.filter(function (e) { return !e.isHidden(); })), t.length + 1;
            }, ae.prototype.getParticipantById = function (e) { return this.participants[e]; }, ae.prototype.grantOwner = function (e) { var t = this.getParticipantById(e); t && this.room.setAffiliation(t.getJid(), "owner"); }, ae.prototype.revokeOwner = function (e) { var t = this.getParticipantById(e), n = this.myUserId() === e, i = this.isMembersOnly() ? "member" : "none"; n ? this.room.setAffiliation(this.room.myroomjid, i) : t && this.room.setAffiliation(t.getJid(), i); }, ae.prototype.kickParticipant = function (e, t) { var n = this.getParticipantById(e); n && this.room.kick(n.getJid(), t); }, ae.prototype._maybeClearSITimeout = function () { this._sessionInitiateTimeout && (this.jvbJingleSession || this.getParticipantCount() < 2) && (window.clearTimeout(this._sessionInitiateTimeout), this._sessionInitiateTimeout = null); }, ae.prototype._maybeSetSITimeout = function () {
                var _this = this;
                !this.jvbJingleSession && this.getParticipantCount() >= 2 && !this._sessionInitiateTimeout && (this._sessionInitiateTimeout = window.setTimeout(function () { _this._sessionInitiateTimeout = null, U.a.sendAnalytics(Object(ne.G)(ne.d, { p2p: !1, value: 5e3 })); }, 5e3));
            }, ae.prototype.muteParticipant = function (e, t) { var n = t || Z.a; if (n !== Z.a && n !== Z.c)
                return void oe.error("Unsupported media type: " + n); var i = this.getParticipantById(e); i && this.room.muteParticipant(i.getJid(), !0, n); }, ae.prototype.onMemberJoined = function (e, t, n, i, r, s, o, a, d, u) { var p = c.Strophe.getResourceFromJid(e); if ("focus" === p || this.myUserId() === p)
                return; var m = new h.a(e, this, t, i, r, s, o); m.setRole(n), m.setBotType(a), m.setFeatures(u), this.participants[p] = m, this.eventEmitter.emit(l.USER_JOINED, p, m), this._updateFeatures(m), this.isJoined() && this._maybeStartOrStopP2P(), this._maybeSetSITimeout(); }, ae.prototype._onMucJoined = function () { this._maybeStartOrStopP2P(); }, ae.prototype._updateFeatures = function (e) {
                var _this = this;
                e.getFeatures().then(function (t) { e._supportsDTMF = t.has("urn:xmpp:jingle:dtmf:0"), _this.updateDTMFSupport(), t.has(Q.c) && e.setProperty("features_jigasi", !0), t.has(Q.b) && e.setProperty("features_e2ee", !0); }).catch(function () { return !1; });
            }, ae.prototype._onMemberBotTypeChanged = function (e, t) { var n = this.getParticipants().find(function (t) { return t.getJid() === e; }); if (n) {
                n.setBotType(t);
                var i_30 = c.Strophe.getResourceFromJid(e);
                this.eventEmitter.emit(l.BOT_TYPE_CHANGED, i_30, t);
            } n.getBotType() || this._maybeStartOrStopP2P(); }, ae.prototype.onMemberLeft = function (e) {
                var _this = this;
                var t = c.Strophe.getResourceFromJid(e);
                if ("focus" === t || this.myUserId() === t)
                    return;
                var n = this.participants[t];
                delete this.participants[t];
                var i = this._getMediaSessions(), r = [];
                for (var _i = 0, i_31 = i; _i < i_31.length; _i++) {
                    var e_100 = i_31[_i];
                    r.push(e_100.removeRemoteStreamsOnLeave(t));
                }
                Promise.allSettled(r).then(function (e) { var i = []; e.map(function (e) { return e.value; }).forEach(function (e) { e && (i = i.concat(e)); }), i.forEach(function (e) { _this.eventEmitter.emit(l.TRACK_REMOVED, e); }), n && _this.eventEmitter.emit(l.USER_LEFT, t, n), _this._maybeStartOrStopP2P(!0), _this._maybeClearSITimeout(); });
            }, ae.prototype.onMemberKicked = function (e, t, n, i) { if (t === this.myUserId())
                return; var r = this.participants[t]; if (e)
                return this.eventEmitter.emit(l.KICKED, r, i), void this.leave(); var s = this.participants[n]; this.eventEmitter.emit(l.PARTICIPANT_KICKED, r, s, i); }, ae.prototype.onLocalRoleChanged = function (e) { this.eventEmitter.emit(l.USER_ROLE_CHANGED, this.myUserId(), e); }, ae.prototype.onUserRoleChanged = function (e, t) { var n = c.Strophe.getResourceFromJid(e), i = this.getParticipantById(n); i && (i.setRole(t), this.eventEmitter.emit(l.USER_ROLE_CHANGED, n, t)); }, ae.prototype.onDisplayNameChanged = function (e, t) { var n = c.Strophe.getResourceFromJid(e), i = this.getParticipantById(n); i && i._displayName !== t && (i._displayName = t, this.eventEmitter.emit(l.DISPLAY_NAME_CHANGED, n, t)); }, ae.prototype.onRemoteTrackAdded = function (e) {
                var _this = this;
                if (e.isP2P && !this.isP2PActive())
                    return void oe.info("Trying to add remote P2P track, when not in P2P - IGNORED");
                if (!e.isP2P && this.isP2PActive())
                    return void oe.info("Trying to add remote JVB track, when in P2P - IGNORED");
                var t = e.getParticipantId(), n = this.getParticipantById(t);
                if (!n)
                    return void oe.error("No participant found for id: " + t);
                n._tracks.push(e), this.transcriber && this.transcriber.addTrack(e);
                var i = this.eventEmitter;
                e.addEventListener(f.TRACK_MUTE_CHANGED, function () { return i.emit(l.TRACK_MUTE_CHANGED, e); }), e.addEventListener(f.TRACK_AUDIO_LEVEL_CHANGED, function (e, n) { _this.getActivePeerConnection() === n && i.emit(l.TRACK_AUDIO_LEVEL_CHANGED, t, e); }), i.emit(l.TRACK_ADDED, e);
            }, ae.prototype.onCallAccepted = function (e, t) { this.p2pJingleSession === e && (oe.info("P2P setAnswer"), this.p2pJingleSession.setAnswer(t), this.eventEmitter.emit(l._MEDIA_SESSION_STARTED, this.p2pJingleSession)); }, ae.prototype.onTransportInfo = function (e, t) { this.p2pJingleSession === e && (oe.info("P2P addIceCandidates"), this.p2pJingleSession.addIceCandidates(t)); }, ae.prototype.onRemoteTrackRemoved = function (e) {
                var _this = this;
                this.getParticipants().forEach(function (t) { var n = t.getTracks(); for (var i_32 = 0; i_32 < n.length; i_32++)
                    if (n[i_32] === e) {
                        t._tracks.splice(i_32, 1), _this.eventEmitter.emit(l.TRACK_REMOVED, e), _this.transcriber && _this.transcriber.removeTrack(e);
                        break;
                    } }, this);
            }, ae.prototype._onIncomingCallP2P = function (e, t) { var n; S.a.supportsP2P() ? this.isP2PEnabled() || this.isP2PTestModeEnabled() ? this.p2pJingleSession ? n = { reason: "busy", reasonDescription: "P2P already in progress", errorMsg: 'Duplicated P2P "session-initiate"' } : this._shouldBeInP2PMode() || (n = { reason: "decline", reasonDescription: "P2P requirements not met", errorMsg: 'Received P2P "session-initiate" when should not be in P2P mode' }, U.a.sendAnalytics(Object(ne.G)(ne.h))) : n = { reason: "decline", reasonDescription: "P2P disabled", errorMsg: "P2P mode disabled in the configuration" } : n = { reason: "unsupported-applications", reasonDescription: "P2P not supported", errorMsg: "This client does not support P2P connections" }, n ? this._rejectIncomingCall(e, n) : this._acceptP2PIncomingCall(e, t); }, ae.prototype.onIncomingCall = function (e, t, n) { if (e.isP2P)
                this._onIncomingCallP2P(e, t);
            else {
                if (!this.room.isFocus(e.remoteJid)) {
                    var t_79 = "Rejecting session-initiate from non-focus.";
                    return void this._rejectIncomingCall(e, { reason: "security-error", reasonDescription: t_79, errorMsg: t_79 });
                }
                this._acceptJvbIncomingCall(e, t, n);
            } }, ae.prototype._acceptJvbIncomingCall = function (e, t, n) {
                var _this = this;
                this.jvbJingleSession = e, this.room.connectionTimes["session.initiate"] = n, this._sendConferenceJoinAnalyticsEvent(), this.wasStopped && U.a.sendAnalyticsAndLog(Object(ne.G)(ne.a, { p2p: !1 }));
                var i = $(t).find('>bridge-session[xmlns="http://jitsi.org/protocol/focus"]').attr("region");
                this.eventEmitter.emit(l.SERVER_REGION_CHANGED, i), this._maybeClearSITimeout(), U.a.sendAnalytics(Object(ne.G)(ne.c, { p2p: !1, value: n }));
                try {
                    e.initialize(this.room, this.rtc, re({}, this.options.config, { enableInsertableStreams: this.isE2EEEnabled() }));
                }
                catch (e) {
                    return V.a.callErrorHandler(e), void oe.error(e);
                }
                this._setBridgeChannel(t, e.peerconnection);
                var r = this._getInitialLocalTracks();
                try {
                    e.acceptOffer(t, function () { _this.isP2PActive() && _this.jvbJingleSession && _this._suspendMediaTransferForJvbConnection(), _this.eventEmitter.emit(l._MEDIA_SESSION_STARTED, e), _this.isP2PActive() || _this.eventEmitter.emit(l._MEDIA_SESSION_ACTIVE_CHANGED, e); }, function (e) { V.a.callErrorHandler(e), oe.error("Failed to accept incoming Jingle session", e); }, r), oe.info("Starting CallStats for JVB connection..."), this.statistics.startCallStats(this.jvbJingleSession.peerconnection, "jitsi"), this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);
                }
                catch (e) {
                    V.a.callErrorHandler(e), oe.error(e);
                }
            }, ae.prototype._setBridgeChannel = function (e, t) { var n = null; var i = $(e).find(">content>transport>web-socket").first(); 1 === i.length && (n = i[0].getAttribute("url")), n ? this.rtc.initializeBridgeChannel(null, n) : this.rtc.initializeBridgeChannel(t, null); }, ae.prototype._rejectIncomingCall = function (e, t) { t && t.errorMsg && V.a.callErrorHandler(new Error(t.errorMsg)), e.terminate(null, function (e) { oe.warn("An error occurred while trying to terminate invalid Jingle session", e); }, { reason: t && t.reason, reasonDescription: t && t.reasonDescription, sendSessionTerminate: !0 }); }, ae.prototype.onCallEnded = function (e, t, n) { oe.info("Call ended: " + t + " - " + n + " P2P ?" + e.isP2P), e === this.jvbJingleSession ? (this.wasStopped = !0, U.a.sendAnalytics(Object(ne.G)(ne.e, { p2p: !1 })), this.statistics && (this.statistics.stopRemoteStats(this.jvbJingleSession.peerconnection), oe.info("Stopping JVB CallStats"), this.statistics.stopCallStats(this.jvbJingleSession.peerconnection)), this.jvbJingleSession = null, this.rtc.onCallEnded()) : e === this.p2pJingleSession ? ("decline" === t && "force JVB121" === n ? (oe.info("In forced JVB 121 mode..."), U.a.analytics.addPermanentProperties({ forceJvb121: !0 })) : "connectivity-error" === t && "ICE FAILED" === n && U.a.analytics.addPermanentProperties({ p2pFailed: !0 }), this._stopP2PSession()) : oe.error("Received onCallEnded for invalid session", e.sid, e.remoteJid, t, n); }, ae.prototype.onSuspendDetected = function (e) { e.isP2P || (this.leave(), this.eventEmitter.emit(l.SUSPEND_DETECTED)); }, ae.prototype.updateDTMFSupport = function () { var e = !1; var t = this.getParticipants(); for (var n_51 = 0; n_51 < t.length; n_51 += 1)
                if (t[n_51].supportsDTMF()) {
                    e = !0;
                    break;
                } e !== this.somebodySupportsDTMF && (this.somebodySupportsDTMF = e, this.eventEmitter.emit(l.DTMF_SUPPORT_CHANGED, e)); }, ae.prototype.isDTMFSupported = function () { return this.somebodySupportsDTMF; }, ae.prototype.myUserId = function () { return this.room && this.room.myroomjid ? c.Strophe.getResourceFromJid(this.room.myroomjid) : null; }, ae.prototype.sendTones = function (e, t, n) { var i = this.getActivePeerConnection(); i ? i.sendTones(e, t, n) : oe.warn("cannot sendTones: no peer connection"); }, ae.prototype.startRecording = function (e) { return this.room ? this.recordingManager.startRecording(e) : Promise.reject(new Error("The conference is not created yet!")); }, ae.prototype.stopRecording = function (e) { return this.room ? this.recordingManager.stopRecording(e) : Promise.reject(new Error("The conference is not created yet!")); }, ae.prototype.isSIPCallingSupported = function () { return !!this.room && this.room.isSIPCallingSupported(); }, ae.prototype.dial = function (e) { return this.room ? this.room.dial(e) : new Promise(function (e, t) { t(new Error("The conference is not created yet!")); }); }, ae.prototype.hangup = function () { return this.room ? this.room.hangup() : new Promise(function (e, t) { t(new Error("The conference is not created yet!")); }); }, ae.prototype.startTranscriber = function () { return this.dial("jitsi_meet_transcribe"); }, ae.prototype.stopTranscriber = ae.prototype.hangup, ae.prototype.getPhoneNumber = function () { return this.room ? this.room.getPhoneNumber() : null; }, ae.prototype.getPhonePin = function () { return this.room ? this.room.getPhonePin() : null; }, ae.prototype.getMeetingUniqueId = function () { if (this.room)
                return this.room.getMeetingId(); }, ae.prototype.getActivePeerConnection = function () { var e = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession; return e ? e.peerconnection : null; }, ae.prototype.getConnectionState = function () { var e = this.getActivePeerConnection(); return e ? e.getConnectionState() : null; }, ae.prototype.setStartMutedPolicy = function (e) { this.isModerator() && (this.startMutedPolicy = e, this.room.addOrReplaceInPresence("startmuted", { attributes: { audio: e.audio, video: e.video, xmlns: "http://jitsi.org/jitmeet/start-muted" } }) && this.room.sendPresence()); }, ae.prototype.getStartMutedPolicy = function () { return this.startMutedPolicy; }, ae.prototype.isStartAudioMuted = function () { return this.startAudioMuted; }, ae.prototype.isStartVideoMuted = function () { return this.startVideoMuted; }, ae.prototype.getConnectionTimes = function () { return this.room.connectionTimes; }, ae.prototype.setLocalParticipantProperty = function (e, t) { this.sendCommand("jitsi_participant_" + e, { value: t }); }, ae.prototype.removeLocalParticipantProperty = function (e) { this.removeCommand("jitsi_participant_" + e), this.room.sendPresence(); }, ae.prototype.getLocalParticipantProperty = function (e) { var t = this.room.presMap.nodes.find(function (t) { return t.tagName === "jitsi_participant_" + e; }); return t ? t.value : void 0; }, ae.prototype.sendFeedback = function (e, t) { return this.statistics.sendFeedback(e, t); }, ae.prototype.isCallstatsEnabled = function () { return this.statistics.isCallstatsEnabled(); }, ae.prototype.getSsrcByTrack = function (e) { var t; return e.isLocal() ? null === (t = this.getActivePeerConnection()) || void 0 === t ? void 0 : t.getLocalSSRC(e) : e.getSSRC(); }, ae.prototype._onTrackAttach = function (e, t) { var n = e.isLocal(); var i = null; var r = e.isP2P, s = r ? e.getParticipantId() : "jitsi", o = r ? this.p2pJingleSession && this.p2pJingleSession.peerconnection : this.jvbJingleSession && this.jvbJingleSession.peerconnection; n ? o && (i = o.getLocalSSRC(e)) : i = e.getSSRC(), t.id && i && o && this.statistics.associateStreamWithVideoTag(o, i, n, s, e.getUsageLabel(), t.id); }, ae.prototype.sendApplicationLog = function (e) { U.a.sendLog(e); }, ae.prototype._isFocus = function (e) { return this.room ? this.room.isFocus(e) : null; }, ae.prototype._fireIncompatibleVersionsEvent = function () { this.eventEmitter.emit(l.CONFERENCE_FAILED, d.INCOMPATIBLE_SERVER_VERSIONS); }, ae.prototype.sendEndpointMessage = function (e, t) { this.rtc.sendChannelMessage(e, t); }, ae.prototype.sendEndpointStatsMessage = function (e) { this.rtc.sendEndpointStatsMessage(e); }, ae.prototype.broadcastEndpointMessage = function (e) { this.sendEndpointMessage("", e); }, ae.prototype.sendMessage = function (e, t, n) {
                if (t === void 0) { t = ""; }
                if (n === void 0) { n = !1; }
                var i = typeof e;
                if ("object" === i || !n && "string" === i)
                    if (n)
                        this.sendEndpointMessage(t, e);
                    else {
                        var n_52 = e, r_14 = "body";
                        if ("object" === i) {
                            r_14 = "json-message", n_52.hasOwnProperty(Q.d) || (n_52[Q.d] = "");
                            try {
                                n_52 = JSON.stringify(n_52);
                            }
                            catch (e) {
                                return void oe.error("Can not send a message, stringify failed: ", e);
                            }
                        }
                        t ? this.sendPrivateTextMessage(t, n_52, r_14) : this.sendTextMessage(n_52, r_14);
                    }
                else
                    oe.error("Can not send a message of type " + i);
            }, ae.prototype.isConnectionInterrupted = function () { return this.isP2PActive() ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted; }, ae.prototype._onConferenceRestarted = function (e) { !e.isP2P && this.options.config.enableForcedReload && (this.restartInProgress = !0, this.eventEmitter.emit(l.CONFERENCE_FAILED, d.CONFERENCE_RESTARTED)); }, ae.prototype._onIceConnectionInterrupted = function (e) { e.isP2P ? this.isP2PConnectionInterrupted = !0 : this.isJvbConnectionInterrupted = !0, e.isP2P === this.isP2PActive() && this.eventEmitter.emit(l.CONNECTION_INTERRUPTED); }, ae.prototype._onIceConnectionFailed = function (e) { e.isP2P ? (U.a.analytics.addPermanentProperties({ p2pFailed: !0 }), this.p2pJingleSession && U.a.sendAnalyticsAndLog(Object(ne.I)(ne.j, { initiator: this.p2pJingleSession.isInitiator })), this._stopP2PSession("connectivity-error", "ICE FAILED")) : e && this.jvbJingleSession === e && (this._delayedIceFailed = new E.a(this), this._delayedIceFailed.start(e)); }, ae.prototype._onIceConnectionRestored = function (e) { e.isP2P ? this.isP2PConnectionInterrupted = !1 : (this.isJvbConnectionInterrupted = !1, this._delayedIceFailed && this._delayedIceFailed.cancel()), e.isP2P === this.isP2PActive() && this.eventEmitter.emit(l.CONNECTION_RESTORED); }, ae.prototype._acceptP2PIncomingCall = function (e, t) {
                var _this = this;
                this.isP2PConnectionInterrupted = !1, this.p2pJingleSession = e, this._sendConferenceJoinAnalyticsEvent(), this.p2pJingleSession.initialize(this.room, this.rtc, re({}, this.options.config, { enableInsertableStreams: this.isE2EEEnabled() })), oe.info("Starting CallStats for P2P connection...");
                var n = c.Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);
                var i = this.participants[n];
                i && (n = i.getStatsID() || n), this.statistics.startCallStats(this.p2pJingleSession.peerconnection, n);
                var r = this._getInitialLocalTracks();
                this.p2pJingleSession.acceptOffer(t, function () { oe.debug('Got RESULT for P2P "session-accept"'), _this.eventEmitter.emit(l._MEDIA_SESSION_STARTED, _this.p2pJingleSession); }, function (e) { oe.error("Failed to accept incoming P2P Jingle session", e); }, r);
            }, ae.prototype._addRemoteJVBTracks = function () { this._addRemoteTracks("JVB", this.jvbJingleSession.peerconnection.getRemoteTracks()); }, ae.prototype._addRemoteP2PTracks = function () { this._addRemoteTracks("P2P", this.p2pJingleSession.peerconnection.getRemoteTracks()); }, ae.prototype._addRemoteTracks = function (e, t) { for (var _i = 0, t_80 = t; _i < t_80.length; _i++) {
                var n_53 = t_80[_i];
                oe.info("Adding remote " + e + " track: " + n_53), this.onRemoteTrackAdded(n_53);
            } }, ae.prototype._onIceConnectionEstablished = function (e) { null !== this.p2pJingleSession && (this.p2pEstablishmentDuration = this.p2pJingleSession.establishmentDuration), null !== this.jvbJingleSession && (this.jvbEstablishmentDuration = this.jvbJingleSession.establishmentDuration); var t = !1; var n = this.options.config.forceJVB121Ratio; if (e.isP2P ? this.p2pJingleSession !== e ? (oe.error("CONNECTION_ESTABLISHED - wrong P2P session instance ?!"), t = !0) : !e.isInitiator && "number" == typeof n && Math.random() < n && (oe.info("Forcing JVB 121 mode (ratio=" + n + ")..."), U.a.analytics.addPermanentProperties({ forceJvb121: !0 }), this._stopP2PSession("decline", "force JVB121"), t = !0) : t = !0, !isNaN(this.p2pEstablishmentDuration) && !isNaN(this.jvbEstablishmentDuration)) {
                var e_101 = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;
                U.a.sendAnalytics(ne.p, { value: e_101 });
            } e.isP2P === this.isP2PActive() && this.eventEmitter.emit(l.CONNECTION_ESTABLISHED), t || (this._setP2PStatus(!0), this.jvbJingleSession ? this._removeRemoteJVBTracks() : oe.info("Not removing remote JVB tracks - no session yet"), this._addRemoteP2PTracks(), this.jvbJingleSession && this._suspendMediaTransferForJvbConnection(), oe.info("Starting remote stats with p2p connection"), this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection), U.a.sendAnalyticsAndLog(Object(ne.I)(ne.i, { initiator: this.p2pJingleSession.isInitiator }))); }, ae.prototype._updateProperties = function (e) {
                if (e === void 0) { e = {}; }
                var t = !a()(e, this.properties);
                if (this.properties = e, t) {
                    this.eventEmitter.emit(l.PROPERTIES_CHANGED, this.properties);
                    ["bridge-count", "created-ms"].forEach(function (t) {
                        var _a;
                        void 0 !== e[t] && U.a.analytics.addPermanentProperties((_a = {}, _a[t.replace("-", "_")] = e[t], _a));
                    });
                }
            }, ae.prototype.getProperty = function (e) { return this.properties[e]; }, ae.prototype._maybeClearDeferredStartP2P = function () { this.deferredStartP2PTask && (oe.info("Cleared deferred start P2P task"), clearTimeout(this.deferredStartP2PTask), this.deferredStartP2PTask = null); }, ae.prototype._removeRemoteJVBTracks = function () { this._removeRemoteTracks("JVB", this.jvbJingleSession.peerconnection.getRemoteTracks()); }, ae.prototype._removeRemoteP2PTracks = function () { this._removeRemoteTracks("P2P", this.p2pJingleSession.peerconnection.getRemoteTracks()); }, ae.prototype._removeRemoteTracks = function (e, t) { for (var _i = 0, t_81 = t; _i < t_81.length; _i++) {
                var n_54 = t_81[_i];
                oe.info("Removing remote " + e + " track: " + n_54), this.onRemoteTrackRemoved(n_54);
            } }, ae.prototype._resumeMediaTransferForJvbConnection = function () { oe.info("Resuming media transfer over the JVB connection..."), this.jvbJingleSession.setMediaTransferActive(!0, !0).then(function () { oe.info("Resumed media transfer over the JVB connection!"); }, function (e) { oe.error("Failed to resume media transfer over the JVB connection:", e); }); }, ae.prototype._setP2PStatus = function (e) { if (this.p2p !== e) {
                if (this.p2p = e, e) {
                    oe.info("Peer to peer connection established!"), U.a.analytics.addPermanentProperties({ p2pFailed: !1, forceJvb121: !1 });
                    var e_102 = 0 !== this.getLastN();
                    this.p2pJingleSession.setMediaTransferActive(!0, e_102).catch(function (t) { oe.error("Failed to sync up P2P video transfer status(" + e_102 + ")", t); });
                }
                else
                    oe.info("Peer to peer connection closed!");
                this.jvbJingleSession && this.statistics.sendConnectionResumeOrHoldEvent(this.jvbJingleSession.peerconnection, !e), this.dtmfManager = null, this.eventEmitter.emit(l.P2P_STATUS, this, this.p2p), this.eventEmitter.emit(l._MEDIA_SESSION_ACTIVE_CHANGED, this._getActiveMediaSession()), this.eventEmitter.emit(this.isConnectionInterrupted() ? l.CONNECTION_INTERRUPTED : l.CONNECTION_RESTORED);
            }
            else
                oe.debug("Called _setP2PStatus with the same status: " + e); }, ae.prototype._startP2PSession = function (e) { if (this._maybeClearDeferredStartP2P(), this.p2pJingleSession)
                return void oe.error("P2P session already started!"); this.isP2PConnectionInterrupted = !1, this.p2pJingleSession = this.xmpp.connection.jingle.newP2PJingleSession(this.room.myroomjid, e), oe.info("Created new P2P JingleSession", this.room.myroomjid, e), this._sendConferenceJoinAnalyticsEvent(), this.p2pJingleSession.initialize(this.room, this.rtc, re({}, this.options.config, { enableInsertableStreams: this.isE2EEEnabled() })), oe.info("Starting CallStats for P2P connection..."); var t = c.Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid); var n = this.participants[t]; n && (t = n.getStatsID() || t), this.statistics.startCallStats(this.p2pJingleSession.peerconnection, t); var i = this._getInitialLocalTracks(); this.p2pJingleSession.invite(i); }, ae.prototype._suspendMediaTransferForJvbConnection = function () { oe.info("Suspending media transfer over the JVB connection..."), this.jvbJingleSession.setMediaTransferActive(!1, !1).then(function () { oe.info("Suspended media transfer over the JVB connection !"); }, function (e) { oe.error("Failed to suspend media transfer over the JVB connection:", e); }); }, ae.prototype._maybeStartOrStopP2P = function (e) { if (!S.a.supportsP2P() || !this.isP2PEnabled() || this.isP2PTestModeEnabled())
                return void oe.info("Auto P2P disabled"); var t = this.getParticipants(), n = t.length, i = this._shouldBeInP2PMode(); if (!i && this.deferredStartP2PTask && this._maybeClearDeferredStartP2P(), !this.p2pJingleSession && i) {
                var i_33 = n && t[0], r_15 = this.myUserId(), s_10 = i_33.getId();
                if (r_15 > s_10)
                    return void oe.debug("I'm the bigger peersId - the other peer should start P2P", r_15, s_10);
                if (r_15 === s_10)
                    return void oe.error("The same IDs ? ", r_15, s_10);
                var o_8 = i_33.getJid();
                if (e) {
                    if (this.deferredStartP2PTask)
                        return void oe.error("Deferred start P2P task's been set already!");
                    oe.info("Will start P2P with: " + o_8 + " after " + this.backToP2PDelay + " seconds..."), this.deferredStartP2PTask = setTimeout(this._startP2PSession.bind(this, o_8), 1e3 * this.backToP2PDelay);
                }
                else
                    oe.info("Will start P2P with: " + o_8), this._startP2PSession(o_8);
            }
            else
                this.p2pJingleSession && !i && (oe.info("Will stop P2P with: " + this.p2pJingleSession.remoteJid), this.p2pJingleSession.isInitiator && n > 1 && U.a.sendAnalyticsAndLog(Object(ne.I)(ne.k)), this._stopP2PSession()); }, ae.prototype._shouldBeInP2PMode = function () { var e = this.getParticipants(), t = e.length, n = void 0 !== e.find(function (e) { return "poltergeist" === e.getBotType() || e.hasFeature(Q.c); }), i = 1 === t && !n; return oe.debug("P2P? peerCount: " + t + ", hasBotPeer: " + n + " => " + i), i; }, ae.prototype._stopP2PSession = function (e, t) { if (!this.p2pJingleSession)
                return void oe.error("No P2P session to be stopped!"); var n = this.isP2PActive(); n && (this.jvbJingleSession && this._resumeMediaTransferForJvbConnection(), this._removeRemoteP2PTracks()), oe.info("Stopping remote stats for P2P connection"), this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection), oe.info("Stopping CallStats for P2P connection"), this.statistics.stopCallStats(this.p2pJingleSession.peerconnection), this.p2pJingleSession.terminate(function () { oe.info("P2P session terminate RESULT"); }, function (t) { e && oe.error("An error occurred while trying to terminate P2P Jingle session", t); }, { reason: e || "success", reasonDescription: t || "Turing off P2P session", sendSessionTerminate: this.room && this.getParticipantById(c.Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid)) }), this.p2pJingleSession = null, this._setP2PStatus(!1), n && (this.jvbJingleSession ? this._addRemoteJVBTracks() : oe.info("Not adding remote JVB tracks - no session yet")); }, ae.prototype.isP2PActive = function () { return this.p2p; }, ae.prototype.getP2PConnectionState = function () { return this.isP2PActive() ? this.p2pJingleSession.peerconnection.getConnectionState() : null; }, ae.prototype.startP2PSession = function () { var e = this.getParticipants(); if (1 !== e.length)
                throw new Error("There must be exactly 1 participant to start the P2P session !"); {
                var t_82 = e[0].getJid();
                this._startP2PSession(t_82);
            } }, ae.prototype.stopP2PSession = function () { this._stopP2PSession(); }, ae.prototype.getSpeakerStats = function () { return this.speakerStatsCollector.getStats(); }, ae.prototype.setReceiverConstraints = function (e) { this.receiveVideoController.setReceiverConstraints(e); }, ae.prototype.setReceiverVideoConstraint = function (e) { this.receiveVideoController.setPreferredReceiveMaxFrameHeight(e); }, ae.prototype.setSenderVideoConstraint = function (e) { return this.sendVideoController.setPreferredSendMaxFrameHeight(e); }, ae.prototype.createVideoSIPGWSession = function (e, t) { return this.room ? this.videoSIPGWHandler.createVideoSIPGWSession(e, t) : new Error(z.ERROR_NO_CONNECTION); }, ae.prototype._sendConferenceJoinAnalyticsEvent = function () { var e = this.getMeetingUniqueId(); !this._conferenceJoinAnalyticsEventSent && e && null !== this.getActivePeerConnection() && (U.a.sendAnalytics(Object(ne.A)("joined", { meetingId: e, participantId: e + "." + this._statsCurrentId })), this._conferenceJoinAnalyticsEventSent = Date.now()); }, ae.prototype._sendConferenceLeftAnalyticsEvent = function () { var e = this.getMeetingUniqueId(); e && this._conferenceJoinAnalyticsEventSent && U.a.sendAnalytics(Object(ne.A)("left", { meetingId: e, participantId: e + "." + this._statsCurrentId, stats: { duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1e3), perf: this.getPerformanceStats() } })); }, ae.prototype._restartMediaSessions = function () { this.p2pJingleSession && this.stopP2PSession(), this.jvbJingleSession && this.jvbJingleSession.terminate(null, function (e) { oe.warn("An error occurred while trying to terminate the JVB session", e); }, { reason: "success", reasonDescription: "restart required", requestRestart: !0, sendSessionTerminate: !0 }), this._maybeStartOrStopP2P(!1); }, ae.prototype.isE2EEEnabled = function () { return this._e2eEncryption && this._e2eEncryption.isEnabled(); }, ae.prototype.isE2EESupported = function () { return P.a.isSupported(this.options.config); }, ae.prototype.toggleE2EE = function (e) { this.isE2EESupported() ? this._e2eEncryption.setEnabled(e) : oe.warn("Cannot enable / disable E2EE: platform is not supported."); }, ae.prototype.isLobbySupported = function () { return Boolean(this.room && this.room.getLobby().isSupported()); }, ae.prototype.isMembersOnly = function () { return Boolean(this.room && this.room.membersOnlyEnabled); }, ae.prototype.enableLobby = function () { return this.room && this.isModerator() ? this.room.getLobby().enable() : Promise.reject(new Error("The conference not started or user is not moderator")); }, ae.prototype.disableLobby = function () { this.room && this.isModerator() && this.room.getLobby().disable(); }, ae.prototype.joinLobby = function (e, t) { return this.room ? this.room.getLobby().join(e, t) : Promise.reject(new Error("The conference not started")); }, ae.prototype.lobbyDenyAccess = function (e) { this.room && this.room.getLobby().denyAccess(e); }, ae.prototype.lobbyApproveAccess = function (e) { this.room && this.room.getLobby().approveAccess(e); }; }).call(this, "JitsiConference.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return b; })); var i = n(4), r = n(2), s = n(16), o = n(0), a = n(44), c = n(6), d = n(91), u = n.n(d), l = n(5), h = n(7), p = n.n(h), m = n(12), f = n.n(m), g = n(71), _ = n.n(g), v = n(8), S = n(1), y = n.n(S); var E = Object(i.getLogger)(e); function b(e) { this.conference = e, this.xmppListeners = {}, e.on(o.TRACK_MUTE_CHANGED, function (t) { if (!t.isLocal() || !e.statistics)
                return; var n = t.isP2P ? e.p2pJingleSession : e.jvbJingleSession, i = n && n.peerconnection || null; e.statistics.sendMuteEvent(i, t.isMuted(), t.getType()); }); } b.prototype.setupChatRoomListeners = function () {
                var _this = this;
                var e = this.conference, t = e.room;
                this.chatRoomForwarder = new u.a(t, this.conference.eventEmitter), t.addListener(y.a.ICE_RESTARTING, function (t) { t.isP2P || e.rtc.closeBridgeChannel(); }), t.addListener(y.a.PARTICIPANT_FEATURES_CHANGED, function (t, n) { var i = e.getParticipantById(r.Strophe.getResourceFromJid(t)); i && (i.setFeatures(n), e.eventEmitter.emit(o.PARTCIPANT_FEATURES_CHANGED, i)); }), t.addListener(y.a.ICE_RESTART_SUCCESS, function (t, n) { !t.isP2P && e._setBridgeChannel(n, t.peerconnection); }), t.addListener(y.a.AUDIO_MUTED_BY_FOCUS, function (t) { c.a.sendAnalytics(Object(v.K)(l.a)), e.mutedByFocusActor = t, e.rtc.setAudioMute(!0).then(function () { e.isMutedByFocus = !0, e.mutedByFocusActor = null; }).catch(function (t) { e.mutedByFocusActor = null, E.warn("Error while audio muting due to focus request", t); }); }), t.addListener(y.a.VIDEO_MUTED_BY_FOCUS, function (t) { c.a.sendAnalytics(Object(v.K)(l.c)), e.mutedVideoByFocusActor = t, e.rtc.setVideoMute(!0).then(function () { e.isVideoMutedByFocus = !0, e.mutedVideoByFocusActor = null; }).catch(function (t) { e.mutedVideoByFocusActor = null, E.warn("Error while video muting due to focus request", t); }); }), this.chatRoomForwarder.forward(y.a.SUBJECT_CHANGED, o.SUBJECT_CHANGED), this.chatRoomForwarder.forward(y.a.MUC_JOINED, o.CONFERENCE_JOINED), this.chatRoomForwarder.forward(y.a.MEETING_ID_SET, o.CONFERENCE_UNIQUE_ID_SET), t.addListener(y.a.MUC_JOINED, function () { _this.conference._onMucJoined(), _this.conference.isJvbConnectionInterrupted = !1, Object.keys(t.connectionTimes).forEach(function (e) { var n = Object(v.C)("conference_" + e, { value: t.connectionTimes[e] }); c.a.sendAnalytics(n); }), Object.keys(t.xmpp.connectionTimes).forEach(function (e) { var n = Object(v.C)("xmpp_" + e, { value: t.xmpp.connectionTimes[e] }); c.a.sendAnalytics(n); }); }), t.addListener(y.a.RENEGOTIATION_FAILED, function (t, n) { n.isP2P || e.eventEmitter.emit(o.CONFERENCE_FAILED, s.OFFER_ANSWER_FAILED, t); }), this.chatRoomForwarder.forward(y.a.ROOM_JOIN_ERROR, o.CONFERENCE_FAILED, s.CONNECTION_ERROR), this.chatRoomForwarder.forward(y.a.ROOM_CONNECT_ERROR, o.CONFERENCE_FAILED, s.CONNECTION_ERROR), this.chatRoomForwarder.forward(y.a.ROOM_CONNECT_NOT_ALLOWED_ERROR, o.CONFERENCE_FAILED, s.NOT_ALLOWED_ERROR), this.chatRoomForwarder.forward(y.a.ROOM_CONNECT_MEMBERS_ONLY_ERROR, o.CONFERENCE_FAILED, s.MEMBERS_ONLY_ERROR), this.chatRoomForwarder.forward(y.a.ROOM_MAX_USERS_ERROR, o.CONFERENCE_FAILED, s.CONFERENCE_MAX_USERS), this.chatRoomForwarder.forward(y.a.PASSWORD_REQUIRED, o.CONFERENCE_FAILED, s.PASSWORD_REQUIRED), this.chatRoomForwarder.forward(y.a.AUTHENTICATION_REQUIRED, o.CONFERENCE_FAILED, s.AUTHENTICATION_REQUIRED), this.chatRoomForwarder.forward(y.a.BRIDGE_DOWN, o.CONFERENCE_FAILED, s.VIDEOBRIDGE_NOT_AVAILABLE), t.addListener(y.a.BRIDGE_DOWN, function () { return c.a.sendAnalytics(Object(v.z)()); }), t.addListener(y.a.CONNECTION_RESTARTED, function (t) { e._onConferenceRestarted(t); }), this.chatRoomForwarder.forward(y.a.RESERVATION_ERROR, o.CONFERENCE_FAILED, s.RESERVATION_ERROR), this.chatRoomForwarder.forward(y.a.GRACEFUL_SHUTDOWN, o.CONFERENCE_FAILED, s.GRACEFUL_SHUTDOWN), t.addListener(y.a.CONNECTION_ICE_FAILED, function (t) { e._onIceConnectionFailed(t); }), this.chatRoomForwarder.forward(y.a.MUC_DESTROYED, o.CONFERENCE_FAILED, s.CONFERENCE_DESTROYED), this.chatRoomForwarder.forward(y.a.CHAT_ERROR_RECEIVED, o.CONFERENCE_ERROR, s.CHAT_ERROR), this.chatRoomForwarder.forward(y.a.FOCUS_DISCONNECTED, o.CONFERENCE_FAILED, s.FOCUS_DISCONNECTED), t.addListener(y.a.FOCUS_LEFT, function () { c.a.sendAnalytics(Object(v.E)()), e.eventEmitter.emit(o.CONFERENCE_FAILED, s.FOCUS_LEFT); }), t.addListener(y.a.SESSION_ACCEPT_TIMEOUT, function (e) { c.a.sendAnalyticsAndLog(Object(v.G)(v.b, { p2p: e.isP2P })); }), t.addListener(y.a.RECORDER_STATE_CHANGED, function (t, n) { if (n) {
                    var i_34 = e.getParticipantById(r.Strophe.getResourceFromJid(n));
                    "off" === t.getStatus() ? t.setTerminator(i_34) : "on" === t.getStatus() && t.setInitiator(i_34);
                } e.eventEmitter.emit(o.RECORDER_STATE_CHANGED, t); }), this.chatRoomForwarder.forward(y.a.TRANSCRIPTION_STATUS_CHANGED, o.TRANSCRIPTION_STATUS_CHANGED), this.chatRoomForwarder.forward(y.a.VIDEO_SIP_GW_AVAILABILITY_CHANGED, o.VIDEO_SIP_GW_AVAILABILITY_CHANGED), this.chatRoomForwarder.forward(y.a.VIDEO_SIP_GW_SESSION_STATE_CHANGED, o.VIDEO_SIP_GW_SESSION_STATE_CHANGED), this.chatRoomForwarder.forward(y.a.PHONE_NUMBER_CHANGED, o.PHONE_NUMBER_CHANGED), t.setParticipantPropertyListener(function (t, n) { var i = e.getParticipantById(n); i && i.setProperty(t.tagName.substring("jitsi_participant_".length), t.value); }), t.addListener(y.a.KICKED, e.onMemberKicked.bind(e)), t.addListener(y.a.SUSPEND_DETECTED, e.onSuspendDetected.bind(e)), this.chatRoomForwarder.forward(y.a.MUC_LOCK_CHANGED, o.LOCK_STATE_CHANGED), this.chatRoomForwarder.forward(y.a.MUC_MEMBERS_ONLY_CHANGED, o.MEMBERS_ONLY_CHANGED), t.addListener(y.a.MUC_MEMBER_JOINED, e.onMemberJoined.bind(e)), this.chatRoomForwarder.forward(y.a.MUC_LOBBY_MEMBER_JOINED, o.LOBBY_USER_JOINED), this.chatRoomForwarder.forward(y.a.MUC_LOBBY_MEMBER_UPDATED, o.LOBBY_USER_UPDATED), this.chatRoomForwarder.forward(y.a.MUC_LOBBY_MEMBER_LEFT, o.LOBBY_USER_LEFT), t.addListener(y.a.MUC_MEMBER_BOT_TYPE_CHANGED, e._onMemberBotTypeChanged.bind(e)), t.addListener(y.a.MUC_MEMBER_LEFT, e.onMemberLeft.bind(e)), this.chatRoomForwarder.forward(y.a.MUC_LEFT, o.CONFERENCE_LEFT), this.chatRoomForwarder.forward(y.a.MUC_DENIED_ACCESS, o.CONFERENCE_FAILED, s.CONFERENCE_ACCESS_DENIED), t.addListener(y.a.DISPLAY_NAME_CHANGED, e.onDisplayNameChanged.bind(e)), t.addListener(y.a.LOCAL_ROLE_CHANGED, function (t) { e.onLocalRoleChanged(t), e.statistics && e.isModerator() && e.on(o.RECORDER_STATE_CHANGED, function (e) { var t = { error: e.getError(), id: "recorder_status", status: e.getStatus() }; c.a.sendLog(JSON.stringify(t)); }); }), t.addListener(y.a.MUC_ROLE_CHANGED, e.onUserRoleChanged.bind(e)), t.addListener(_.a.IDENTITY_UPDATED, function (t, n) { e.authEnabled = t, e.authIdentity = n, e.eventEmitter.emit(o.AUTH_STATUS_CHANGED, t, n); }), t.addListener(y.a.MESSAGE_RECEIVED, function (t, n, i, s, a) { var c = r.Strophe.getResourceFromJid(t); e.eventEmitter.emit(o.MESSAGE_RECEIVED, c, i, a, n); }), t.addListener(y.a.PRIVATE_MESSAGE_RECEIVED, function (t, n, i, s, a) { var c = r.Strophe.getResourceFromJid(t); e.eventEmitter.emit(o.PRIVATE_MESSAGE_RECEIVED, c, i, a); }), t.addListener(y.a.PRESENCE_STATUS, function (t, n) { var i = r.Strophe.getResourceFromJid(t), s = e.getParticipantById(i); s && s._status !== n && (s._status = n, e.eventEmitter.emit(o.USER_STATUS_CHANGED, i, n)); }), t.addListener(y.a.JSON_MESSAGE_RECEIVED, function (t, n) { var i = r.Strophe.getResourceFromJid(t), s = e.getParticipantById(i); s ? e.eventEmitter.emit(o.ENDPOINT_MESSAGE_RECEIVED, s, n) : E.warn("Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing participant: " + t, n); }), t.addPresenceListener("startmuted", function (t, n) { var i = !1; if (e.myUserId() === n && e.isModerator())
                    i = !0;
                else {
                    var t_83 = e.getParticipantById(n);
                    t_83 && t_83.isModerator() && (i = !0);
                } if (!i)
                    return; var r = "true" === t.attributes.audio, s = "true" === t.attributes.video; var a = !1; r !== e.startMutedPolicy.audio && (e.startMutedPolicy.audio = r, a = !0), s !== e.startMutedPolicy.video && (e.startMutedPolicy.video = s, a = !0), a && e.eventEmitter.emit(o.START_MUTED_POLICY_CHANGED, e.startMutedPolicy); }), e.statistics && (t.addListener(y.a.CONNECTION_ICE_FAILED, function (t) { e.statistics.sendIceConnectionFailedEvent(t.peerconnection); }), t.addListener(y.a.ADD_ICE_CANDIDATE_FAILED, function (t, n) { e.statistics.sendAddIceCandidateFailed(t, n); }));
            }, b.prototype.setupRTCListeners = function () { var e = this.conference, t = e.rtc; t.addListener(p.a.REMOTE_TRACK_ADDED, e.onRemoteTrackAdded.bind(e)), t.addListener(p.a.REMOTE_TRACK_REMOVED, e.onRemoteTrackRemoved.bind(e)), t.addListener(p.a.DOMINANT_SPEAKER_CHANGED, function (t, n) { if (e.lastDominantSpeaker !== t && e.room) {
                if (e.lastDominantSpeaker = t, e.eventEmitter.emit(o.DOMINANT_SPEAKER_CHANGED, t, n), n && n.length) {
                    var i_35 = n.slice(0);
                    e.myUserId !== t && i_35.splice(0, 0, t), i_35.length > a.b && i_35.splice(a.b, i_35.length - a.b), e.statistics && e.statistics.setSpeakerList(i_35);
                }
                e.statistics && e.myUserId() === t && e.statistics.sendDominantSpeakerEvent(e.room.roomjid);
            } }), t.addListener(p.a.DATA_CHANNEL_OPEN, function () { var t = window.performance.now(), n = "data.channel.opened"; E.log("(TIME) " + n + ":\t", t), e.room.connectionTimes[n] = t, c.a.sendAnalytics(Object(v.C)(n, { value: t })), e.eventEmitter.emit(o.DATA_CHANNEL_OPENED); }), t.addListener(p.a.ENDPOINT_MESSAGE_RECEIVED, function (t, n) { var i = e.getParticipantById(t); i ? e.eventEmitter.emit(o.ENDPOINT_MESSAGE_RECEIVED, i, n) : E.warn("Ignored ENDPOINT_MESSAGE_RECEIVED for not existing participant: " + t, n); }), t.addListener(p.a.ENDPOINT_STATS_RECEIVED, function (t, n) { var i = e.getParticipantById(t); i ? e.eventEmitter.emit(o.ENDPOINT_STATS_RECEIVED, i, n) : E.warn("Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: " + t); }), t.addListener(p.a.LOCAL_UFRAG_CHANGED, function (e, t) { e.isP2P || c.a.sendLog(JSON.stringify({ id: "local_ufrag", value: t })); }), t.addListener(p.a.REMOTE_UFRAG_CHANGED, function (e, t) { e.isP2P || c.a.sendLog(JSON.stringify({ id: "remote_ufrag", value: t })); }), t.addListener(p.a.CREATE_ANSWER_FAILED, function (t, n) { e.statistics.sendCreateAnswerFailed(t, n), n.isP2P || e.eventEmitter.emit(o.CONFERENCE_FAILED, s.OFFER_ANSWER_FAILED, t); }), t.addListener(p.a.CREATE_OFFER_FAILED, function (t, n) { e.statistics.sendCreateOfferFailed(t, n), n.isP2P || e.eventEmitter.emit(o.CONFERENCE_FAILED, s.OFFER_ANSWER_FAILED, t); }), t.addListener(p.a.SET_LOCAL_DESCRIPTION_FAILED, function (t, n) { e.statistics.sendSetLocalDescFailed(t, n), n.isP2P || e.eventEmitter.emit(o.CONFERENCE_FAILED, s.OFFER_ANSWER_FAILED, t); }), t.addListener(p.a.SET_REMOTE_DESCRIPTION_FAILED, function (t, n) { e.statistics.sendSetRemoteDescFailed(t, n), n.isP2P || e.eventEmitter.emit(o.CONFERENCE_FAILED, s.OFFER_ANSWER_FAILED, t); }), t.addListener(p.a.LOCAL_TRACK_SSRC_UPDATED, function (t, n) { t.isVideoTrack() && t.videoType === f.a.DESKTOP && e.statistics.sendScreenSharingEvent(!0, n); }); }, b.prototype.removeXMPPListeners = function () {
                var _this = this;
                var e = this.conference;
                Object.keys(this.xmppListeners).forEach(function (t) { e.xmpp.removeListener(t, _this.xmppListeners[t]); }), this.xmppListeners = {};
            }, b.prototype.setupXMPPListeners = function () { var e = this.conference; this._addConferenceXMPPListener(y.a.CALL_INCOMING, e.onIncomingCall.bind(e)), this._addConferenceXMPPListener(y.a.CALL_ACCEPTED, e.onCallAccepted.bind(e)), this._addConferenceXMPPListener(y.a.TRANSPORT_INFO, e.onTransportInfo.bind(e)), this._addConferenceXMPPListener(y.a.CALL_ENDED, e.onCallEnded.bind(e)), this._addConferenceXMPPListener(y.a.START_MUTED_FROM_FOCUS, function (t, n) { e.options.config.ignoreStartMuted || (e.startAudioMuted = t, e.startVideoMuted = n, e.getLocalTracks().forEach(function (t) { switch (t.getType()) {
                case l.a:
                    e.startAudioMuted && t.mute();
                    break;
                case l.c: e.startVideoMuted && t.mute();
            } }), e.eventEmitter.emit(o.STARTED_MUTED)); }), this._addConferenceXMPPListener(y.a.CONFERENCE_TIMESTAMP_RECEIVED, function (t) { e.eventEmitter.emit(o.CONFERENCE_CREATED_TIMESTAMP, t); }); }, b.prototype._addConferenceXMPPListener = function (e, t) { this.xmppListeners[e] = t, this.conference.xmpp.addListener(e, t); }, b.prototype.setupStatisticsListeners = function () { var e = this.conference; e.statistics && (e.statistics.addAudioLevelListener(function (t, n, i, r) { e.rtc.setAudioLevel(t, n, i, r); }), e.statistics.addBeforeDisposedListener(function () { e.eventEmitter.emit(o.BEFORE_STATISTICS_DISPOSED); }), e.options.config.startSilent || e.statistics.addByteSentStatsListener(function (t, n) { e.getLocalTracks(l.a).forEach(function (e) { var i = t.getLocalSSRC(e); i && n.hasOwnProperty(i) && e._onByteSentStatsReceived(t, n[i]); }); })); }; }).call(this, "JitsiConferenceEventManager.js");
        }, function (e, t, n) {
            "use strict";
            (function (e, i) { n.d(t, "a", (function () { return a; })); var r = n(27), s = n(4); var o = Object(s.getLogger)(e);
                var a = /** @class */ (function (_super) {
                    __extends(a, _super);
                    function a() {
                        var _this = this;
                        _this = _super.call(this) || this, o.info("This appears to be " + _this.getName() + ", ver: " + _this.getVersion());
                        return _this;
                    }
                    a.prototype.doesVideoMuteByStreamRemove = function () { return this.isChromiumBased() || this.isWebKitBased(); };
                    a.prototype.supportsP2P = function () { return !this.usesUnifiedPlan(); };
                    a.prototype.isChromiumBased = function () { return this.isChrome() || this.isElectron() || this.isNWJS() || this.isOpera(); };
                    a.prototype.isWebKitBased = function () { return this._bowser.isEngine("webkit") && void 0 !== navigator.mediaDevices && void 0 !== navigator.mediaDevices.getUserMedia && void 0 !== window.RTCRtpTransceiver && Object.keys(RTCRtpTransceiver.prototype).indexOf("currentDirection") > -1; };
                    a.prototype.isTwa = function () { return "matchMedia" in window && window.matchMedia("(display-mode:standalone)").matches; };
                    a.prototype.isSupported = function () { return this.isChromiumBased() && this._getChromiumBasedVersion() >= 72 || this.isFirefox() || this.isReactNative() || this.isWebKitBased(); };
                    a.prototype.isUserInteractionRequiredForUnmute = function () { return this.isFirefox() && this.isVersionLessThan("68"); };
                    a.prototype.supportsVideoMuteOnConnInterrupted = function () { return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased(); };
                    a.prototype.supportsBandwidthStatistics = function () { return !this.isFirefox() && !this.isWebKitBased(); };
                    a.prototype.supportsCodecPreferences = function () { return this.usesUnifiedPlan() && Boolean(window.RTCRtpTransceiver && window.RTCRtpTransceiver.setCodecPreferences && window.RTCRtpReceiver && window.RTCRtpReceiver.getCapabilities) && !this.isWebKitBased(); };
                    a.prototype.supportsDeviceChangeEvent = function () { return navigator.mediaDevices && void 0 !== navigator.mediaDevices.ondevicechange && void 0 !== navigator.mediaDevices.addEventListener; };
                    a.prototype.supportsLocalCandidateRttStatistics = function () { return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased(); };
                    a.prototype.supportsPerformanceObserver = function () { return void 0 !== window.PerformanceObserver && PerformanceObserver.supportedEntryTypes.indexOf("longtask") > -1; };
                    a.prototype.supportsReceiverStats = function () { return void 0 !== window.RTCRtpReceiver && Object.keys(RTCRtpReceiver.prototype).indexOf("getSynchronizationSources") > -1 && !this.isWebKitBased(); };
                    a.prototype.supportsRTTStatistics = function () { return !this.isFirefox(); };
                    a.prototype.usesPlanB = function () { return !this.usesUnifiedPlan(); };
                    a.prototype.usesSdpMungingForSimulcast = function () { return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased(); };
                    a.prototype.usesUnifiedPlan = function () { return !(!this.isFirefox() && !this.isWebKitBased()); };
                    a.prototype.usesNewGumFlow = function () { return !!(this.isChromiumBased() || this.isFirefox() || this.isWebKitBased()); };
                    a.prototype.usesAdapter = function () { return this.usesNewGumFlow(); };
                    a.prototype.usesRidsForSimulcast = function () { return !1; };
                    a.prototype.supportsGetDisplayMedia = function () { return void 0 !== navigator.getDisplayMedia || void 0 !== navigator.mediaDevices && void 0 !== navigator.mediaDevices.getDisplayMedia; };
                    a.prototype.supportsInsertableStreams = function () { if (void 0 === window.RTCRtpSender || !window.RTCRtpSender.prototype.createEncodedStreams && !window.RTCRtpSender.prototype.createEncodedVideoStreams)
                        return !1; var e = new ReadableStream; try {
                        return window.postMessage(e, "*", [e]), !0;
                    }
                    catch (e) {
                        return !1;
                    } };
                    a.prototype.supportsAudioRed = function () { return Boolean(window.RTCRtpSender && window.RTCRtpSender.getCapabilities && window.RTCRtpSender.getCapabilities("audio").codecs.some(function (e) { return "audio/red" === e.mimeType; }) && window.RTCRtpReceiver && window.RTCRtpReceiver.getCapabilities && window.RTCRtpReceiver.getCapabilities("audio").codecs.some(function (e) { return "audio/red" === e.mimeType; })); };
                    a.prototype.supportsSdpSemantics = function () { return this.isChromiumBased(); };
                    a.prototype._getChromiumBasedVersion = function () { if (this.isChromiumBased()) {
                        if (this.isNWJS())
                            return Number.parseInt(i.versions.chromium, 10);
                        var e_103 = navigator.userAgent;
                        if (e_103.match(/Chrome/)) {
                            return Number.parseInt(e_103.match(/Chrome\/([\d.]+)/)[1], 10);
                        }
                    } return -1; };
                    return a;
                }(r.a));  }).call(this, "modules/browser/BrowserCapabilities.js", n(60));
        }, function (e, t, n) { e.exports = function (e) { var t = {}; function n(i) { if (t[i])
            return t[i].exports; var r = t[i] = { i: i, l: !1, exports: {} }; return e[i].call(r.exports, r, r.exports, n), r.l = !0, r.exports; } return n.m = e, n.c = t, n.d = function (e, t, i) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: i }); }, n.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }); }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t)
            return e; if (4 & t && "object" == typeof e && e && e.__esModule)
            return e; var i = Object.create(null); if (n.r(i), Object.defineProperty(i, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e)
            for (var r in e)
                n.d(i, r, function (t) { return e[t]; }.bind(null, r)); return i; }, n.n = function (e) { var t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, "a", t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = "", n(n.s = 90); }({ 17: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i = n(18), r = function () { function e() { } return e.getFirstMatch = function (e, t) { var n = t.match(e); return n && n.length > 0 && n[1] || ""; }, e.getSecondMatch = function (e, t) { var n = t.match(e); return n && n.length > 1 && n[2] || ""; }, e.matchAndReturnConst = function (e, t, n) { if (e.test(t))
                    return n; }, e.getWindowsVersionName = function (e) { switch (e) {
                    case "NT": return "NT";
                    case "XP": return "XP";
                    case "NT 5.0": return "2000";
                    case "NT 5.1": return "XP";
                    case "NT 5.2": return "2003";
                    case "NT 6.0": return "Vista";
                    case "NT 6.1": return "7";
                    case "NT 6.2": return "8";
                    case "NT 6.3": return "8.1";
                    case "NT 10.0": return "10";
                    default: return;
                } }, e.getMacOSVersionName = function (e) { var t = e.split(".").splice(0, 2).map((function (e) { return parseInt(e, 10) || 0; })); if (t.push(0), 10 === t[0])
                    switch (t[1]) {
                        case 5: return "Leopard";
                        case 6: return "Snow Leopard";
                        case 7: return "Lion";
                        case 8: return "Mountain Lion";
                        case 9: return "Mavericks";
                        case 10: return "Yosemite";
                        case 11: return "El Capitan";
                        case 12: return "Sierra";
                        case 13: return "High Sierra";
                        case 14: return "Mojave";
                        case 15: return "Catalina";
                        default: return;
                    } }, e.getAndroidVersionName = function (e) { var t = e.split(".").splice(0, 2).map((function (e) { return parseInt(e, 10) || 0; })); if (t.push(0), !(1 === t[0] && t[1] < 5))
                    return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0; }, e.getVersionPrecision = function (e) { return e.split(".").length; }, e.compareVersions = function (t, n, i) { void 0 === i && (i = !1); var r = e.getVersionPrecision(t), s = e.getVersionPrecision(n), o = Math.max(r, s), a = 0, c = e.map([t, n], (function (t) { var n = o - e.getVersionPrecision(t), i = t + new Array(n + 1).join(".0"); return e.map(i.split("."), (function (e) { return new Array(20 - e.length).join("0") + e; })).reverse(); })); for (i && (a = o - Math.min(r, s)), o -= 1; o >= a;) {
                    if (c[0][o] > c[1][o])
                        return 1;
                    if (c[0][o] === c[1][o]) {
                        if (o === a)
                            return 0;
                        o -= 1;
                    }
                    else if (c[0][o] < c[1][o])
                        return -1;
                } }, e.map = function (e, t) { var n, i = []; if (Array.prototype.map)
                    return Array.prototype.map.call(e, t); for (n = 0; n < e.length; n += 1)
                    i.push(t(e[n])); return i; }, e.getBrowserAlias = function (e) { return i.BROWSER_ALIASES_MAP[e]; }, e.getBrowserTypeByAlias = function (e) { return i.BROWSER_MAP[e] || ""; }, e; }();
                t.default = r, e.exports = t.default;
            }, 18: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0, t.BROWSER_ALIASES_MAP = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" }, t.BROWSER_MAP = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" }, t.PLATFORMS_MAP = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" }, t.OS_MAP = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" }, t.ENGINE_MAP = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
            }, 90: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i, r = (i = n(91)) && i.__esModule ? i : { default: i }, s = n(18);
                function o(e, t) { for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                } }
                var a = function () { function e() { } var t, n; return e.getParser = function (e, t) { if (void 0 === t && (t = !1), "string" != typeof e)
                    throw new Error("UserAgent should be a string"); return new r.default(e, t); }, e.parse = function (e) { return new r.default(e).getResult(); }, t = e, (n = [{ key: "BROWSER_MAP", get: function () { return s.BROWSER_MAP; } }, { key: "ENGINE_MAP", get: function () { return s.ENGINE_MAP; } }, { key: "OS_MAP", get: function () { return s.OS_MAP; } }, { key: "PLATFORMS_MAP", get: function () { return s.PLATFORMS_MAP; } }]) && o(t, n), e; }();
                t.default = a, e.exports = t.default;
            }, 91: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i = c(n(92)), r = c(n(93)), s = c(n(94)), o = c(n(95)), a = c(n(17));
                function c(e) { return e && e.__esModule ? e : { default: e }; }
                var d = function () { function e(e, t) { if (void 0 === t && (t = !1), null == e || "" === e)
                    throw new Error("UserAgent parameter can't be empty"); this._ua = e, this.parsedResult = {}, !0 !== t && this.parse(); } var t = e.prototype; return t.getUA = function () { return this._ua; }, t.test = function (e) { return e.test(this._ua); }, t.parseBrowser = function () { var e = this; this.parsedResult.browser = {}; var t = i.default.find((function (t) { if ("function" == typeof t.test)
                    return t.test(e); if (t.test instanceof Array)
                    return t.test.some((function (t) { return e.test(t); })); throw new Error("Browser's test function is not valid"); })); return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser; }, t.getBrowser = function () { return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser(); }, t.getBrowserName = function (e) { return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || ""; }, t.getBrowserVersion = function () { return this.getBrowser().version; }, t.getOS = function () { return this.parsedResult.os ? this.parsedResult.os : this.parseOS(); }, t.parseOS = function () { var e = this; this.parsedResult.os = {}; var t = r.default.find((function (t) { if ("function" == typeof t.test)
                    return t.test(e); if (t.test instanceof Array)
                    return t.test.some((function (t) { return e.test(t); })); throw new Error("Browser's test function is not valid"); })); return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os; }, t.getOSName = function (e) { var t = this.getOS().name; return e ? String(t).toLowerCase() || "" : t || ""; }, t.getOSVersion = function () { return this.getOS().version; }, t.getPlatform = function () { return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform(); }, t.getPlatformType = function (e) { void 0 === e && (e = !1); var t = this.getPlatform().type; return e ? String(t).toLowerCase() || "" : t || ""; }, t.parsePlatform = function () { var e = this; this.parsedResult.platform = {}; var t = s.default.find((function (t) { if ("function" == typeof t.test)
                    return t.test(e); if (t.test instanceof Array)
                    return t.test.some((function (t) { return e.test(t); })); throw new Error("Browser's test function is not valid"); })); return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform; }, t.getEngine = function () { return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine(); }, t.getEngineName = function (e) { return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || ""; }, t.parseEngine = function () { var e = this; this.parsedResult.engine = {}; var t = o.default.find((function (t) { if ("function" == typeof t.test)
                    return t.test(e); if (t.test instanceof Array)
                    return t.test.some((function (t) { return e.test(t); })); throw new Error("Browser's test function is not valid"); })); return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine; }, t.parse = function () { return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this; }, t.getResult = function () { return Object.assign({}, this.parsedResult); }, t.satisfies = function (e) { var t = this, n = {}, i = 0, r = {}, s = 0; if (Object.keys(e).forEach((function (t) { var o = e[t]; "string" == typeof o ? (r[t] = o, s += 1) : "object" == typeof o && (n[t] = o, i += 1); })), i > 0) {
                    var o = Object.keys(n), a = o.find((function (e) { return t.isOS(e); }));
                    if (a) {
                        var c = this.satisfies(n[a]);
                        if (void 0 !== c)
                            return c;
                    }
                    var d = o.find((function (e) { return t.isPlatform(e); }));
                    if (d) {
                        var u = this.satisfies(n[d]);
                        if (void 0 !== u)
                            return u;
                    }
                } if (s > 0) {
                    var l = Object.keys(r).find((function (e) { return t.isBrowser(e, !0); }));
                    if (void 0 !== l)
                        return this.compareVersion(r[l]);
                } }, t.isBrowser = function (e, t) { void 0 === t && (t = !1); var n = this.getBrowserName().toLowerCase(), i = e.toLowerCase(), r = a.default.getBrowserTypeByAlias(i); return t && r && (i = r.toLowerCase()), i === n; }, t.compareVersion = function (e) { var t = [0], n = e, i = !1, r = this.getBrowserVersion(); if ("string" == typeof r)
                    return ">" === e[0] || "<" === e[0] ? (n = e.substr(1), "=" === e[1] ? (i = !0, n = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? n = e.substr(1) : "~" === e[0] && (i = !0, n = e.substr(1)), t.indexOf(a.default.compareVersions(r, n, i)) > -1; }, t.isOS = function (e) { return this.getOSName(!0) === String(e).toLowerCase(); }, t.isPlatform = function (e) { return this.getPlatformType(!0) === String(e).toLowerCase(); }, t.isEngine = function (e) { return this.getEngineName(!0) === String(e).toLowerCase(); }, t.is = function (e) { return this.isBrowser(e) || this.isOS(e) || this.isPlatform(e); }, t.some = function (e) { var t = this; return void 0 === e && (e = []), e.some((function (e) { return t.is(e); })); }, e; }();
                t.default = d, e.exports = t.default;
            }, 92: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i, r = (i = n(17)) && i.__esModule ? i : { default: i }, s = /version\/(\d+(\.?_?\d+)+)/i, o = [{ test: [/googlebot/i], describe: function (e) { var t = { name: "Googlebot" }, n = r.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/opera/i], describe: function (e) { var t = { name: "Opera" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/opr\/|opios/i], describe: function (e) { var t = { name: "Opera" }, n = r.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/SamsungBrowser/i], describe: function (e) { var t = { name: "Samsung Internet for Android" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/Whale/i], describe: function (e) { var t = { name: "NAVER Whale Browser" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/MZBrowser/i], describe: function (e) { var t = { name: "MZ Browser" }, n = r.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/focus/i], describe: function (e) { var t = { name: "Focus" }, n = r.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/swing/i], describe: function (e) { var t = { name: "Swing" }, n = r.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/coast/i], describe: function (e) { var t = { name: "Opera Coast" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/yabrowser/i], describe: function (e) { var t = { name: "Yandex Browser" }, n = r.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/ucbrowser/i], describe: function (e) { var t = { name: "UC Browser" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/Maxthon|mxios/i], describe: function (e) { var t = { name: "Maxthon" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/epiphany/i], describe: function (e) { var t = { name: "Epiphany" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/puffin/i], describe: function (e) { var t = { name: "Puffin" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/sleipnir/i], describe: function (e) { var t = { name: "Sleipnir" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/k-meleon/i], describe: function (e) { var t = { name: "K-Meleon" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/micromessenger/i], describe: function (e) { var t = { name: "WeChat" }, n = r.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/qqbrowser/i], describe: function (e) { var t = { name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser" }, n = r.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/msie|trident/i], describe: function (e) { var t = { name: "Internet Explorer" }, n = r.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/\sedg\//i], describe: function (e) { var t = { name: "Microsoft Edge" }, n = r.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/edg([ea]|ios)/i], describe: function (e) { var t = { name: "Microsoft Edge" }, n = r.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/vivaldi/i], describe: function (e) { var t = { name: "Vivaldi" }, n = r.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/seamonkey/i], describe: function (e) { var t = { name: "SeaMonkey" }, n = r.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/sailfish/i], describe: function (e) { var t = { name: "Sailfish" }, n = r.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e); return n && (t.version = n), t; } }, { test: [/silk/i], describe: function (e) { var t = { name: "Amazon Silk" }, n = r.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/phantom/i], describe: function (e) { var t = { name: "PhantomJS" }, n = r.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/slimerjs/i], describe: function (e) { var t = { name: "SlimerJS" }, n = r.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function (e) { var t = { name: "BlackBerry" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/(web|hpw)[o0]s/i], describe: function (e) { var t = { name: "WebOS Browser" }, n = r.default.getFirstMatch(s, e) || r.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/bada/i], describe: function (e) { var t = { name: "Bada" }, n = r.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/tizen/i], describe: function (e) { var t = { name: "Tizen" }, n = r.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/qupzilla/i], describe: function (e) { var t = { name: "QupZilla" }, n = r.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/firefox|iceweasel|fxios/i], describe: function (e) { var t = { name: "Firefox" }, n = r.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/chromium/i], describe: function (e) { var t = { name: "Chromium" }, n = r.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/chrome|crios|crmo/i], describe: function (e) { var t = { name: "Chrome" }, n = r.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/GSA/i], describe: function (e) { var t = { name: "Google Search" }, n = r.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: function (e) { var t = !e.test(/like android/i), n = e.test(/android/i); return t && n; }, describe: function (e) { var t = { name: "Android Browser" }, n = r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/playstation 4/i], describe: function (e) { var t = { name: "PlayStation 4" }, n = r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/safari|applewebkit/i], describe: function (e) { var t = { name: "Safari" }, n = r.default.getFirstMatch(s, e); return n && (t.version = n), t; } }, { test: [/.*/i], describe: function (e) { var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /; return { name: r.default.getFirstMatch(t, e), version: r.default.getSecondMatch(t, e) }; } }];
                t.default = o, e.exports = t.default;
            }, 93: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i, r = (i = n(17)) && i.__esModule ? i : { default: i }, s = n(18), o = [{ test: [/Roku\/DVP/], describe: function (e) { var t = r.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e); return { name: s.OS_MAP.Roku, version: t }; } }, { test: [/windows phone/i], describe: function (e) { var t = r.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e); return { name: s.OS_MAP.WindowsPhone, version: t }; } }, { test: [/windows/i], describe: function (e) { var t = r.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e), n = r.default.getWindowsVersionName(t); return { name: s.OS_MAP.Windows, version: t, versionName: n }; } }, { test: [/macintosh/i], describe: function (e) { var t = r.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."), n = r.default.getMacOSVersionName(t), i = { name: s.OS_MAP.MacOS, version: t }; return n && (i.versionName = n), i; } }, { test: [/(ipod|iphone|ipad)/i], describe: function (e) { var t = r.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, "."); return { name: s.OS_MAP.iOS, version: t }; } }, { test: function (e) { var t = !e.test(/like android/i), n = e.test(/android/i); return t && n; }, describe: function (e) { var t = r.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e), n = r.default.getAndroidVersionName(t), i = { name: s.OS_MAP.Android, version: t }; return n && (i.versionName = n), i; } }, { test: [/(web|hpw)[o0]s/i], describe: function (e) { var t = r.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e), n = { name: s.OS_MAP.WebOS }; return t && t.length && (n.version = t), n; } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function (e) { var t = r.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || r.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || r.default.getFirstMatch(/\bbb(\d+)/i, e); return { name: s.OS_MAP.BlackBerry, version: t }; } }, { test: [/bada/i], describe: function (e) { var t = r.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e); return { name: s.OS_MAP.Bada, version: t }; } }, { test: [/tizen/i], describe: function (e) { var t = r.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e); return { name: s.OS_MAP.Tizen, version: t }; } }, { test: [/linux/i], describe: function () { return { name: s.OS_MAP.Linux }; } }, { test: [/CrOS/], describe: function () { return { name: s.OS_MAP.ChromeOS }; } }, { test: [/PlayStation 4/], describe: function (e) { var t = r.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e); return { name: s.OS_MAP.PlayStation4, version: t }; } }];
                t.default = o, e.exports = t.default;
            }, 94: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i, r = (i = n(17)) && i.__esModule ? i : { default: i }, s = n(18), o = [{ test: [/googlebot/i], describe: function () { return { type: "bot", vendor: "Google" }; } }, { test: [/huawei/i], describe: function (e) { var t = r.default.getFirstMatch(/(can-l01)/i, e) && "Nova", n = { type: s.PLATFORMS_MAP.mobile, vendor: "Huawei" }; return t && (n.model = t), n; } }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: function () { return { type: s.PLATFORMS_MAP.tablet, vendor: "Nexus" }; } }, { test: [/ipad/i], describe: function () { return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" }; } }, { test: [/kftt build/i], describe: function () { return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" }; } }, { test: [/silk/i], describe: function () { return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon" }; } }, { test: [/tablet(?! pc)/i], describe: function () { return { type: s.PLATFORMS_MAP.tablet }; } }, { test: function (e) { var t = e.test(/ipod|iphone/i), n = e.test(/like (ipod|iphone)/i); return t && !n; }, describe: function (e) { var t = r.default.getFirstMatch(/(ipod|iphone)/i, e); return { type: s.PLATFORMS_MAP.mobile, vendor: "Apple", model: t }; } }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: function () { return { type: s.PLATFORMS_MAP.mobile, vendor: "Nexus" }; } }, { test: [/[^-]mobi/i], describe: function () { return { type: s.PLATFORMS_MAP.mobile }; } }, { test: function (e) { return "blackberry" === e.getBrowserName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.mobile, vendor: "BlackBerry" }; } }, { test: function (e) { return "bada" === e.getBrowserName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.mobile }; } }, { test: function (e) { return "windows phone" === e.getBrowserName(); }, describe: function () { return { type: s.PLATFORMS_MAP.mobile, vendor: "Microsoft" }; } }, { test: function (e) { var t = Number(String(e.getOSVersion()).split(".")[0]); return "android" === e.getOSName(!0) && t >= 3; }, describe: function () { return { type: s.PLATFORMS_MAP.tablet }; } }, { test: function (e) { return "android" === e.getOSName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.mobile }; } }, { test: function (e) { return "macos" === e.getOSName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.desktop, vendor: "Apple" }; } }, { test: function (e) { return "windows" === e.getOSName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.desktop }; } }, { test: function (e) { return "linux" === e.getOSName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.desktop }; } }, { test: function (e) { return "playstation 4" === e.getOSName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.tv }; } }, { test: function (e) { return "roku" === e.getOSName(!0); }, describe: function () { return { type: s.PLATFORMS_MAP.tv }; } }];
                t.default = o, e.exports = t.default;
            }, 95: function (e, t, n) {
                "use strict";
                t.__esModule = !0, t.default = void 0;
                var i, r = (i = n(17)) && i.__esModule ? i : { default: i }, s = n(18), o = [{ test: function (e) { return "microsoft edge" === e.getBrowserName(!0); }, describe: function (e) { if (/\sedg\//i.test(e))
                            return { name: s.ENGINE_MAP.Blink }; var t = r.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e); return { name: s.ENGINE_MAP.EdgeHTML, version: t }; } }, { test: [/trident/i], describe: function (e) { var t = { name: s.ENGINE_MAP.Trident }, n = r.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: function (e) { return e.test(/presto/i); }, describe: function (e) { var t = { name: s.ENGINE_MAP.Presto }, n = r.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: function (e) { var t = e.test(/gecko/i), n = e.test(/like gecko/i); return t && !n; }, describe: function (e) { var t = { name: s.ENGINE_MAP.Gecko }, n = r.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }, { test: [/(apple)?webkit\/537\.36/i], describe: function () { return { name: s.ENGINE_MAP.Blink }; } }, { test: [/(apple)?webkit/i], describe: function (e) { var t = { name: s.ENGINE_MAP.WebKit }, n = r.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e); return n && (t.version = n), t; } }];
                t.default = o, e.exports = t.default;
            } }); }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(4), r = n(8), s = n(3); function o(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var a = Object(i.getLogger)(e); t.a = new /** @class */ (function () {
                function class_4() {
                    this.reset();
                }
                class_4.prototype.reset = function () { this.disposed = !1, this.analyticsHandlers = new Set, this.cache = [], this.permanentProperties = {}, this.conferenceName = "", this.addPermanentProperties({ user_agent: navigator.userAgent, browser_name: s.a.getName() }); };
                class_4.prototype.dispose = function () { a.warn("Disposing of analytics adapter."), this.analyticsHandlers && this.analyticsHandlers.size > 0 && this.analyticsHandlers.forEach(function (e) { "function" == typeof e.dispose && e.dispose(); }), this.setAnalyticsHandlers([]), this.disposed = !0; };
                class_4.prototype.setAnalyticsHandlers = function (e) {
                    var _this = this;
                    if (this.disposed)
                        return;
                    this.analyticsHandlers = new Set(e), this._setUserProperties();
                    var t = this.cache;
                    this.cache = null, t && t.forEach(function (e) { return _this._sendEvent(e); });
                };
                class_4.prototype._setUserProperties = function () {
                    var _this = this;
                    this.analyticsHandlers.forEach(function (e) { try {
                        e.setUserProperties(_this.permanentProperties);
                    }
                    catch (e) {
                        a.warn("Error in setUserProperties method of one of the analytics handlers: " + e);
                    } });
                };
                class_4.prototype.addPermanentProperties = function (e) { this.permanentProperties = function (e) { for (var t = 1; t < arguments.length; t++) {
                    var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                    "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { o(e, t, n[t]); }));
                } return e; }({}, this.permanentProperties, e), this._setUserProperties(); };
                class_4.prototype.setConferenceName = function (e) { this.conferenceName = e, this.addPermanentProperties({ conference_name: e }); };
                class_4.prototype.sendEvent = function (e, t) {
                    if (t === void 0) { t = {}; }
                    if (this.disposed)
                        return;
                    var n = null;
                    "string" == typeof e ? n = { type: r.t, action: e, actionSubject: e, source: e, attributes: t } : "object" == typeof e && (n = e), this._verifyRequiredFields(n) ? this._sendEvent(n) : a.error("Dropping a mis-formatted event: " + JSON.stringify(n));
                };
                class_4.prototype._verifyRequiredFields = function (e) { if (!e)
                    return !1; e.type || (e.type = r.t); var t = e.type; return t !== r.t && t !== r.u && t !== r.w && t !== r.v ? (a.error("Unknown event type: " + t), !1) : t === r.u ? Boolean(e.name) : (e.action = e.action || e.name || e.actionSubject, e.actionSubject = e.actionSubject || e.name || e.action, e.source = e.source || e.name || e.action || e.actionSubject, e.action && e.actionSubject && e.source ? !!(t !== r.v || (e.objectType = e.objectType || "generic-object-type", e.containerType = e.containerType || "conference", "conference" !== e.containerType || e.containerId || (e.containerId = this.conferenceName), e.objectType && e.objectId && e.containerType && e.containerId)) || (a.error("Required field missing (containerId, containerType, objectId or objectType)"), !1) : (a.error("Required field missing (action, actionSubject or source)"), !1)); };
                class_4.prototype._maybeCacheEvent = function (e) { return !!this.cache && (this.cache.push(e), this.cache.length > 100 && this.cache.splice(0, 1), !0); };
                class_4.prototype._sendEvent = function (e) { this._maybeCacheEvent(e) || this.analyticsHandlers.forEach(function (t) { try {
                    t.sendEvent(e);
                }
                catch (e) {
                    a.warn("Error sending analytics event: " + e);
                } }); };
                return class_4;
            }()); }).call(this, "modules/statistics/AnalyticsAdapter.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(4), r = n(24), s = n(29); var o = Object(i.getLogger)(e);
                var a = /** @class */ (function () {
                    function a(e, t) {
                        this.eventEmitter = e, this.longTasks = 0, this.maxDuration = 0, this.performanceStatsInterval = t, this.stats = new s.a;
                    }
                    a.prototype.getLongTasksStats = function () { return { avgRatePerMinute: (60 * this.stats.getAverage()).toFixed(2), maxDurationMs: this.maxDuration }; };
                    a.prototype.startObserver = function () {
                        var _this = this;
                        this.longTaskEventHandler = function (e) { var t = e.getEntries(); for (var _i = 0, t_84 = t; _i < t_84.length; _i++) {
                            var e_104 = t_84[_i];
                            _this.longTasks++, _this.maxDuration = Math.max(_this.maxDuration, e_104.duration).toFixed(3);
                        } }, o.info("Creating a Performance Observer for monitoring Long Tasks"), this.observer = new PerformanceObserver(this.longTaskEventHandler), this.observer.observe({ type: "longtask", buffered: !0 });
                        var e = Date.now();
                        this.longTasksIntervalId = setInterval(function () { var t = Date.now(), n = _this._lastTimeStamp ? (t - _this._lastTimeStamp) / 1e3 : (t - e) / 1e3, i = _this.longTasks / n; _this.stats.addNext(i), _this.eventEmitter.emit(r.e, _this.getLongTasksStats()), _this.longTasks = 0, _this._lastTimeStamp = Date.now(); }, this.performanceStatsInterval);
                    };
                    a.prototype.stopObserver = function () { this.observer && this.observer.disconnect(), this.longTaskEventHandler = null, this.longTasksIntervalId && (clearInterval(this.longTasksIntervalId), this.longTasksIntervalId = null); };
                    return a;
                }());  }).call(this, "modules/statistics/PerformanceObserverStats.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return m; })); var i = n(27), r = n(4), s = n(5), o = n(24), a = n(3); var c = n(11), d = Object(r.getLogger)(e), u = {}; function l(e, t) { return !t || t <= 0 || !e || e <= 0 ? 0 : Math.round(e / t * 100); } function h() { this.loss = {}, this.bitrate = { download: 0, upload: 0 }, this.resolution = {}, this.framerate = 0, this.codec = ""; } function p() { this.bandwidth = {}, this.bitrate = {}, this.packetLoss = null, this.transport = []; } function m(e, t, n, i) { this._browserType = a.a.getName(); var r = u[this._browserType]; if (!r)
                throw new Error("The browser type '" + this._browserType + "' isn't supported!"); this._usesPromiseGetStats = a.a.isWebKitBased() || a.a.isFirefox() || a.a.isReactNative(), this._getStatValue = this._usesPromiseGetStats ? this._defineNewGetStatValueMethod(r) : this._defineGetStatValueMethod(r), this.peerconnection = e, this.baselineAudioLevelsReport = null, this.currentAudioLevelsReport = null, this.currentStatsReport = null, this.previousStatsReport = null, this.audioLevelReportHistory = {}, this.audioLevelsIntervalId = null, this.eventEmitter = i, this.conferenceStats = new p, this.audioLevelsIntervalMilis = t, this.speakerList = [], this.statsIntervalId = null, this.statsIntervalMilis = n, this.ssrc2stats = new Map; } u[i.b.FIREFOX] = { ssrc: "ssrc", packetsReceived: "packetsReceived", packetsLost: "packetsLost", packetsSent: "packetsSent", bytesReceived: "bytesReceived", bytesSent: "bytesSent", framerateMean: "framerateMean", ip: "address", port: "port", protocol: "protocol" }, u[i.b.CHROME] = { receiveBandwidth: "googAvailableReceiveBandwidth", sendBandwidth: "googAvailableSendBandwidth", remoteAddress: "googRemoteAddress", transportType: "googTransportType", localAddress: "googLocalAddress", activeConnection: "googActiveConnection", ssrc: "ssrc", packetsReceived: "packetsReceived", packetsSent: "packetsSent", packetsLost: "packetsLost", bytesReceived: "bytesReceived", bytesSent: "bytesSent", googCodecName: "googCodecName", googFrameHeightReceived: "googFrameHeightReceived", googFrameWidthReceived: "googFrameWidthReceived", googFrameHeightSent: "googFrameHeightSent", googFrameWidthSent: "googFrameWidthSent", googFrameRateReceived: "googFrameRateReceived", googFrameRateSent: "googFrameRateSent", audioInputLevel: "audioInputLevel", audioOutputLevel: "audioOutputLevel", currentRoundTripTime: "googRtt", remoteCandidateType: "googRemoteCandidateType", localCandidateType: "googLocalCandidateType", ip: "ip", port: "port", protocol: "protocol" }, u[i.b.REACT_NATIVE] = { packetsReceived: "packetsReceived", packetsSent: "packetsSent", bytesReceived: "bytesReceived", bytesSent: "bytesSent", frameWidth: "frameWidth", frameHeight: "frameHeight", framesPerSecond: "framesPerSecond", ip: "ip", port: "port", protocol: "protocol" }, u[i.b.OPERA] = u[i.b.CHROME], u[i.b.NWJS] = u[i.b.CHROME], u[i.b.ELECTRON] = u[i.b.CHROME], u[i.b.SAFARI] = u[i.b.CHROME], h.prototype.setLoss = function (e) { this.loss = e || {}; }, h.prototype.setResolution = function (e) { this.resolution = e || {}; }, h.prototype.addBitrate = function (e) { this.bitrate.download += e.download, this.bitrate.upload += e.upload; }, h.prototype.resetBitrate = function () { this.bitrate.download = 0, this.bitrate.upload = 0; }, h.prototype.setFramerate = function (e) { this.framerate = e || 0; }, h.prototype.setCodec = function (e) { this.codec = e || ""; }, m.prototype.setSpeakerList = function (e) { this.speakerList = e; }, m.prototype.stop = function () { this.audioLevelsIntervalId && (clearInterval(this.audioLevelsIntervalId), this.audioLevelsIntervalId = null), this.statsIntervalId && (clearInterval(this.statsIntervalId), this.statsIntervalId = null); }, m.prototype.errorCallback = function (e) { c.callErrorHandler(e), d.error("Get stats error", e), this.stop(); }, m.prototype.start = function (e) {
                var _this = this;
                e && (a.a.supportsReceiverStats() && d.info("Using RTCRtpSynchronizationSource for remote audio levels"), this.audioLevelsIntervalId = setInterval(function () { if (a.a.supportsReceiverStats()) {
                    var e_105 = _this.peerconnection.getAudioLevels(_this.speakerList);
                    for (var t_85 in e_105)
                        if (e_105.hasOwnProperty(t_85)) {
                            var n_55 = 2.5 * e_105[t_85];
                            _this.eventEmitter.emit(o.a, _this.peerconnection, Number.parseInt(t_85, 10), n_55, !1);
                        }
                }
                else
                    _this.peerconnection.getStats(function (e) { var t = null; t = e && e.result && "function" == typeof e.result ? e.result() : e, _this.currentAudioLevelsReport = t, _this._usesPromiseGetStats ? _this.processNewAudioLevelReport() : _this.processAudioLevelReport(), _this.baselineAudioLevelsReport = _this.currentAudioLevelsReport; }, function (e) { return _this.errorCallback(e); }); }, this.audioLevelsIntervalMilis));
                var t = function () { _this.peerconnection.getStats(function (e) { var t = null; t = e && e.result && "function" == typeof e.result ? e.result() : e, _this.currentStatsReport = t; try {
                    _this._usesPromiseGetStats ? _this.processNewStatsReport() : _this.processStatsReport();
                }
                catch (e) {
                    c.callErrorHandler(e), d.error("Unsupported key:" + e, e);
                } _this.previousStatsReport = _this.currentStatsReport; }, function (e) { return _this.errorCallback(e); }); };
                t(), this.statsIntervalId = setInterval(t, this.statsIntervalMilis);
            }, m.prototype._defineGetStatValueMethod = function (e) { var t; switch (this._browserType) {
                case i.b.CHROME:
                case i.b.OPERA:
                case i.b.NWJS:
                case i.b.ELECTRON:
                    t = function (e, t) { return e.stat(t); };
                    break;
                default: t = function (e, t) { return e[t]; };
            } return function (n, i) { return t(n, function (t) { var n = e[t]; if (n)
                return n; throw new Error("The property '" + t + "' isn't supported!"); }(i)); }; }, m.prototype.getNonNegativeStat = function (e, t) { var n = this._getStatValue(e, t); return "number" != typeof n && (n = Number(n)), isNaN(n) ? 0 : Math.max(0, n); }, m.prototype.processStatsReport = function () { if (!this.previousStatsReport)
                return; var e = this._getStatValue, t = {}; var _loop_7 = function (n_56) {
                if (!this_5.currentStatsReport.hasOwnProperty(n_56))
                    return "continue";
                var i_36 = this_5.currentStatsReport[n_56];
                if (!i_36)
                    return "continue";
                try {
                    var t_86 = e(i_36, "receiveBandwidth"), n_57 = e(i_36, "sendBandwidth");
                    (t_86 || n_57) && (this_5.conferenceStats.bandwidth = { download: Math.round(t_86 / 1e3), upload: Math.round(n_57 / 1e3) });
                }
                catch (e) { }
                if ("googCandidatePair" === i_36.type) {
                    var t_87 = void 0, n_58, r_16 = void 0, s_11, o_9 = void 0, a_5 = void 0, c_3;
                    try {
                        if (t_87 = e(i_36, "activeConnection"), !t_87)
                            return "continue";
                        n_58 = e(i_36, "remoteAddress"), c_3 = e(i_36, "transportType"), s_11 = e(i_36, "localAddress"), r_16 = e(i_36, "localCandidateType"), o_9 = e(i_36, "remoteCandidateType"), a_5 = this_5.getNonNegativeStat(i_36, "currentRoundTripTime");
                    }
                    catch (e) { }
                    if (!n_58 || !c_3 || !s_11 || "true" !== t_87)
                        return "continue";
                    var d_1 = this_5.conferenceStats.transport;
                    d_1.some(function (e) { return e.ip === n_58 && e.type === c_3 && e.localip === s_11; }) || d_1.push({ ip: n_58, type: c_3, localip: s_11, p2p: this_5.peerconnection.isP2P, localCandidateType: r_16, remoteCandidateType: o_9, rtt: a_5 });
                    return "continue";
                }
                if ("candidatepair" === i_36.type) {
                    if ("succeeded" !== i_36.state || !i_36.selected)
                        return "continue";
                    var e_106 = this_5.currentStatsReport[i_36.localCandidateId], t_88 = this_5.currentStatsReport[i_36.remoteCandidateId];
                    this_5.conferenceStats.transport.push({ ip: t_88.ipAddress + ":" + t_88.portNumber, type: e_106.transport, localip: e_106.ipAddress + ":" + e_106.portNumber, p2p: this_5.peerconnection.isP2P, localCandidateType: e_106.candidateType, remoteCandidateType: t_88.candidateType });
                }
                if ("ssrc" !== i_36.type && "outboundrtp" !== i_36.type && "inboundrtp" !== i_36.type && "track" !== i_36.type)
                    return "continue";
                var r_17 = this_5.previousStatsReport[n_56];
                var s_12 = this_5.getNonNegativeStat(i_36, "ssrc");
                if ("track" === i_36.type && Array.isArray(i_36.ssrcIds) && (s_12 = Number(i_36.ssrcIds[0])), !r_17 || !s_12)
                    return "continue";
                if (!0 === i_36.isRemote || !0 === i_36.remoteSource)
                    return "continue";
                var o_10 = this_5.ssrc2stats.get(s_12);
                o_10 || (o_10 = new h, this_5.ssrc2stats.set(s_12, o_10));
                var a_6 = !0, c_4 = "packetsReceived", u_1 = e(i_36, c_4);
                null != u_1 && "" !== u_1 || (a_6 = !1, c_4 = "packetsSent", u_1 = e(i_36, c_4), null == u_1 && d.warn("No packetsReceived nor packetsSent stat found")), (!u_1 || u_1 < 0) && (u_1 = 0);
                var l_1 = this_5.getNonNegativeStat(r_17, c_4), p_1 = Math.max(0, u_1 - l_1), m_1 = this_5.getNonNegativeStat(i_36, "packetsLost"), f = this_5.getNonNegativeStat(r_17, "packetsLost"), g = Math.max(0, m_1 - f);
                o_10.setLoss({ packetsTotal: p_1 + g, packetsLost: g, isDownloadStream: a_6 });
                var _ = this_5.getNonNegativeStat(i_36, "bytesReceived"), v = this_5.getNonNegativeStat(r_17, "bytesReceived"), S = Math.max(0, _ - v);
                var y = 0, E = e(i_36, "bytesSent");
                "number" != typeof E && "string" != typeof E || (E = Number(E), isNaN(E) || (t[s_12] = E, E > 0 && (y = E - e(r_17, "bytesSent")))), y = Math.max(0, y);
                var b = i_36.timestamp - r_17.timestamp;
                var T = 0, C = 0;
                b > 0 && (T = Math.round(8 * S / b), C = Math.round(8 * y / b)), o_10.addBitrate({ download: T, upload: C });
                var R = { height: null, width: null };
                try {
                    var t_89 = void 0, n_59 = void 0;
                    ((t_89 = e(i_36, "googFrameHeightReceived")) && (n_59 = e(i_36, "googFrameWidthReceived")) || (t_89 = e(i_36, "googFrameHeightSent")) && (n_59 = e(i_36, "googFrameWidthSent"))) && (R.height = t_89, R.width = n_59);
                }
                catch (e) { }
                var A = void 0, w = void 0;
                try {
                    A = e(i_36, "googFrameRateReceived") || e(i_36, "googFrameRateSent") || 0;
                }
                catch (e) {
                    try {
                        A = this_5.getNonNegativeStat(i_36, "framerateMean");
                    }
                    catch (e) { }
                }
                o_10.setFramerate(Math.round(A || 0)), R.height && R.width ? o_10.setResolution(R) : o_10.setResolution(null);
                try {
                    w = e(i_36, "googCodecName") || "";
                }
                catch (e) { }
                o_10.setCodec(w);
            }; var this_5 = this; for (var n_56 in this.currentStatsReport) {
                _loop_7(n_56);
            } this.eventEmitter.emit(o.c, this.peerconnection, t), this._processAndEmitReport(); }, m.prototype._processAndEmitReport = function () {
                var _this = this;
                var e = { download: 0, upload: 0 }, t = { download: 0, upload: 0 };
                var n = 0, i = 0;
                var r = {}, s = {}, a = {};
                var c, u, h = 0, p = 0, m = 0, f = 0;
                for (var _i = 0, _a = this.ssrc2stats; _i < _a.length; _i++) {
                    var _b = _a[_i], o_11 = _b[0], l_2 = _b[1];
                    var g_1 = l_2.loss, _1 = g_1.isDownloadStream ? "download" : "upload";
                    e[_1] += g_1.packetsTotal, t[_1] += g_1.packetsLost, n += l_2.bitrate.download, i += l_2.bitrate.upload;
                    var v = this.peerconnection.getTrackBySSRC(o_11);
                    if (v) {
                        v.isAudioTrack() ? (h += l_2.bitrate.download, p += l_2.bitrate.upload, c = l_2.codec) : (m += l_2.bitrate.download, f += l_2.bitrate.upload, u = l_2.codec);
                        var e_107 = v.getParticipantId();
                        if (e_107) {
                            var t_90 = l_2.resolution;
                            if (t_90.width && t_90.height && -1 !== t_90.width && -1 !== t_90.height) {
                                var n_60 = r[e_107] || {};
                                n_60[o_11] = t_90, r[e_107] = n_60;
                            }
                            if (0 !== l_2.framerate) {
                                var t_91 = s[e_107] || {};
                                t_91[o_11] = l_2.framerate, s[e_107] = t_91;
                            }
                            if (c && u) {
                                var t_92 = { audio: c, video: u }, n_61 = a[e_107] || {};
                                n_61[o_11] = t_92, a[e_107] = n_61;
                            }
                        }
                        else
                            d.error("No participant ID returned by " + v);
                    }
                    l_2.resetBitrate();
                }
                this.conferenceStats.bitrate = { upload: i, download: n }, this.conferenceStats.bitrate.audio = { upload: p, download: h }, this.conferenceStats.bitrate.video = { upload: f, download: m }, this.conferenceStats.packetLoss = { total: l(t.download + t.upload, e.download + e.upload), download: l(t.download, e.download), upload: l(t.upload, e.upload) };
                var g = {};
                var _;
                Object.keys(this.audioLevelReportHistory).forEach(function (e) { var _a = _this.audioLevelReportHistory[e], t = _a.data, n = _a.isLocal, i = t.reduce(function (e, t) { return e + t; }) / t.length; if (n)
                    _ = i;
                else {
                    var t_93 = _this.peerconnection.getTrackBySSRC(Number(e));
                    if (t_93) {
                        var e_108 = t_93.getParticipantId();
                        e_108 && (g[e_108] = i);
                    }
                } }), this.audioLevelReportHistory = {}, this.eventEmitter.emit(o.d, this.peerconnection, { bandwidth: this.conferenceStats.bandwidth, bitrate: this.conferenceStats.bitrate, packetLoss: this.conferenceStats.packetLoss, resolution: r, framerate: s, codec: a, transport: this.conferenceStats.transport, localAvgAudioLevels: _, avgAudioLevels: g }), this.conferenceStats.transport = [];
            }, m.prototype.processAudioLevelReport = function () { if (!this.baselineAudioLevelsReport)
                return; var e = this._getStatValue; for (var t_94 in this.currentAudioLevelsReport) {
                if (!this.currentAudioLevelsReport.hasOwnProperty(t_94))
                    continue;
                var n_62 = this.currentAudioLevelsReport[t_94];
                if ("ssrc" !== n_62.type && "track" !== n_62.type)
                    continue;
                var i_37 = this.baselineAudioLevelsReport[t_94];
                var r_18 = void 0, s_13 = this.getNonNegativeStat(n_62, "ssrc");
                if (!s_13 && Array.isArray(n_62.ssrcIds) && (s_13 = Number(n_62.ssrcIds[0])), i_37)
                    if (s_13) {
                        try {
                            r_18 = e(n_62, "audioInputLevel") || e(n_62, "audioOutputLevel");
                        }
                        catch (e) {
                            return d.warn("Audio Levels are not available in the statistics."), void clearInterval(this.audioLevelsIntervalId);
                        }
                        if (r_18) {
                            var t_95 = void 0;
                            t_95 = "ssrc" === n_62.type ? !e(n_62, "packetsReceived") : !n_62.remoteSource, r_18 /= 32767, s_13 in this.audioLevelReportHistory || (this.audioLevelReportHistory[s_13] = { isLocal: t_95, data: [] }), this.audioLevelReportHistory[s_13].data.push(r_18), this.eventEmitter.emit(o.a, this.peerconnection, s_13, r_18, t_95);
                        }
                    }
                    else
                        Date.now() - n_62.timestamp < 3e3 && d.warn("No ssrc: ");
                else
                    d.warn(s_13 + " not enough data");
            } }, m.prototype._defineNewGetStatValueMethod = function (e) { return function (t, n) { return t[function (t) { var n = e[t]; if (n)
                return n; throw new Error("The property '" + t + "' isn't supported!"); }(n)]; }; }, m.prototype.getNonNegativeValue = function (e) { var t = e; return "number" != typeof t && (t = Number(t)), isNaN(t) ? 0 : Math.max(0, t); }, m.prototype._calculateBitrate = function (e, t, n) { var i = this.getNonNegativeValue(e[n]), r = this.getNonNegativeValue(t[n]), s = Math.max(0, i - r), o = e.timestamp - t.timestamp; var a = 0; return o > 0 && (a = Math.round(8 * s / o)), a; }, m.prototype.processNewStatsReport = function () {
                var _this = this;
                if (!this.previousStatsReport)
                    return;
                var e = this._getStatValue, t = {};
                this.currentStatsReport.forEach(function (n) { if ("candidate-pair" === n.type && n.nominated && "succeeded" === n.state) {
                    var t_96 = n.availableIncomingBitrate, i_38 = n.availableOutgoingBitrate;
                    (t_96 || i_38) && (_this.conferenceStats.bandwidth = { download: Math.round(t_96 / 1e3), upload: Math.round(i_38 / 1e3) });
                    var r_19 = _this.currentStatsReport.get(n.remoteCandidateId), s_14 = _this.currentStatsReport.get(n.localCandidateId);
                    if (r_19 && s_14) {
                        var t_97 = e(r_19, "ip") + ":" + e(r_19, "port"), i_39 = e(s_14, "ip") + ":" + e(s_14, "port"), o_12 = e(r_19, "protocol"), a_7 = _this.conferenceStats.transport;
                        a_7.some(function (e) { return e.ip === t_97 && e.type === o_12 && e.localip === i_39; }) || a_7.push({ ip: t_97, type: o_12, localIp: i_39, p2p: _this.peerconnection.isP2P, localCandidateType: s_14.candidateType, remoteCandidateType: r_19.candidateType, networkType: s_14.networkType, rtt: 1e3 * n.currentRoundTripTime });
                    }
                }
                else if ("inbound-rtp" === n.type || "outbound-rtp" === n.type) {
                    var i_40 = _this.previousStatsReport.get(n.id), r_20 = _this.getNonNegativeValue(n.ssrc);
                    if (!i_40 || !r_20)
                        return;
                    var s_15 = _this.ssrc2stats.get(r_20);
                    s_15 || (s_15 = new h, _this.ssrc2stats.set(r_20, s_15));
                    var o_13 = !0, a_8 = "packetsReceived";
                    "outbound-rtp" === n.type && (o_13 = !1, a_8 = "packetsSent");
                    var c_5 = n[a_8];
                    (!c_5 || c_5 < 0) && (c_5 = 0);
                    var d_2 = _this.getNonNegativeValue(i_40[a_8]), u_2 = Math.max(0, c_5 - d_2), l_3 = _this.getNonNegativeValue(n.packetsLost), p_2 = _this.getNonNegativeValue(i_40.packetsLost), m_2 = Math.max(0, l_3 - p_2);
                    s_15.setLoss({ packetsTotal: u_2 + m_2, packetsLost: m_2, isDownloadStream: o_13 });
                    var f = { height: null, width: null };
                    try {
                        f.height = e(n, "frameHeight"), f.width = e(n, "frameWidth");
                    }
                    catch (e) { }
                    var g = void 0;
                    try {
                        g = e(n, "framesPerSecond");
                    }
                    catch (e) { }
                    s_15.setFramerate(Math.round(g || 0)), f.height && f.width ? s_15.setResolution(f) : s_15.setResolution(null), "inbound-rtp" === n.type ? s_15.addBitrate({ download: _this._calculateBitrate(n, i_40, "bytesReceived"), upload: 0 }) : (t[r_20] = _this.getNonNegativeValue(n.bytesSent), s_15.addBitrate({ download: 0, upload: _this._calculateBitrate(n, i_40, "bytesSent") }));
                    var _ = n.framerateMean;
                    var v = void 0;
                    _ && s_15.setFramerate(Math.round(_ || 0));
                    try {
                        v = _this.currentStatsReport.get(n.codecId);
                    }
                    catch (e) { }
                    if (v) {
                        var e_109 = v.mimeType.split("/")[1];
                        e_109 && s_15.setCodec(e_109);
                    }
                }
                else if ("track" === n.type) {
                    var e_110 = { height: n.frameHeight, width: n.frameWidth };
                    var t_98 = n.framesPerSecond;
                    if (!t_98) {
                        var e_111 = _this.previousStatsReport.get(n.id);
                        if (e_111) {
                            var i_41 = n.timestamp - e_111.timestamp;
                            if (i_41 > 0 && n.framesSent) {
                                t_98 = (n.framesSent - e_111.framesSent) / i_41 * 1e3;
                            }
                        }
                        if (!t_98)
                            return;
                    }
                    var i_42 = n.trackIdentifier, r_21 = _this.peerconnection.getSsrcByTrackId(i_42);
                    if (!r_21)
                        return;
                    var s_16 = _this.ssrc2stats.get(r_21);
                    s_16 || (s_16 = new h, _this.ssrc2stats.set(r_21, s_16)), s_16.setFramerate(Math.round(t_98 || 0)), e_110.height && e_110.width ? s_16.setResolution(e_110) : s_16.setResolution(null);
                } }), this.eventEmitter.emit(o.c, this.peerconnection, t), this._processAndEmitReport();
            }, m.prototype.processNewAudioLevelReport = function () {
                var _this = this;
                this.baselineAudioLevelsReport && this.currentAudioLevelsReport.forEach(function (e) { if ("track" !== e.type)
                    return; var t = e.audioLevel; if (!t)
                    return; var n = e.trackIdentifier, i = _this.peerconnection.getSsrcByTrackId(n); if (i) {
                    var e_112 = i === _this.peerconnection.getLocalSSRC(_this.peerconnection.getLocalTracks(s.a));
                    _this.eventEmitter.emit(o.a, _this.peerconnection, i, t, e_112);
                } });
            }; }).call(this, "modules/statistics/RTPStatsCollector.js");
        }, function (e, t) { function n(e, t) { if (!e || !t || "function" != typeof e.addListener || "function" != typeof t.emit)
            throw new Error("Invalid arguments passed to EventEmitterForwarder"); this.src = e, this.dest = t; } n.prototype.forward = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            var t = e[0];
            e[0] = this.dest, this.src.addListener(t, Function.prototype.bind.apply(this.dest.emit, e));
        }, e.exports = n; }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return a; }));
            var i = n(2), r = n(0), s = n(51), o = n(5);
            var a = /** @class */ (function () {
                function a(e, t, n, r, o, a, c) {
                    this._jid = e, this._id = i.Strophe.getResourceFromJid(e), this._conference = t, this._displayName = n, this._supportsDTMF = !1, this._tracks = [], this._role = "none", this._status = a, this._hidden = r, this._statsID = o, this._connectionStatus = s.a.ACTIVE, this._properties = {}, this._identity = c, this._features = new Set;
                }
                a.prototype.getConference = function () { return this._conference; };
                a.prototype.getProperty = function (e) { return this._properties[e]; };
                a.prototype.hasAnyVideoTrackWebRTCMuted = function () { return this.getTracks().some(function (e) { return e.getType() === o.c && e.isWebRTCTrackMuted(); }); };
                a.prototype._setConnectionStatus = function (e) { this._connectionStatus = e; };
                a.prototype.getConnectionStatus = function () { return this._connectionStatus; };
                a.prototype.setProperty = function (e, t) { var n = this._properties[e]; t !== n && (this._properties[e] = t, this._conference.eventEmitter.emit(r.PARTICIPANT_PROPERTY_CHANGED, this, e, n, t)); };
                a.prototype.getTracks = function () { return this._tracks.slice(); };
                a.prototype.getTracksByMediaType = function (e) { return this.getTracks().filter(function (t) { return t.getType() === e; }); };
                a.prototype.getId = function () { return this._id; };
                a.prototype.getJid = function () { return this._jid; };
                a.prototype.getDisplayName = function () { return this._displayName; };
                a.prototype.getStatsID = function () { return this._statsID; };
                a.prototype.getStatus = function () { return this._status; };
                a.prototype.isModerator = function () { return "moderator" === this._role; };
                a.prototype.isHidden = function () { return this._hidden; };
                a.prototype.isAudioMuted = function () { return this._isMediaTypeMuted(o.a); };
                a.prototype._isMediaTypeMuted = function (e) { return this.getTracks().reduce(function (t, n) { return t && (n.getType() !== e || n.isMuted()); }, !0); };
                a.prototype.isVideoMuted = function () { return this._isMediaTypeMuted(o.c); };
                a.prototype.getRole = function () { return this._role; };
                a.prototype.setRole = function (e) { this._role = e; };
                a.prototype.supportsDTMF = function () { return this._supportsDTMF; };
                a.prototype.getFeatures = function () { return Promise.resolve(this._features); };
                a.prototype.hasFeature = function (e) { return this._features.has(e); };
                a.prototype.setFeatures = function (e) { this._features = e || new Set; };
                a.prototype.getBotType = function () { return this._botType; };
                a.prototype.setBotType = function (e) { this._botType = e; };
                return a;
            }());
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return s; }));
            var i = n(28), r = n(22);
            function s(_a) {
                var _this = this;
                var e = _a.id, t = _a.password, n = _a.onCreateResource, s = _a.onLoginSuccessful, o = _a.roomPassword;
                var a, c = !1, d = new r.e(this.connection.options);
                var u = new Promise(function (r, u) { a = u, d.addListener(i.CONNECTION_DISCONNECTED, function () { d = void 0; }), d.addListener(i.CONNECTION_ESTABLISHED, function () { if (c)
                    return; s && s(); d.createRoom(_this.options.name, _this.options.config, n).moderator.authenticate().then(function () { d && d.disconnect(), c || (_this.join(o), r()); }).catch(function (_a) {
                    var e = _a.error, t = _a.message;
                    d.disconnect(), u({ authenticationError: e, message: t });
                }); }), d.addListener(i.CONNECTION_FAILED, function (e, t, n) { u({ connectionError: e, credentials: n, message: t }), d = void 0; }), c || d.connect(e, t); });
                return u.cancel = function () { c = !0, a({}), d && d.disconnect(); }, u;
            }
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return o; })); var i = n(4); var r = Object(i.getLogger)(e), s = Symbol("kJitsiE2EE");
                var o = /** @class */ (function () {
                    function o() {
                        var e = "";
                        var t = document.querySelector('script[src*="lib-jitsi-meet"]');
                        if (t) {
                            var n_63 = t.src.lastIndexOf("/");
                            e = t.src.substring(0, n_63) + "/";
                        }
                        var n = new Blob(["importScripts(\"" + (e + "lib-jitsi-meet.e2ee-worker.js") + "\");"], { type: "application/javascript" }), i = window.URL.createObjectURL(n);
                        this._worker = new Worker(i, { name: "E2EE Worker" }), this._worker.onerror = function (e) { return r.onerror(e); };
                    }
                    o.prototype.cleanup = function (e) { this._worker.postMessage({ operation: "cleanup", participantId: e }); };
                    o.prototype.handleReceiver = function (e, t, n) { if (e[s])
                        return; var i; e[s] = !0, i = e.createEncodedStreams ? e.createEncodedStreams() : "video" === t ? e.createEncodedVideoStreams() : e.createEncodedAudioStreams(), this._worker.postMessage({ operation: "decode", readableStream: i.readable || i.readableStream, writableStream: i.writable || i.writableStream, participantId: n }, [i.readable || i.readableStream, i.writable || i.writableStream]); };
                    o.prototype.handleSender = function (e, t, n) { if (e[s])
                        return; var i; e[s] = !0, i = e.createEncodedStreams ? e.createEncodedStreams() : "video" === t ? e.createEncodedVideoStreams() : e.createEncodedAudioStreams(), this._worker.postMessage({ operation: "encode", readableStream: i.readable || i.readableStream, writableStream: i.writable || i.writableStream, participantId: n }, [i.readable || i.readableStream, i.writable || i.writableStream]); };
                    o.prototype.setKey = function (e, t, n) { this._worker.postMessage({ operation: "setKey", participantId: e, key: t, keyIndex: n }); };
                    return o;
                }());  }).call(this, "modules/e2ee/E2EEContext.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return u; }));
            var i = n(2), r = n(1), s = n.n(r), o = n(20);
            var a = ["category", "type", "lang", "name"], c = ["category", "type", "lang"];
            function d(e, t) { var n = 0; return c.some(function (i) { return 0 !== (n = e[i] > t[i] ? 1 : e[i] < t[i] && -1); }), n; }
            var u = /** @class */ (function (_super) {
                __extends(u, _super);
                function u(e, t) {
                    if (e === void 0) { e = {}; }
                    if (t === void 0) { t = "http://jitsi.org/jitsimeet"; }
                    var _this = this;
                    if (_this = _super.call(this) || this, _this.node = t, _this.disco = e.disco, !_this.disco)
                        throw new Error("Missing strophe-plugins (disco plugin is required)!");
                    _this.version = "", _this.rooms = new Set, _this.externalFeatures = new Set;
                    var n = e.emuc;
                    n.addListener(s.a.EMUC_ROOM_ADDED, function (e) { return _this._addChatRoom(e); }), n.addListener(s.a.EMUC_ROOM_REMOVED, function (e) { return _this._removeChatRoom(e); }), Object.keys(n.rooms).forEach(function (e) { _this._addChatRoom(n.rooms[e]); }), i.Strophe.addNamespace("CAPS", "http://jabber.org/protocol/caps"), _this.disco.addFeature(i.Strophe.NS.CAPS);
                    return _this;
                }
                u.prototype.addFeature = function (e, t, n) {
                    var _this = this;
                    if (t === void 0) { t = !1; }
                    if (n === void 0) { n = !1; }
                    this.disco.addFeature(e), this._generateVersion(), n && !this.externalFeatures.has(e) && (this.externalFeatures.add(e), this.rooms.forEach(function (e) { return _this._updateRoomWithExternalFeatures(e); })), t && this.submit();
                };
                u.prototype.removeFeature = function (e, t, n) {
                    var _this = this;
                    if (t === void 0) { t = !1; }
                    if (n === void 0) { n = !1; }
                    this.disco.removeFeature(e), this._generateVersion(), n && this.externalFeatures.has(e) && (this.externalFeatures.delete(e), this.rooms.forEach(function (e) { return _this._updateRoomWithExternalFeatures(e); })), t && this.submit();
                };
                u.prototype.submit = function () { this.rooms.forEach(function (e) { return e.sendPresence(); }); };
                u.prototype._updateRoomWithExternalFeatures = function (e) { if (0 === this.externalFeatures.size)
                    e.removeFromPresence("features");
                else {
                    var t_99 = [];
                    this.externalFeatures.forEach(function (e) { t_99.push({ tagName: "feature", attributes: { var: e } }); }), e.addOrReplaceInPresence("features", { children: t_99 });
                } };
                u.prototype.getFeaturesAndIdentities = function (e, t, n) {
                    if (n === void 0) { n = 5e3; }
                    return this._getDiscoInfo(e, t, n);
                };
                u.prototype._getDiscoInfo = function (e, t, n) {
                    var _this = this;
                    return new Promise(function (i, r) { return _this.disco.info(e, t, function (e) { var t = new Set, n = new Set; $(e).find(">query>feature").each(function (e, n) { return t.add(n.getAttribute("var")); }), $(e).find(">query>identity").each(function (e, t) { return n.add({ type: t.getAttribute("type"), name: t.getAttribute("name"), category: t.getAttribute("category") }); }), i({ features: t, identities: n }); }, r, n); });
                };
                u.prototype._addChatRoom = function (e) { this.rooms.add(e), this._fixChatRoomPresenceMap(e), this._updateRoomWithExternalFeatures(e); };
                u.prototype._removeChatRoom = function (e) { this.rooms.delete(e); };
                u.prototype._fixChatRoomPresenceMap = function (e) { e.addOrReplaceInPresence("c", { attributes: { xmlns: i.Strophe.NS.CAPS, hash: "sha-1", node: this.node, ver: this.version } }); };
                u.prototype._notifyVersionChanged = function () {
                    var _this = this;
                    this.rooms.forEach(function (e) { return _this._fixChatRoomPresenceMap(e); });
                };
                u.prototype._generateVersion = function () { this.version = function (e, t) { var n = e.sort(d).reduce(function (e, t) { return a.reduce(function (e, n, i) { return e + (0 === i ? "" : "/") + (t[n] ? t[n] : ""); }, "") + "<"; }, ""), r = t.sort().reduce(function (e, t) { return e + t + "<"; }, ""); return Object(i.b64_sha1)(n + r); }(this.disco._identities, this.disco._features), this._notifyVersionChanged(); };
                return u;
            }(o.a));
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(4), r = n(52), s = n(97); var o = Object(i.getLogger)(e);
                var a = /** @class */ (function () {
                    function a(e) {
                        this._stropheConn = e, this._resumeRetryN = 0, this._retryDelay = void 0;
                    }
                    Object.defineProperty(a.prototype, "retryDelay", {
                        get: function () { return this._retryDelay; },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.schedule = function () {
                        var _this = this;
                        this._cancelResume(), this._resumeRetryN += 1, this._networkOnlineListener = r.b.addEventListener(r.a, function (_a) {
                            var e = _a.isOnline;
                            e ? _this._scheduleResume() : _this._cancelResume();
                        }), r.b.isOnline() && this._scheduleResume();
                    };
                    a.prototype._scheduleResume = function () {
                        var _this = this;
                        this._resumeTimeout || (this._resumeRetryN = Math.min(3, this._resumeRetryN), this._retryDelay = Object(s.a)(this._resumeRetryN, 1500 * this._resumeRetryN, 3), o.info("Will try to resume the XMPP connection in " + this.retryDelay + "ms"), this._resumeTimeout = setTimeout(function () { return _this._resumeConnection(); }, this.retryDelay));
                    };
                    a.prototype._cancelResume = function () { this._resumeTimeout && (o.info("Canceling connection resume task"), clearTimeout(this._resumeTimeout), this._resumeTimeout = void 0, this._retryDelay = void 0); };
                    a.prototype._resumeConnection = function () { var e = this._stropheConn.streamManagement, t = e.getResumeToken(); if (!t)
                        return; o.info("Trying to resume the XMPP connection"); var n = new URL(this._stropheConn.service); var i = n.search; var r = /(previd=)([\w-]+)/, s = i.match(r); s && -1 === s.indexOf(t) ? i = i.replace(r, "$1" + t) : s || (i += -1 === i.indexOf("?") ? "?previd=" + t : "&previd=" + t), n.search = i, this._stropheConn.service = n.toString(), e.resume(); };
                    a.prototype.cancel = function () { this._cancelResume(), this._resumeRetryN = 0, this._networkOnlineListener && (this._networkOnlineListener(), this._networkOnlineListener = null); };
                    return a;
                }());  }).call(this, "modules/xmpp/ResumeTask.js");
        }, function (e, t, n) {
            "use strict";
            function i(e, t, n) {
                if (t === void 0) { t = 500; }
                if (n === void 0) { n = 2; }
                return Math.floor(Math.random() * (1e3 * Math.pow(n, e) - t) + t);
            }
            n.d(t, "a", (function () { return i; }));
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return i; }));
            var i = /** @class */ (function () {
                function i() {
                    this._lastSuccess = null, this._lastFailedMessage = null;
                }
                i.prototype.startTracking = function (e, t) {
                    var _this = this;
                    var n = t.rawInput;
                    t.rawInput = function () {
                        var i = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            i[_i] = arguments[_i];
                        }
                        var r = i[0];
                        r.includes("failure") && (_this._lastFailedMessage = r), e.connected && (_this._lastSuccess = Date.now()), n.apply(t, i);
                    };
                };
                i.prototype.getLastFailedMessage = function () { return this._lastFailedMessage; };
                i.prototype.getTimeSinceLastSuccess = function () { return this._lastSuccess ? Date.now() - this._lastSuccess : null; };
                return i;
            }());
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return d; })); var i = n(4), r = n(2), s = n(11), o = n.n(s), a = n(39); var c = Object(i.getLogger)(e);
                var d = /** @class */ (function (_super) {
                    __extends(d, _super);
                    function d(_a) {
                        var e = _a.getTimeSinceLastServerResponse, t = _a.onPingThresholdExceeded, _b = _a.pingOptions, n = _b === void 0 ? {} : _b;
                        var _this = this;
                        _this = _super.call(this) || this, _this.failedPings = 0, _this._onPingThresholdExceeded = t, _this._getTimeSinceLastServerResponse = e, _this.pingInterval = "number" == typeof n.interval ? n.interval : 1e4, _this.pingTimeout = "number" == typeof n.timeout ? n.timeout : 5e3, _this.pingThreshold = "number" == typeof n.threshold ? n.threshold : 2, _this.pingTimestampsToKeep = Math.round(12e4 / _this.pingInterval), _this.pingExecIntervals = new Array(_this.pingTimestampsToKeep);
                        return _this;
                    }
                    d.prototype.init = function (e) { _super.prototype.init.call(this, e), r.Strophe.addNamespace("PING", "urn:xmpp:ping"); };
                    d.prototype.ping = function (e, t, n, i) { this._addPingExecutionTimestamp(); var s = Object(r.$iq)({ type: "get", to: e }); s.c("ping", { xmlns: r.Strophe.NS.PING }), this.connection.sendIQ2(s, { timeout: i }).then(t, n); };
                    d.prototype.startInterval = function (e) {
                        var _this = this;
                        clearInterval(this.intervalId), this.intervalId = window.setInterval(function () { var t = Date.now(); if (_this._getTimeSinceLastServerResponse() < t - _this._lastServerCheck)
                            return _this._addPingExecutionTimestamp(), _this._lastServerCheck = t, void (_this.failedPings = 0); _this.ping(e, function () { _this._lastServerCheck = _this._getTimeSinceLastServerResponse() + Date.now(), _this.failedPings = 0; }, function (e) { _this.failedPings += 1; var t = "Ping " + (e ? "error" : "timeout"); _this.failedPings >= _this.pingThreshold ? (o.a.callErrorHandler(new Error(t)), c.error(t, e), _this._onPingThresholdExceeded && _this._onPingThresholdExceeded()) : c.warn(t, e); }, _this.pingTimeout); }, this.pingInterval), c.info("XMPP pings will be sent every " + this.pingInterval + " ms");
                    };
                    d.prototype.stopInterval = function () { this.intervalId && (window.clearInterval(this.intervalId), this.intervalId = null, this.failedPings = 0, c.info("Ping interval cleared")); };
                    d.prototype._addPingExecutionTimestamp = function () { this.pingExecIntervals.push((new Date).getTime()), this.pingExecIntervals.length > this.pingTimestampsToKeep && this.pingExecIntervals.shift(); };
                    d.prototype.getPingSuspendTime = function () { var e = this.pingExecIntervals.slice(); e.push((new Date).getTime()); var t = 0, n = e[0]; return e.forEach(function (e) { var i = e - n; i > t && (t = i), n = e; }), t -= this.pingInterval, Math.max(t, 0); };
                    return d;
                }(a.b));  }).call(this, "modules/xmpp/strophe.ping.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return u; })); var i = n(4), r = n(2), s = n(1), o = n.n(s), a = n(101), c = n(39); var d = Object(i.getLogger)(e);
                var u = /** @class */ (function (_super) {
                    __extends(u, _super);
                    function u(e) {
                        var _this = this;
                        _this = _super.call(this) || this, _this.xmpp = e, _this.rooms = {};
                        return _this;
                    }
                    u.prototype.init = function (e) { _super.prototype.init.call(this, e), this.connection.addHandler(this.onPresence.bind(this), null, "presence", null, null, null, null), this.connection.addHandler(this.onPresenceUnavailable.bind(this), null, "presence", "unavailable", null), this.connection.addHandler(this.onPresenceError.bind(this), null, "presence", "error", null), this.connection.addHandler(this.onMessage.bind(this), null, "message", null, null), this.connection.addHandler(this.onMute.bind(this), "http://jitsi.org/jitmeet/audio", "iq", "set", null, null), this.connection.addHandler(this.onMuteVideo.bind(this), "http://jitsi.org/jitmeet/video", "iq", "set", null, null); };
                    u.prototype.createRoom = function (e, t, n) { var i = r.Strophe.getBareJidFromJid(e); if (this.rooms[i]) {
                        var e_113 = "You are already in the room!";
                        throw d.error(e_113), new Error(e_113);
                    } return this.rooms[i] = new a.a(this.connection, e, t, this.xmpp, n), this.eventEmitter.emit(o.a.EMUC_ROOM_ADDED, this.rooms[i]), this.rooms[i]; };
                    u.prototype.doLeave = function (e) { this.eventEmitter.emit(o.a.EMUC_ROOM_REMOVED, this.rooms[e]), delete this.rooms[e]; };
                    u.prototype.onPresence = function (e) { var t = e.getAttribute("from"); if (e.getAttribute("type"))
                        return !0; var n = this.rooms[r.Strophe.getBareJidFromJid(t)]; return !n || ($(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>status[code="201"]').length && n.createNonAnonymousRoom(), n.onPresence(e), !0); };
                    u.prototype.onPresenceUnavailable = function (e) { var t = e.getAttribute("from"), n = this.rooms[r.Strophe.getBareJidFromJid(t)]; return !n || (n.onPresenceUnavailable(e, t), !0); };
                    u.prototype.onPresenceError = function (e) { var t = e.getAttribute("from"), n = this.rooms[r.Strophe.getBareJidFromJid(t)]; return !n || (n.onPresenceError(e, t), !0); };
                    u.prototype.onMessage = function (e) { var t = e.getAttribute("from"), n = this.rooms[r.Strophe.getBareJidFromJid(t)]; return !n || (n.onMessage(e, t), !0); };
                    u.prototype.onMute = function (e) { var t = e.getAttribute("from"), n = this.rooms[r.Strophe.getBareJidFromJid(t)]; return !n || (n.onMute(e), !0); };
                    u.prototype.onMuteVideo = function (e) { var t = e.getAttribute("from"), n = this.rooms[r.Strophe.getBareJidFromJid(t)]; return !n || (n.onMuteVideo(e), !0); };
                    return u;
                }(c.a));  }).call(this, "modules/xmpp/strophe.emuc.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return E; })); var i = n(4), r = n(33), s = n.n(r), o = n(2), a = n(62), c = n(5), d = n(1), u = n.n(d), l = n(11), h = n.n(l), p = n(20), m = n(102), f = n(41), g = n(103); var _ = Object(i.getLogger)(e), v = { packet2JSON: function (e, t) { for (var _i = 0, _a = Array.from(e.children); _i < _a.length; _i++) {
                    var n_64 = _a[_i];
                    var e_114 = { attributes: {}, children: [], tagName: n_64.tagName };
                    for (var _b = 0, _d = Array.from(n_64.attributes); _b < _d.length; _b++) {
                        var t_100 = _d[_b];
                        e_114.attributes[t_100.name] = t_100.value;
                    }
                    var i_43 = o.Strophe.getText(n_64);
                    i_43 && (e_114.value = o.Strophe.xmlunescape(i_43)), t.push(e_114), this.packet2JSON(n_64, e_114.children);
                } }, json2packet: function (e, t) { for (var n_65 = 0; n_65 < e.length; n_65++) {
                    var i_44 = e[n_65];
                    i_44 && (t.c(i_44.tagName, i_44.attributes), i_44.value && t.t(i_44.value), i_44.children && this.json2packet(i_44.children, t), t.up());
                } } }; function S(e, t) { var n = []; for (var i_45 = 0; i_45 < e.length; i_45++)
                e[i_45].tagName === t && n.push(e[i_45]); return n; } var y = ["owner", "admin", "member"];
                var E = /** @class */ (function (_super) {
                    __extends(E, _super);
                    function E(e, t, n, i, r) {
                        var _this = this;
                        _this = _super.call(this) || this, _this.xmpp = i, _this.connection = e, _this.roomjid = o.Strophe.getBareJidFromJid(t), _this.myroomjid = t, _this.password = n, _.info("Joined MUC as " + _this.myroomjid), _this.members = {}, _this.presMap = {}, _this.presHandlers = {}, _this._removeConnListeners = [], _this.joined = !1, _this.role = null, _this.focusMucJid = null, _this.noBridgeAvailable = !1, _this.options = r || {}, _this.moderator = new g.a(_this.roomjid, _this.xmpp, _this.eventEmitter, { connection: _this.xmpp.options, conference: _this.options }), (void 0 === _this.options.enableLobby || _this.options.enableLobby) && (_this.lobby = new m.a(_this)), _this.initPresenceMap(r), _this.lastPresences = {}, _this.phoneNumber = null, _this.phonePin = null, _this.connectionTimes = {}, _this.participantPropertyListener = null, _this.locked = !1, _this.transcriptionStatus = a.OFF;
                        return _this;
                    }
                    E.prototype.initPresenceMap = function (e) {
                        if (e === void 0) { e = {}; }
                        this.presMap.to = this.myroomjid, this.presMap.xns = "http://jabber.org/protocol/muc", this.presMap.nodes = [], e.statsId && this.presMap.nodes.push({ tagName: "stats-id", value: e.statsId }), this.addVideoInfoToPresence(!1), e.deploymentInfo && e.deploymentInfo.userRegion && this.presMap.nodes.push({ tagName: "region", attributes: { id: e.deploymentInfo.userRegion, xmlns: "http://jitsi.org/jitsi-meet" } }), this.presenceUpdateTime = Date.now();
                    };
                    E.prototype.join = function (e) {
                        var _this = this;
                        return this.password = e, new Promise(function (e) { _this.options.disableFocus && _.info("Conference focus disabled for " + _this.roomjid); (_this.options.disableFocus ? Promise.resolve() : _this.moderator.allocateConferenceFocus()).then(function () { _this.sendPresence(!0), _this._removeConnListeners.push(_this.connection.addEventListener(f.a.Events.CONN_STATUS_CHANGED, _this.onConnStatusChanged.bind(_this))), e(); }); });
                    };
                    E.prototype.sendPresence = function (e) { var t = this.presMap.to; if (!this.connection || !this.connection.connected || !t || !this.joined && !e)
                        return; var n = Object(o.$pres)({ to: t }); e && (n.c("x", { xmlns: this.presMap.xns }), this.password && n.c("password").t(this.password).up(), this.options.billingId && n.c("billingid").t(this.options.billingId).up(), n.up()), v.json2packet(this.presMap.nodes, n), this.presenceSyncTime = Date.now(), this.connection.send(n), e && this.connection.flush(); };
                    E.prototype.doLeave = function () { _.log("do leave", this.myroomjid); var e = Object(o.$pres)({ to: this.myroomjid, type: "unavailable" }); this.presMap.length = 0, !this.connection.isUsingWebSocket && this.connection.flush(), this.connection.send(e), this.connection.flush(); };
                    E.prototype.discoRoomInfo = function () {
                        var _this = this;
                        var e = Object(o.$iq)({ type: "get", to: this.roomjid }).c("query", { xmlns: o.Strophe.NS.DISCO_INFO });
                        this.connection.sendIQ(e, function (e) { var t = 1 === $(e).find('>query>feature[var="muc_passwordprotected"]').length; t !== _this.locked && (_this.eventEmitter.emit(u.a.MUC_LOCK_CHANGED, t), _this.locked = t); var n = $(e).find('>query>x[type="result"]>field[var="muc#roominfo_meetingId"]>value'); n.length ? _this.setMeetingId(n.text()) : _.warn("No meeting ID from backend"); var i = 1 === $(e).find('>query>feature[var="muc_membersonly"]').length, r = $(e).find('>query>x[type="result"]>field[var="muc#roominfo_lobbyroom"]>value'); _this.lobby && _this.lobby.setLobbyRoomJid(r && r.length ? r.text() : void 0), i !== _this.membersOnlyEnabled && (_this.membersOnlyEnabled = i, _this.eventEmitter.emit(u.a.MUC_MEMBERS_ONLY_CHANGED, i)); }, function (e) { h.a.callErrorHandler(e), _.error("Error getting room info: ", e); });
                    };
                    E.prototype.setMeetingId = function (e) { this.meetingId !== e && (this.meetingId && _.warn("Meeting Id changed from:" + this.meetingId + " to:" + e), this.meetingId = e, this.eventEmitter.emit(u.a.MEETING_ID_SET, e)); };
                    E.prototype.createNonAnonymousRoom = function () {
                        var _this = this;
                        if (this.options.disableDiscoInfo)
                            return;
                        var e = Object(o.$iq)({ type: "get", to: this.roomjid }).c("query", { xmlns: "http://jabber.org/protocol/muc#owner" }).c("x", { xmlns: "jabber:x:data", type: "submit" });
                        this.connection.sendIQ(e, function (e) { if (!$(e).find('>query>x[xmlns="jabber:x:data"]>field[var="muc#roomconfig_whois"]').length) {
                            var e_115 = "non-anonymous rooms not supported";
                            return h.a.callErrorHandler(new Error(e_115)), void _.error(e_115);
                        } var t = Object(o.$iq)({ to: _this.roomjid, type: "set" }).c("query", { xmlns: "http://jabber.org/protocol/muc#owner" }); t.c("x", { xmlns: "jabber:x:data", type: "submit" }), t.c("field", { var: "FORM_TYPE" }).c("value").t("http://jabber.org/protocol/muc#roomconfig").up().up(), t.c("field", { var: "muc#roomconfig_whois" }).c("value").t("anyone").up().up(), _this.connection.sendIQ(t); }, function (e) { h.a.callErrorHandler(e), _.error("Error getting room configuration form: ", e); });
                    };
                    E.prototype.onConnStatusChanged = function (e) { e === f.a.Status.CONNECTED && this.sendPresence(); };
                    E.prototype.onPresence = function (e) { var t = e.getAttribute("from"), n = {}, i = e.getElementsByTagName("status")[0]; i && (n.status = i.textContent || ""); var r = !1, a = !1; var c = e.getElementsByTagNameNS("http://jabber.org/protocol/muc#user", "x")[0], d = c && c.getElementsByTagName("item")[0]; n.affiliation = d && d.getAttribute("affiliation"), n.role = d && d.getAttribute("role"); var l = d && d.getAttribute("jid"); n.jid = l, n.isFocus = l && 0 === l.indexOf(this.moderator.getFocusUserJid() + "/"), n.isHiddenDomain = l && l.indexOf("@") > 0 && this.options.hiddenDomain === l.substring(l.indexOf("@") + 1, l.indexOf("/")), this.eventEmitter.emit(u.a.PRESENCE_RECEIVED, { fromHiddenDomain: n.isHiddenDomain, presence: e }); var h = e.querySelector("x"); h && h.remove(); var p = []; v.packet2JSON(e, p), this.lastPresences[t] = p; var m = function (e) { var t = {}, n = e.children.find(function (e) { return "user" === e.tagName; }); if (n) {
                        t.user = {};
                        var _loop_8 = function (e_116) {
                            var i_46 = n.children.find(function (t) { return t.tagName === e_116; });
                            i_46 && (t.user[e_116] = i_46.value);
                        };
                        for (var _i = 0, _a = ["id", "name", "avatar"]; _i < _a.length; _i++) {
                            var e_116 = _a[_i];
                            _loop_8(e_116);
                        }
                    } var i = e.children.find(function (e) { return "group" === e.tagName; }); return i && (t.group = i.value), t; }; for (var e_117 = 0; e_117 < p.length; e_117++) {
                        var t_101 = p[e_117];
                        switch (t_101.tagName) {
                            case "bot": {
                                var e_118 = t_101.attributes;
                                if (!e_118)
                                    break;
                                var i_47 = e_118.type;
                                n.botType = i_47;
                                break;
                            }
                            case "nick":
                                n.nick = t_101.value;
                                break;
                            case "userId":
                                n.id = t_101.value;
                                break;
                            case "stats-id":
                                n.statsID = t_101.value;
                                break;
                            case "identity":
                                n.identity = m(t_101);
                                break;
                            case "features":
                                n.features = this._extractFeatures(t_101);
                                break;
                            case "stat": {
                                var e_119 = t_101.attributes;
                                if (!e_119)
                                    break;
                                var i_48 = e_119.name;
                                "version" === i_48 && (n.version = e_119.value);
                                break;
                            }
                        }
                    } if (t === this.myroomjid) {
                        var e_120 = "owner" === n.affiliation ? n.role : "none";
                        if (this.role !== e_120 && (this.role = e_120, this.eventEmitter.emit(u.a.LOCAL_ROLE_CHANGED, this.role)), !this.joined) {
                            this.joined = !0;
                            var e_121 = this.connectionTimes["muc.joined"] = window.performance.now();
                            _.log("(TIME) MUC joined:\t", e_121), this.password && (this.locked = !0), this.presenceUpdateTime >= this.presenceSyncTime && this.sendPresence(), this.eventEmitter.emit(u.a.MUC_JOINED), !this.options.disableDiscoInfo && this.discoRoomInfo();
                        }
                    }
                    else if (void 0 === l)
                        _.info("Ignoring member with undefined JID");
                    else if (void 0 === this.members[t])
                        this.members[t] = n, _.log("entered", t, n), r = void 0 !== n.status, a = void 0 !== n.version, n.isFocus ? this._initFocus(t, n.features) : (this.eventEmitter.emit(u.a.MUC_MEMBER_JOINED, t, n.nick, n.role, n.isHiddenDomain, n.statsID, n.status, n.identity, n.botType, n.jid, n.features), r = !1);
                    else {
                        var e_122 = this.members[t];
                        e_122.role !== n.role && (e_122.role = n.role, this.eventEmitter.emit(u.a.MUC_ROLE_CHANGED, t, n.role)), e_122.affiliation !== n.affiliation && (e_122.affiliation = n.affiliation), e_122.botType !== n.botType && (e_122.botType = n.botType, this.eventEmitter.emit(u.a.MUC_MEMBER_BOT_TYPE_CHANGED, t, n.botType)), n.isFocus && (e_122.isFocus = !0, this._initFocus(t, n.features)), n.displayName && (e_122.displayName = n.displayName), e_122.status !== n.status && (r = !0, e_122.status = n.status), e_122.version !== n.version && (a = !0, e_122.version = n.version), s()(e_122.features, n.features) || (e_122.features = n.features, this.eventEmitter.emit(u.a.PARTICIPANT_FEATURES_CHANGED, t, n.features));
                    } for (var e_123 = 0; e_123 < p.length; e_123++) {
                        var i_49 = p[e_123];
                        switch (i_49.tagName) {
                            case "nick":
                                if (!n.isFocus) {
                                    var e_124 = this.xmpp.options.displayJids ? o.Strophe.getResourceFromJid(t) : n.nick;
                                    this.eventEmitter.emit(u.a.DISPLAY_NAME_CHANGED, t, e_124);
                                }
                                break;
                            case "bridgeNotAvailable":
                                n.isFocus && !this.noBridgeAvailable && (this.noBridgeAvailable = !0, this.eventEmitter.emit(u.a.BRIDGE_DOWN));
                                break;
                            case "conference-properties":
                                if (n.isFocus) {
                                    var e_125 = {};
                                    for (var t_102 = 0; t_102 < i_49.children.length; t_102++) {
                                        var n_66 = i_49.children[t_102].attributes;
                                        n_66 && n_66.key && (e_125[n_66.key] = n_66.value);
                                    }
                                    this.eventEmitter.emit(u.a.CONFERENCE_PROPERTIES_CHANGED, e_125), this.restartByTerminateSupported = "true" === e_125["support-terminate-restart"], _.info("Jicofo supports restart by terminate: " + this.supportsRestartByTerminate());
                                }
                                break;
                            case "transcription-status": {
                                var e_126 = i_49.attributes;
                                if (!e_126)
                                    break;
                                var t_103 = e_126.status;
                                t_103 && t_103 !== this.transcriptionStatus && (this.transcriptionStatus = t_103, this.eventEmitter.emit(u.a.TRANSCRIPTION_STATUS_CHANGED, t_103));
                                break;
                            }
                            case "call-control": {
                                var e_127 = i_49.attributes;
                                if (!e_127)
                                    break;
                                this.phoneNumber = e_127.phone || null, this.phonePin = e_127.pin || null, this.eventEmitter.emit(u.a.PHONE_NUMBER_CHANGED);
                                break;
                            }
                            default: this.processNode(i_49, t);
                        }
                    } r && this.eventEmitter.emit(u.a.PRESENCE_STATUS, t, n.status), a && _.info("Received version for " + l + ": " + n.version); };
                    E.prototype._extractFeatures = function (e) { var t = new Set; for (var n_67 = 0; n_67 < e.children.length; n_67++) {
                        var i_50 = e.children[n_67].attributes;
                        i_50 && i_50.var && t.add(i_50.var);
                    } return t; };
                    E.prototype._initFocus = function (e, t) { this.focusMucJid = e, this.focusFeatures = t; };
                    E.prototype.setParticipantPropertyListener = function (e) { this.participantPropertyListener = e; };
                    E.prototype.supportsRestartByTerminate = function () { return this.restartByTerminateSupported; };
                    E.prototype.processNode = function (e, t) { try {
                        var n_68 = this.presHandlers[e.tagName];
                        e.tagName.startsWith("jitsi_participant_") && (n_68 = [this.participantPropertyListener]), n_68 && n_68.forEach(function (n) { n(e, o.Strophe.getResourceFromJid(t), t); });
                    }
                    catch (t) {
                        h.a.callErrorHandler(t), _.error("Error processing:" + e.tagName + " node.", t);
                    } };
                    E.prototype.sendMessage = function (e, t, n) { var i = Object(o.$msg)({ to: this.roomjid, type: "groupchat" }); "body" === t ? i.c(t, e).up() : i.c(t, { xmlns: "http://jitsi.org/jitmeet" }, e).up(), n && i.c("nick", { xmlns: "http://jabber.org/protocol/nick" }).t(n).up().up(), this.connection.send(i), this.eventEmitter.emit(u.a.SENDING_CHAT_MESSAGE, e); };
                    E.prototype.sendPrivateMessage = function (e, t, n, i) { var r = Object(o.$msg)({ to: this.roomjid + "/" + e, type: "chat" }); "body" === n ? r.c(n, t).up() : r.c(n, { xmlns: "http://jitsi.org/jitmeet" }, t).up(), i && r.c("nick", { xmlns: "http://jabber.org/protocol/nick" }).t(i).up().up(), this.connection.send(r), this.eventEmitter.emit(u.a.SENDING_PRIVATE_CHAT_MESSAGE, t); };
                    E.prototype.setSubject = function (e) { var t = Object(o.$msg)({ to: this.roomjid, type: "groupchat" }); t.c("subject", e), this.connection.send(t); };
                    E.prototype.onParticipantLeft = function (e, t) { delete this.lastPresences[e], t || (this.eventEmitter.emit(u.a.MUC_MEMBER_LEFT, e), this.moderator.onMucMemberLeft(e)); };
                    E.prototype.onPresenceUnavailable = function (e, t) {
                        var _this = this;
                        if ($(e).find('>ignore[xmlns="http://jitsi.org/jitmeet/"]').length)
                            return !0;
                        var n = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>destroy');
                        if (n.length) {
                            var t_104;
                            var i_51 = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>destroy>reason');
                            return i_51.length && (t_104 = i_51.text()), this.eventEmitter.emit(u.a.MUC_DESTROYED, t_104, n.attr("jid")), this.connection.emuc.doLeave(this.roomjid), !0;
                        }
                        var i = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>status[code="110"]').length, r = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>status[code="307"]').length, s = Object.keys(this.members);
                        if (r) {
                            var n_69 = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>item>actor');
                            var r_22, s_17;
                            n_69.length && (r_22 = n_69.attr("nick"));
                            var a_9 = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>item>reason');
                            a_9.length && (s_17 = a_9.text()), this.eventEmitter.emit(u.a.KICKED, i, r_22, o.Strophe.getResourceFromJid(t), s_17);
                        }
                        i ? (s.forEach(function (e) { var t = _this.members[e]; delete _this.members[e], _this.onParticipantLeft(e, t.isFocus); }), this.connection.emuc.doLeave(this.roomjid), r || this.eventEmitter.emit(u.a.MUC_LEFT)) : (delete this.members[t], this.onParticipantLeft(t, !1));
                    };
                    E.prototype.onMessage = function (e, t) { var n = $(e).find('>nick[xmlns="http://jabber.org/protocol/nick"]').text() || o.Strophe.getResourceFromJid(t), i = e.getAttribute("type"); if ("error" === i) {
                        var t_105 = $(e).find(">error>text").text();
                        return this.eventEmitter.emit(u.a.CHAT_ERROR_RECEIVED, t_105), !0;
                    } var r = $(e).find(">body").text(), s = $(e).find(">subject"); if (s.length) {
                        var e_128 = s.text();
                        (e_128 || "" === e_128) && (this.eventEmitter.emit(u.a.SUBJECT_CHANGED, e_128), _.log("Subject is changed to " + e_128));
                    } var a = $(e).find(">delay").attr("stamp"); if (!a && (a = $(e).find('>[xmlns="jabber:x:delay"]').attr("stamp"), a)) {
                        var e_129 = a.match(/(\d{4})(\d{2})(\d{2}T\d{2}:\d{2}:\d{2})/);
                        a = e_129[1] + "-" + e_129[2] + "-" + e_129[3] + "Z";
                    } if (t === this.roomjid) {
                        var n_70;
                        if ($(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>status[code="104"]').length)
                            this.discoRoomInfo();
                        else if ((n_70 = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>invite')) && n_70.length) {
                            var i_52 = $(e).find('>x[xmlns="http://jabber.org/protocol/muc#user"]>password');
                            var s_18;
                            i_52 && i_52.length && (s_18 = i_52.text()), this.eventEmitter.emit(u.a.INVITE_MESSAGE_RECEIVED, t, n_70.attr("from"), r, s_18);
                        }
                    } var c = $(e).find(">json-message").text(); if (c) {
                        var e_130 = this.xmpp.tryParseJSONAndVerify(c);
                        if (e_130 && void 0 === a)
                            return void this.eventEmitter.emit(u.a.JSON_MESSAGE_RECEIVED, t, e_130);
                    } r && ("chat" === i ? this.eventEmitter.emit(u.a.PRIVATE_MESSAGE_RECEIVED, t, n, r, this.myroomjid, a) : "groupchat" === i && this.eventEmitter.emit(u.a.MESSAGE_RECEIVED, t, n, r, this.myroomjid, a)); };
                    E.prototype.onPresenceError = function (e, t) { if ($(e).find('>error[type="auth"]>not-authorized[xmlns="urn:ietf:params:xml:ns:xmpp-stanzas"]').length)
                        _.log("on password required", t), this.eventEmitter.emit(u.a.PASSWORD_REQUIRED);
                    else if ($(e).find('>error[type="cancel"]>not-allowed[xmlns="urn:ietf:params:xml:ns:xmpp-stanzas"]').length) {
                        o.Strophe.getDomainFromJid(e.getAttribute("to")) === this.xmpp.options.hosts.anonymousdomain ? this.eventEmitter.emit(u.a.ROOM_JOIN_ERROR) : (_.warn("onPresError ", e), this.eventEmitter.emit(u.a.ROOM_CONNECT_NOT_ALLOWED_ERROR));
                    }
                    else if ($(e).find(">error>service-unavailable").length)
                        _.warn("Maximum users limit for the room has been reached", e), this.eventEmitter.emit(u.a.ROOM_MAX_USERS_ERROR);
                    else if ($(e).find('>error[type="auth"]>registration-required[xmlns="urn:ietf:params:xml:ns:xmpp-stanzas"]').length) {
                        var t_106 = $(e).find(">lobbyroom");
                        var n_71;
                        t_106.length && (n_71 = t_106.text()), this.eventEmitter.emit(u.a.ROOM_CONNECT_MEMBERS_ONLY_ERROR, n_71);
                    }
                    else
                        _.warn("onPresError ", e), this.eventEmitter.emit(u.a.ROOM_CONNECT_ERROR); };
                    E.prototype.setAffiliation = function (e, t) { var n = Object(o.$iq)({ to: this.roomjid, type: "set" }).c("query", { xmlns: "http://jabber.org/protocol/muc#admin" }).c("item", { affiliation: t, nick: o.Strophe.getResourceFromJid(e) }).c("reason").t("Your affiliation has been changed to '" + t + "'.").up().up().up(); this.connection.sendIQ(n, function (n) { return _.log("Set affiliation of participant with jid: ", e, "to", t, n); }, function (e) { return _.log("Set affiliation of participant error: ", e); }); };
                    E.prototype.kick = function (e, t) {
                        if (t === void 0) { t = "You have been kicked."; }
                        var n = Object(o.$iq)({ to: this.roomjid, type: "set" }).c("query", { xmlns: "http://jabber.org/protocol/muc#admin" }).c("item", { nick: o.Strophe.getResourceFromJid(e), role: "none" }).c("reason").t(t).up().up().up();
                        this.connection.sendIQ(n, function (t) { return _.log("Kick participant with jid: ", e, t); }, function (e) { return _.log("Kick participant error: ", e); });
                    };
                    E.prototype.lockRoom = function (e, t, n, i) {
                        var _this = this;
                        this.connection.sendIQ(Object(o.$iq)({ to: this.roomjid, type: "get" }).c("query", { xmlns: "http://jabber.org/protocol/muc#owner" }), function (r) { if ($(r).find('>query>x[xmlns="jabber:x:data"]>field[var="muc#roomconfig_roomsecret"]').length) {
                            var i_53 = Object(o.$iq)({ to: _this.roomjid, type: "set" }).c("query", { xmlns: "http://jabber.org/protocol/muc#owner" });
                            i_53.c("x", { xmlns: "jabber:x:data", type: "submit" }), i_53.c("field", { var: "FORM_TYPE" }).c("value").t("http://jabber.org/protocol/muc#roomconfig").up().up(), i_53.c("field", { var: "muc#roomconfig_roomsecret" }).c("value").t(e).up().up(), i_53.c("field", { var: "muc#roomconfig_passwordprotectedroom" }).c("value").t(null === e || 0 === e.length ? "0" : "1").up().up(), _this.membersOnlyEnabled && i_53.c("field", { var: "muc#roomconfig_membersonly" }).c("value").t("true").up().up(), i_53.c("field", { var: "muc#roomconfig_whois" }).c("value").t("anyone").up().up(), _this.connection.sendIQ(i_53, function () { _this.password = e, t(); }, n);
                        }
                        else
                            i(); }, n);
                    };
                    E.prototype.setMembersOnly = function (e, t, n) {
                        var _this = this;
                        e && Object.values(this.members).filter(function (e) { return !e.isFocus; }).length && Object.values(this.members).forEach(function (e) { e.jid && !y.includes(e.affiliation) && _this.xmpp.connection.sendIQ(Object(o.$iq)({ to: _this.roomjid, type: "set" }).c("query", { xmlns: "http://jabber.org/protocol/muc#admin" }).c("item", { affiliation: "member", jid: e.jid }).up().up()); });
                        var i = n || (function () { });
                        this.xmpp.connection.sendIQ(Object(o.$iq)({ to: this.roomjid, type: "get" }).c("query", { xmlns: "http://jabber.org/protocol/muc#owner" }), function (n) { if ($(n).find('>query>x[xmlns="jabber:x:data"]>field[var="muc#roomconfig_membersonly"]').length) {
                            var n_72 = Object(o.$iq)({ to: _this.roomjid, type: "set" }).c("query", { xmlns: "http://jabber.org/protocol/muc#owner" });
                            n_72.c("x", { xmlns: "jabber:x:data", type: "submit" }), n_72.c("field", { var: "FORM_TYPE" }).c("value").t("http://jabber.org/protocol/muc#roomconfig").up().up(), n_72.c("field", { var: "muc#roomconfig_membersonly" }).c("value").t(e ? "true" : "false").up().up(), _this.locked && n_72.c("field", { var: "muc#roomconfig_passwordprotectedroom" }).c("value").t("1").up().up(), _this.xmpp.connection.sendIQ(n_72, t, i);
                        }
                        else
                            i(new Error("Setting members only room not supported!")); }, i);
                    };
                    E.prototype.addOrReplaceInPresence = function (e, t) { t.tagName = e; var n = this.presMap.nodes.filter(function (t) { return e === t.tagName; }); return (1 !== n.length || !s()(n[0], t)) && (this.removeFromPresence(e), this.presMap.nodes.push(t), this.presenceUpdateTime = Date.now(), !0); };
                    E.prototype.getFromPresence = function (e) { return this.presMap.nodes.find(function (t) { return e === t.tagName; }); };
                    E.prototype.removeFromPresence = function (e) { var t = this.presMap.nodes.filter(function (t) { return e !== t.tagName; }); this.presMap.nodes = t, this.presenceUpdateTime = Date.now(); };
                    E.prototype.addPresenceListener = function (e, t) { if ("function" != typeof t)
                        throw new Error('"handler" is not a function'); var n = this.presHandlers[e]; n || (this.presHandlers[e] = n = []), -1 === n.indexOf(t) ? n.push(t) : _.warn("Trying to add the same handler more than once for: " + e); };
                    E.prototype.removePresenceListener = function (e, t) { var n = this.presHandlers[e], i = n ? n.indexOf(t) : -1; -1 !== i ? n.splice(i, 1) : _.warn("Handler for: " + e + " was not registered"); };
                    E.prototype.isFocus = function (e) { var t = this.members[e]; return t ? t.isFocus : null; };
                    E.prototype.isModerator = function () { return "moderator" === this.role; };
                    E.prototype.getMemberRole = function (e) { return this.members[e] ? this.members[e].role : null; };
                    E.prototype.setVideoMute = function (e, t) { this.sendVideoInfoPresence(e), t && t(e); };
                    E.prototype.setAudioMute = function (e, t) { return this.sendAudioInfoPresence(e, t); };
                    E.prototype.addAudioInfoToPresence = function (e) { return this.addOrReplaceInPresence("audiomuted", { attributes: { xmlns: "http://jitsi.org/jitmeet/audio" }, value: e.toString() }); };
                    E.prototype.sendAudioInfoPresence = function (e, t) { this.addAudioInfoToPresence(e) && this.sendPresence(), t && t(); };
                    E.prototype.addVideoInfoToPresence = function (e) { return this.addOrReplaceInPresence("videomuted", { attributes: { xmlns: "http://jitsi.org/jitmeet/video" }, value: e.toString() }); };
                    E.prototype.sendVideoInfoPresence = function (e) { this.addVideoInfoToPresence(e) && this.sendPresence(); };
                    E.prototype.getMediaPresenceInfo = function (e, t) { var n = this.lastPresences[this.roomjid + "/" + e]; if (!n)
                        return null; var i = { muted: !0, videoType: void 0 }; var r = null; if (t === c.a)
                        r = S(n, "audiomuted");
                    else {
                        if (t !== c.c)
                            return _.error("Unsupported media type: " + t), null;
                        {
                            r = S(n, "videomuted");
                            var e_131 = S(n, "jitsi_participant_codecType"), t_107 = S(n, "videoType");
                            t_107.length > 0 && (i.videoType = t_107[0].value), e_131.length > 0 && (i.codecType = e_131[0].value);
                        }
                    } return r.length > 0 && (i.muted = "true" === r[0].value), i; };
                    E.prototype.isSIPCallingSupported = function () { return !!this.moderator && this.moderator.isSipGatewayEnabled(); };
                    E.prototype.dial = function (e) { return this.connection.rayo.dial(e, "fromnumber", o.Strophe.getBareJidFromJid(this.myroomjid), this.password, this.focusMucJid); };
                    E.prototype.hangup = function () { return this.connection.rayo.hangup(); };
                    E.prototype.getLobby = function () { return this.lobby; };
                    E.prototype.getPhoneNumber = function () { return this.phoneNumber; };
                    E.prototype.getPhonePin = function () { return this.phonePin; };
                    E.prototype.getMeetingId = function () { return this.meetingId; };
                    E.prototype.muteParticipant = function (e, t, n) { _.info("set mute", t); var i = Object(o.$iq)({ to: this.focusMucJid, type: "set" }).c("mute", { xmlns: "http://jitsi.org/jitmeet/" + n, jid: e }).t(t.toString()).up(); this.connection.sendIQ(i, function (e) { return _.log("set mute", e); }, function (e) { return _.log("set mute error", e); }); };
                    E.prototype.onMute = function (e) { if (e.getAttribute("from") !== this.focusMucJid)
                        return void _.warn("Ignored mute from non focus peer"); var t = $(e).find("mute"); t.length && "true" === t.text() ? this.eventEmitter.emit(u.a.AUDIO_MUTED_BY_FOCUS, t.attr("actor")) : _.warn("Ignoring a mute request which does not explicitly specify a positive mute command."); };
                    E.prototype.onMuteVideo = function (e) { if (e.getAttribute("from") !== this.focusMucJid)
                        return void _.warn("Ignored mute from non focus peer"); var t = $(e).find("mute"); t.length && "true" === t.text() ? this.eventEmitter.emit(u.a.VIDEO_MUTED_BY_FOCUS, t.attr("actor")) : _.warn("Ignoring a mute request which does not explicitly specify a positive mute command."); };
                    E.prototype.clean = function () { this._removeConnListeners.forEach(function (e) { return e(); }), this._removeConnListeners = [], this.joined = !1; };
                    E.prototype.leave = function () {
                        var _this = this;
                        return new Promise(function (e, t) { var n = setTimeout(function () { return r(!0); }, 5e3), i = _this.eventEmitter; function r(s) {
                            if (s === void 0) { s = !1; }
                            i.removeListener(u.a.MUC_LEFT, r), clearTimeout(n), s ? t(new Error("The timeout for the confirmation about leaving the room expired.")) : e();
                        } _this.clean(), i.on(u.a.MUC_LEFT, r), _this.doLeave(); });
                    };
                    return E;
                }(p.a));  }).call(this, "modules/xmpp/ChatRoom.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return c; })); var i = n(4), r = n(2), s = n(1), o = n.n(s); var a = Object(i.getLogger)(e);
                var c = /** @class */ (function () {
                    function c(e) {
                        var _this = this;
                        this.xmpp = e.xmpp, this.mainRoom = e;
                        var t = this._maybeJoinLobbyRoom.bind(this);
                        this.mainRoom.addEventListener(o.a.LOCAL_ROLE_CHANGED, t), this.mainRoom.addEventListener(o.a.MUC_MEMBERS_ONLY_CHANGED, t), this.mainRoom.addEventListener(o.a.ROOM_CONNECT_MEMBERS_ONLY_ERROR, function (e) { _this.lobbyRoomJid = e; });
                    }
                    c.prototype.isSupported = function () { return this.xmpp.lobbySupported; };
                    c.prototype.enable = function () {
                        var _this = this;
                        return this.isSupported() ? new Promise(function (e, t) { _this.mainRoom.setMembersOnly(!0, e, t); }) : Promise.reject(new Error("Lobby not supported!"));
                    };
                    c.prototype.disable = function () { this.isSupported() && this.mainRoom.isModerator() && this.lobbyRoom && this.mainRoom.membersOnlyEnabled && this.mainRoom.setMembersOnly(!1); };
                    c.prototype._leaveLobbyRoom = function () {
                        var _this = this;
                        this.lobbyRoom && this.lobbyRoom.leave().then(function () { _this.lobbyRoom = void 0, a.info("Lobby room left!"); }).catch(function () { });
                    };
                    c.prototype.setLobbyRoomJid = function (e) { this.lobbyRoomJid = e; };
                    c.prototype._maybeJoinLobbyRoom = function () { if (!this.isSupported())
                        return; this.mainRoom.joined && this.mainRoom.isModerator() && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom && this.join().then(function () { return a.info("Joined lobby room"); }).catch(function (e) { return a.error("Failed joining lobby", e); }); };
                    c.prototype.join = function (e, t) {
                        var _this = this;
                        var n = this.mainRoom.joined && this.mainRoom.isModerator();
                        if (!this.lobbyRoomJid)
                            return Promise.reject(new Error("Missing lobbyRoomJid, cannot join lobby room."));
                        var i = r.Strophe.getNodeFromJid(this.lobbyRoomJid), s = r.Strophe.getDomainFromJid(this.lobbyRoomJid);
                        return this.lobbyRoom = this.xmpp.createRoom(i, { customDomain: s, disableDiscoInfo: !0, disableFocus: !0, enableLobby: !1 }), e && this.lobbyRoom.addOrReplaceInPresence("nick", { attributes: { xmlns: "http://jabber.org/protocol/nick" }, value: e }), n ? (this.lobbyRoom.addPresenceListener("email", function (e, t) { _this.mainRoom.eventEmitter.emit(o.a.MUC_LOBBY_MEMBER_UPDATED, t, { email: e.value }); }), this.lobbyRoom.addEventListener(o.a.MUC_MEMBER_JOINED, function (e, t, n, i, s, a, c, d, u) { Object.values(_this.mainRoom.members).find(function (e) { return e.jid === u; }) || _this.mainRoom.eventEmitter.emit(o.a.MUC_LOBBY_MEMBER_JOINED, r.Strophe.getResourceFromJid(e), t, c ? c.avatar : void 0); }), this.lobbyRoom.addEventListener(o.a.MUC_MEMBER_LEFT, function (e) { _this.mainRoom.eventEmitter.emit(o.a.MUC_LOBBY_MEMBER_LEFT, r.Strophe.getResourceFromJid(e)); }), this.lobbyRoom.addEventListener(o.a.MUC_DESTROYED, function () { Object.keys(_this.lobbyRoom.members).forEach(function (e) { return _this.mainRoom.eventEmitter.emit(o.a.MUC_LOBBY_MEMBER_LEFT, r.Strophe.getResourceFromJid(e)); }), _this.lobbyRoom.clean(), _this.lobbyRoom = void 0, a.info("Lobby room left(destroyed)!"); })) : (this.lobbyRoom.addEventListener(o.a.KICKED, function (e) { if (e)
                            return _this.mainRoom.eventEmitter.emit(o.a.MUC_DENIED_ACCESS), void _this.lobbyRoom.clean(); }), this.mainRoom.addEventListener(o.a.INVITE_MESSAGE_RECEIVED, function (e, t, n, i) { a.debug("Received approval to join " + e + " " + t + " " + n), e === _this.mainRoom.roomjid && (_this.mainRoom.join(i), _this._leaveLobbyRoom()); }), this.lobbyRoom.addEventListener(o.a.MUC_DESTROYED, function (e, t) { t ? _this.mainRoom.join() : (_this.lobbyRoom.clean(), _this.mainRoom.eventEmitter.emit(o.a.MUC_DESTROYED, e)); }), this.mainRoom.addEventListener(o.a.MUC_JOINED, function () { _this._leaveLobbyRoom(); })), new Promise(function (e, i) { _this.lobbyRoom.addEventListener(o.a.MUC_JOINED, function () { e(), t && !n && _this.lobbyRoom.addOrReplaceInPresence("email", { value: t }) && _this.lobbyRoom.sendPresence(); }), _this.lobbyRoom.addEventListener(o.a.ROOM_JOIN_ERROR, i), _this.lobbyRoom.addEventListener(o.a.ROOM_CONNECT_NOT_ALLOWED_ERROR, i), _this.lobbyRoom.addEventListener(o.a.ROOM_CONNECT_ERROR, i), _this.lobbyRoom.join(); });
                    };
                    c.prototype.denyAccess = function (e) { if (!this.isSupported() || !this.mainRoom.isModerator())
                        return; var t = Object.keys(this.lobbyRoom.members).find(function (t) { return r.Strophe.getResourceFromJid(t) === e; }); t ? this.lobbyRoom.kick(t) : a.error("Not found member for " + e + " in lobby room."); };
                    c.prototype.approveAccess = function (e) { if (!this.isSupported() || !this.mainRoom.isModerator())
                        return; var t = Object.keys(this.lobbyRoom.members).find(function (t) { return r.Strophe.getResourceFromJid(t) === e; }); if (t) {
                        var e_132 = this.lobbyRoom.members[t].jid, n_73 = Object(r.$msg)({ to: this.mainRoom.roomjid }).c("x", { xmlns: "http://jabber.org/protocol/muc#user" }).c("invite", { to: e_132 });
                        this.xmpp.connection.sendIQ(n_73, function () { }, function (t) { a.error("Error sending invite for " + e_132, t); });
                    }
                    else
                        a.error("Not found member for " + t + " in lobby room."); };
                    return c;
                }());  }).call(this, "modules/xmpp/Lobby.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return l; })); var i = n(4), r = n(2), s = n(30); var o = n(71), a = n(1), c = n(11), d = Object(i.getLogger)(e); function u(e) { var t = 1; return function (n) { if (n)
                return void (t = 1); var i = Math.pow(2, t - 1); return t += 1, i * e; }; } function l(e, t, n, i) { function r(e) { if (e.data && e.data.sessionId) {
                if (e.origin !== window.location.origin)
                    return void d.warn("Ignoring sessionId from different origin: " + e.origin);
                s.a.sessionId = e.data.sessionId;
            } } this.roomName = e, this.xmppService = t, this.getNextTimeout = u(1e3), this.getNextErrorTimeout = u(1e3), this.externalAuthEnabled = !1, this.options = i, this.sipGatewayEnabled = !1, this.eventEmitter = n, this.connection = this.xmppService.connection, window.addEventListener ? window.addEventListener("message", r, !1) : window.attachEvent("onmessage", r); } l.prototype.isExternalAuthEnabled = function () { return this.externalAuthEnabled; }, l.prototype.isSipGatewayEnabled = function () { return this.sipGatewayEnabled; }, l.prototype.onMucMemberLeft = function (e) { d.info("Someone left is it focus ? " + e); "focus" === r.Strophe.getResourceFromJid(e) && (d.info("Focus has left the room - leaving conference"), this.eventEmitter.emit(a.FOCUS_LEFT)); }, l.prototype.setFocusUserJid = function (e) { this.focusUserJid || (this.focusUserJid = e, d.info("Focus jid set to:  " + this.focusUserJid)); }, l.prototype.getFocusUserJid = function () { return this.focusUserJid; }, l.prototype.getFocusComponent = function () { var e = this.options.connection.hosts.focus; return e || (e = "focus." + this.options.connection.hosts.domain), e; }, l.prototype.createConferenceIq = function () { var e = Object(r.$iq)({ to: this.getFocusComponent(), type: "set" }), t = s.a.sessionId, n = s.a.machineId, i = this.options.conference; return d.info("Session ID: " + t + " machine UID: " + n), e.c("conference", { xmlns: "http://jitsi.org/protocol/focus", room: this.roomName, "machine-uid": n }), t && e.attrs({ "session-id": t }), e.c("property", { name: "disableRtx", value: Boolean(i.disableRtx) }).up(), void 0 !== i.audioPacketDelay && e.c("property", { name: "audioPacketDelay", value: i.audioPacketDelay }).up(), i.startBitrate && e.c("property", { name: "startBitrate", value: i.startBitrate }).up(), i.minBitrate && e.c("property", { name: "minBitrate", value: i.minBitrate }).up(), i.opusMaxAverageBitrate && e.c("property", { name: "opusMaxAverageBitrate", value: i.opusMaxAverageBitrate }).up(), void 0 !== this.options.conference.startAudioMuted && e.c("property", { name: "startAudioMuted", value: this.options.conference.startAudioMuted }).up(), void 0 !== this.options.conference.startVideoMuted && e.c("property", { name: "startVideoMuted", value: this.options.conference.startVideoMuted }).up(), void 0 !== this.options.conference.stereo && e.c("property", { name: "stereo", value: this.options.conference.stereo }).up(), e.up(), e; }, l.prototype.parseSessionId = function (e) { var t = $(e).find("conference").attr("session-id"); t && (d.info("Received sessionId:  " + t), s.a.sessionId = t); }, l.prototype.parseConfigOptions = function (e) { this.setFocusUserJid($(e).find("conference").attr("focusjid")); var t = $(e).find(">conference>property[name='authentication'][value='true']").length > 0; d.info("Authentication enabled: " + t), this.externalAuthEnabled = $(e).find(">conference>property[name='externalAuth'][value='true']").length > 0, d.info("External authentication enabled: " + this.externalAuthEnabled), this.externalAuthEnabled || this.parseSessionId(e); var n = $(e).find(">conference").attr("identity"); this.eventEmitter.emit(o.IDENTITY_UPDATED, t, n), $(e).find(">conference>property[name='sipGatewayEnabled'][value='true']").length && (this.sipGatewayEnabled = !0), d.info("Sip gateway enabled:  " + this.sipGatewayEnabled); }, l.prototype.allocateConferenceFocus = function () {
                var _this = this;
                return new Promise(function (e) { _this.setFocusUserJid(_this.options.connection.focusUserJid), _this.connection.sendIQ(_this.createConferenceIq(), function (t) { return _this._allocateConferenceFocusSuccess(t, e); }, function (t) { return _this._allocateConferenceFocusError(t, e); }), _this.connection.flush(); });
            }, l.prototype._allocateConferenceFocusError = function (e, t) {
                var _this = this;
                var n = $(e).find(">error>session-invalid").length || $(e).find(">error>not-acceptable").length;
                if (n && (d.info("Session expired! - removing"), s.a.sessionId = void 0), $(e).find(">error>graceful-shutdown").length)
                    return void this.eventEmitter.emit(a.GRACEFUL_SHUTDOWN);
                var i = $(e).find(">error>reservation-error");
                if (i.length) {
                    var t_108 = i.attr("error-code"), n_74 = $(e).find(">error>text");
                    var r_23;
                    return n_74 && (r_23 = n_74.text()), void this.eventEmitter.emit(a.RESERVATION_ERROR, t_108, r_23);
                }
                if ($(e).find(">error>not-authorized").length) {
                    d.warn("Unauthorized to start the conference", e);
                    return r.Strophe.getDomainFromJid(e.getAttribute("to")) !== this.options.connection.hosts.anonymousdomain && (this.externalAuthEnabled = !0), void this.eventEmitter.emit(a.AUTHENTICATION_REQUIRED);
                }
                var o = this.getNextErrorTimeout(), u = "Focus error, retry after " + o;
                c.callErrorHandler(new Error(u)), d.error(u, e);
                var l = this.getFocusComponent(), h = o / 1e3;
                n || this.eventEmitter.emit(a.FOCUS_DISCONNECTED, l, h), this.getNextTimeout(!0), window.setTimeout(function () { return _this.allocateConferenceFocus().then(t); }, o);
            }, l.prototype._allocateConferenceFocusSuccess = function (e, t) {
                var _this = this;
                if (this.parseConfigOptions(e), this.getNextErrorTimeout(!0), "true" === $(e).find("conference").attr("ready"))
                    this.getNextTimeout(!0), t();
                else {
                    var e_133 = this.getNextTimeout();
                    d.info("Waiting for the focus... " + e_133), window.setTimeout(function () { return _this.allocateConferenceFocus().then(t); }, e_133);
                }
            }, l.prototype.authenticate = function () {
                var _this = this;
                return new Promise(function (e, t) { _this.connection.sendIQ(_this.createConferenceIq(), function (t) { _this.parseSessionId(t), e(); }, function (e) { return t({ error: $(e).find("iq>error :first").prop("tagName"), message: $(e).find("iq>error>text").text() }); }); });
            }, l.prototype.getLoginUrl = function (e, t) { this._getLoginUrl(!1, e, t); }, l.prototype._getLoginUrl = function (e, t, n) { var i = Object(r.$iq)({ to: this.getFocusComponent(), type: "get" }), o = { xmlns: "http://jitsi.org/protocol/focus", room: this.roomName, "machine-uid": s.a.machineId }; var a = "auth url"; function u(e, t) { c.callErrorHandler(new Error(e)), d.error(e, t), n(t); } e && (o.popup = !0, a = "POPUP " + a), i.c("login-url", o), this.connection.sendIQ(i, function (e) { var n = $(e).find("login-url").attr("url"); n = decodeURIComponent(n), n ? (d.info("Got " + a + ": " + n), t(n)) : u("Failed to get " + a + " from the focus", e); }, u.bind(void 0, "Get " + a + " error")); }, l.prototype.getPopupLoginUrl = function (e, t) { this._getLoginUrl(!0, e, t); }, l.prototype.logout = function (e) { var t = Object(r.$iq)({ to: this.getFocusComponent(), type: "set" }), n = s.a.sessionId; n ? (t.c("logout", { xmlns: "http://jitsi.org/protocol/focus", "session-id": n }), this.connection.sendIQ(t, function (t) { var n = $(t).find("logout").attr("logout-url"); n && (n = decodeURIComponent(n)), d.info("Log out OK, url: " + n, t), s.a.sessionId = void 0, e(n); }, function (e) { c.callErrorHandler(new Error("Logout error")), d.error("Logout error", e); })) : e(); }; }).call(this, "modules/xmpp/moderator.js");
        }, function (e, t, n) { var i = n(38), r = ["Aaliyah", "Aaron", "Abagail", "Abbey", "Abbie", "Abbigail", "Abby", "Abdiel", "Abdul", "Abdullah", "Abe", "Abel", "Abelardo", "Abigail", "Abigale", "Abigayle", "Abner", "Abraham", "Ada", "Adah", "Adalberto", "Adaline", "Adam", "Adan", "Addie", "Addison", "Adela", "Adelbert", "Adele", "Adelia", "Adeline", "Adell", "Adella", "Adelle", "Aditya", "Adolf", "Adolfo", "Adolph", "Adolphus", "Adonis", "Adrain", "Adrian", "Adriana", "Adrianna", "Adriel", "Adrien", "Adrienne", "Afton", "Aglae", "Agnes", "Agustin", "Agustina", "Ahmad", "Ahmed", "Aida", "Aidan", "Aiden", "Aileen", "Aisha", "Aiyana", "Akeem", "Al", "Alaina", "Alan", "Alana", "Alanis", "Alanna", "Alayna", "Alba", "Albert", "Alberta", "Albertha", "Alberto", "Albin", "Albina", "Alda", "Alden", "Alec", "Aleen", "Alejandra", "Alejandrin", "Alek", "Alena", "Alene", "Alessandra", "Alessandro", "Alessia", "Aletha", "Alex", "Alexa", "Alexander", "Alexandra", "Alexandre", "Alexandrea", "Alexandria", "Alexandrine", "Alexandro", "Alexane", "Alexanne", "Alexie", "Alexis", "Alexys", "Alexzander", "Alf", "Alfonso", "Alfonzo", "Alford", "Alfred", "Alfreda", "Alfredo", "Ali", "Alia", "Alice", "Alicia", "Alisa", "Alisha", "Alison", "Alivia", "Aliya", "Aliyah", "Aliza", "Alize", "Allan", "Allen", "Allene", "Allie", "Allison", "Ally", "Alphonso", "Alta", "Althea", "Alva", "Alvah", "Alvena", "Alvera", "Alverta", "Alvina", "Alvis", "Alyce", "Alycia", "Alysa", "Alysha", "Alyson", "Alysson", "Amalia", "Amanda", "Amani", "Amara", "Amari", "Amaya", "Amber", "Ambrose", "Amelia", "Amelie", "Amely", "America", "Americo", "Amie", "Amina", "Amir", "Amira", "Amiya", "Amos", "Amparo", "Amy", "Amya", "Ana", "Anabel", "Anabelle", "Anahi", "Anais", "Anastacio", "Anastasia", "Anderson", "Andre", "Andreane", "Andreanne", "Andres", "Andrew", "Andy", "Angel", "Angela", "Angelica", "Angelina", "Angeline", "Angelita", "Angelo", "Angie", "Angus", "Anibal", "Anika", "Anissa", "Anita", "Aniya", "Aniyah", "Anjali", "Anna", "Annabel", "Annabell", "Annabelle", "Annalise", "Annamae", "Annamarie", "Anne", "Annetta", "Annette", "Annie", "Ansel", "Ansley", "Anthony", "Antoinette", "Antone", "Antonetta", "Antonette", "Antonia", "Antonietta", "Antonina", "Antonio", "Antwan", "Antwon", "Anya", "April", "Ara", "Araceli", "Aracely", "Arch", "Archibald", "Ardella", "Arden", "Ardith", "Arely", "Ari", "Ariane", "Arianna", "Aric", "Ariel", "Arielle", "Arjun", "Arlene", "Arlie", "Arlo", "Armand", "Armando", "Armani", "Arnaldo", "Arne", "Arno", "Arnold", "Arnoldo", "Arnulfo", "Aron", "Art", "Arthur", "Arturo", "Arvel", "Arvid", "Arvilla", "Aryanna", "Asa", "Asha", "Ashlee", "Ashleigh", "Ashley", "Ashly", "Ashlynn", "Ashton", "Ashtyn", "Asia", "Assunta", "Astrid", "Athena", "Aubree", "Aubrey", "Audie", "Audra", "Audreanne", "Audrey", "August", "Augusta", "Augustine", "Augustus", "Aurelia", "Aurelie", "Aurelio", "Aurore", "Austen", "Austin", "Austyn", "Autumn", "Ava", "Avery", "Avis", "Axel", "Ayana", "Ayden", "Ayla", "Aylin", "Baby", "Bailee", "Bailey", "Barbara", "Barney", "Baron", "Barrett", "Barry", "Bart", "Bartholome", "Barton", "Baylee", "Beatrice", "Beau", "Beaulah", "Bell", "Bella", "Belle", "Ben", "Benedict", "Benjamin", "Bennett", "Bennie", "Benny", "Benton", "Berenice", "Bernadette", "Bernadine", "Bernard", "Bernardo", "Berneice", "Bernhard", "Bernice", "Bernie", "Berniece", "Bernita", "Berry", "Bert", "Berta", "Bertha", "Bertram", "Bertrand", "Beryl", "Bessie", "Beth", "Bethany", "Bethel", "Betsy", "Bette", "Bettie", "Betty", "Bettye", "Beulah", "Beverly", "Bianka", "Bill", "Billie", "Billy", "Birdie", "Blair", "Blaise", "Blake", "Blanca", "Blanche", "Blaze", "Bo", "Bobbie", "Bobby", "Bonita", "Bonnie", "Boris", "Boyd", "Brad", "Braden", "Bradford", "Bradley", "Bradly", "Brady", "Braeden", "Brain", "Brandi", "Brando", "Brandon", "Brandt", "Brandy", "Brandyn", "Brannon", "Branson", "Brant", "Braulio", "Braxton", "Brayan", "Breana", "Breanna", "Breanne", "Brenda", "Brendan", "Brenden", "Brendon", "Brenna", "Brennan", "Brennon", "Brent", "Bret", "Brett", "Bria", "Brian", "Briana", "Brianne", "Brice", "Bridget", "Bridgette", "Bridie", "Brielle", "Brigitte", "Brionna", "Brisa", "Britney", "Brittany", "Brock", "Broderick", "Brody", "Brook", "Brooke", "Brooklyn", "Brooks", "Brown", "Bruce", "Bryana", "Bryce", "Brycen", "Bryon", "Buck", "Bud", "Buddy", "Buford", "Bulah", "Burdette", "Burley", "Burnice", "Buster", "Cade", "Caden", "Caesar", "Caitlyn", "Cale", "Caleb", "Caleigh", "Cali", "Calista", "Callie", "Camden", "Cameron", "Camila", "Camilla", "Camille", "Camren", "Camron", "Camryn", "Camylle", "Candace", "Candelario", "Candice", "Candida", "Candido", "Cara", "Carey", "Carissa", "Carlee", "Carleton", "Carley", "Carli", "Carlie", "Carlo", "Carlos", "Carlotta", "Carmel", "Carmela", "Carmella", "Carmelo", "Carmen", "Carmine", "Carol", "Carolanne", "Carole", "Carolina", "Caroline", "Carolyn", "Carolyne", "Carrie", "Carroll", "Carson", "Carter", "Cary", "Casandra", "Casey", "Casimer", "Casimir", "Casper", "Cassandra", "Cassandre", "Cassidy", "Cassie", "Catalina", "Caterina", "Catharine", "Catherine", "Cathrine", "Cathryn", "Cathy", "Cayla", "Ceasar", "Cecelia", "Cecil", "Cecile", "Cecilia", "Cedrick", "Celestine", "Celestino", "Celia", "Celine", "Cesar", "Chad", "Chadd", "Chadrick", "Chaim", "Chance", "Chandler", "Chanel", "Chanelle", "Charity", "Charlene", "Charles", "Charley", "Charlie", "Charlotte", "Chase", "Chasity", "Chauncey", "Chaya", "Chaz", "Chelsea", "Chelsey", "Chelsie", "Chesley", "Chester", "Chet", "Cheyanne", "Cheyenne", "Chloe", "Chris", "Christ", "Christa", "Christelle", "Christian", "Christiana", "Christina", "Christine", "Christop", "Christophe", "Christopher", "Christy", "Chyna", "Ciara", "Cicero", "Cielo", "Cierra", "Cindy", "Citlalli", "Clair", "Claire", "Clara", "Clarabelle", "Clare", "Clarissa", "Clark", "Claud", "Claude", "Claudia", "Claudie", "Claudine", "Clay", "Clemens", "Clement", "Clementina", "Clementine", "Clemmie", "Cleo", "Cleora", "Cleta", "Cletus", "Cleve", "Cleveland", "Clifford", "Clifton", "Clint", "Clinton", "Clotilde", "Clovis", "Cloyd", "Clyde", "Coby", "Cody", "Colby", "Cole", "Coleman", "Colin", "Colleen", "Collin", "Colt", "Colten", "Colton", "Columbus", "Concepcion", "Conner", "Connie", "Connor", "Conor", "Conrad", "Constance", "Constantin", "Consuelo", "Cooper", "Cora", "Coralie", "Corbin", "Cordelia", "Cordell", "Cordia", "Cordie", "Corene", "Corine", "Cornelius", "Cornell", "Corrine", "Cortez", "Cortney", "Cory", "Coty", "Courtney", "Coy", "Craig", "Crawford", "Creola", "Cristal", "Cristian", "Cristina", "Cristobal", "Cristopher", "Cruz", "Crystal", "Crystel", "Cullen", "Curt", "Curtis", "Cydney", "Cynthia", "Cyril", "Cyrus", "Dagmar", "Dahlia", "Daija", "Daisha", "Daisy", "Dakota", "Dale", "Dallas", "Dallin", "Dalton", "Damaris", "Dameon", "Damian", "Damien", "Damion", "Damon", "Dan", "Dana", "Dandre", "Dane", "D'angelo", "Dangelo", "Danial", "Daniela", "Daniella", "Danielle", "Danika", "Dannie", "Danny", "Dante", "Danyka", "Daphne", "Daphnee", "Daphney", "Darby", "Daren", "Darian", "Dariana", "Darien", "Dario", "Darion", "Darius", "Darlene", "Daron", "Darrel", "Darrell", "Darren", "Darrick", "Darrin", "Darrion", "Darron", "Darryl", "Darwin", "Daryl", "Dashawn", "Dasia", "Dave", "David", "Davin", "Davion", "Davon", "Davonte", "Dawn", "Dawson", "Dax", "Dayana", "Dayna", "Dayne", "Dayton", "Dean", "Deangelo", "Deanna", "Deborah", "Declan", "Dedric", "Dedrick", "Dee", "Deion", "Deja", "Dejah", "Dejon", "Dejuan", "Delaney", "Delbert", "Delfina", "Delia", "Delilah", "Dell", "Della", "Delmer", "Delores", "Delpha", "Delphia", "Delphine", "Delta", "Demarco", "Demarcus", "Demario", "Demetris", "Demetrius", "Demond", "Dena", "Denis", "Dennis", "Deon", "Deondre", "Deontae", "Deonte", "Dereck", "Derek", "Derick", "Deron", "Derrick", "Deshaun", "Deshawn", "Desiree", "Desmond", "Dessie", "Destany", "Destin", "Destinee", "Destiney", "Destini", "Destiny", "Devan", "Devante", "Deven", "Devin", "Devon", "Devonte", "Devyn", "Dewayne", "Dewitt", "Dexter", "Diamond", "Diana", "Dianna", "Diego", "Dillan", "Dillon", "Dimitri", "Dina", "Dino", "Dion", "Dixie", "Dock", "Dolly", "Dolores", "Domenic", "Domenica", "Domenick", "Domenico", "Domingo", "Dominic", "Dominique", "Don", "Donald", "Donato", "Donavon", "Donna", "Donnell", "Donnie", "Donny", "Dora", "Dorcas", "Dorian", "Doris", "Dorothea", "Dorothy", "Dorris", "Dortha", "Dorthy", "Doug", "Douglas", "Dovie", "Doyle", "Drake", "Drew", "Duane", "Dudley", "Dulce", "Duncan", "Durward", "Dustin", "Dusty", "Dwight", "Dylan", "Earl", "Earlene", "Earline", "Earnest", "Earnestine", "Easter", "Easton", "Ebba", "Ebony", "Ed", "Eda", "Edd", "Eddie", "Eden", "Edgar", "Edgardo", "Edison", "Edmond", "Edmund", "Edna", "Eduardo", "Edward", "Edwardo", "Edwin", "Edwina", "Edyth", "Edythe", "Effie", "Efrain", "Efren", "Eileen", "Einar", "Eino", "Eladio", "Elaina", "Elbert", "Elda", "Eldon", "Eldora", "Eldred", "Eldridge", "Eleanora", "Eleanore", "Eleazar", "Electa", "Elena", "Elenor", "Elenora", "Eleonore", "Elfrieda", "Eli", "Elian", "Eliane", "Elias", "Eliezer", "Elijah", "Elinor", "Elinore", "Elisa", "Elisabeth", "Elise", "Eliseo", "Elisha", "Elissa", "Eliza", "Elizabeth", "Ella", "Ellen", "Ellie", "Elliot", "Elliott", "Ellis", "Ellsworth", "Elmer", "Elmira", "Elmo", "Elmore", "Elna", "Elnora", "Elody", "Eloisa", "Eloise", "Elouise", "Eloy", "Elroy", "Elsa", "Else", "Elsie", "Elta", "Elton", "Elva", "Elvera", "Elvie", "Elvis", "Elwin", "Elwyn", "Elyse", "Elyssa", "Elza", "Emanuel", "Emelia", "Emelie", "Emely", "Emerald", "Emerson", "Emery", "Emie", "Emil", "Emile", "Emilia", "Emiliano", "Emilie", "Emilio", "Emily", "Emma", "Emmalee", "Emmanuel", "Emmanuelle", "Emmet", "Emmett", "Emmie", "Emmitt", "Emmy", "Emory", "Ena", "Enid", "Enoch", "Enola", "Enos", "Enrico", "Enrique", "Ephraim", "Era", "Eriberto", "Eric", "Erica", "Erich", "Erick", "Ericka", "Erik", "Erika", "Erin", "Erling", "Erna", "Ernest", "Ernestina", "Ernestine", "Ernesto", "Ernie", "Ervin", "Erwin", "Eryn", "Esmeralda", "Esperanza", "Esta", "Esteban", "Estefania", "Estel", "Estell", "Estella", "Estelle", "Estevan", "Esther", "Estrella", "Etha", "Ethan", "Ethel", "Ethelyn", "Ethyl", "Ettie", "Eudora", "Eugene", "Eugenia", "Eula", "Eulah", "Eulalia", "Euna", "Eunice", "Eusebio", "Eva", "Evalyn", "Evan", "Evangeline", "Evans", "Eve", "Eveline", "Evelyn", "Everardo", "Everett", "Everette", "Evert", "Evie", "Ewald", "Ewell", "Ezekiel", "Ezequiel", "Ezra", "Fabian", "Fabiola", "Fae", "Fannie", "Fanny", "Fatima", "Faustino", "Fausto", "Favian", "Fay", "Faye", "Federico", "Felicia", "Felicita", "Felicity", "Felipa", "Felipe", "Felix", "Felton", "Fermin", "Fern", "Fernando", "Ferne", "Fidel", "Filiberto", "Filomena", "Finn", "Fiona", "Flavie", "Flavio", "Fleta", "Fletcher", "Flo", "Florence", "Florencio", "Florian", "Florida", "Florine", "Flossie", "Floy", "Floyd", "Ford", "Forest", "Forrest", "Foster", "Frances", "Francesca", "Francesco", "Francis", "Francisca", "Francisco", "Franco", "Frank", "Frankie", "Franz", "Fred", "Freda", "Freddie", "Freddy", "Frederic", "Frederick", "Frederik", "Frederique", "Fredrick", "Fredy", "Freeda", "Freeman", "Freida", "Frida", "Frieda", "Friedrich", "Fritz", "Furman", "Gabe", "Gabriel", "Gabriella", "Gabrielle", "Gaetano", "Gage", "Gail", "Gardner", "Garett", "Garfield", "Garland", "Garnet", "Garnett", "Garret", "Garrett", "Garrick", "Garrison", "Garry", "Garth", "Gaston", "Gavin", "Gay", "Gayle", "Gaylord", "Gene", "General", "Genesis", "Genevieve", "Gennaro", "Genoveva", "Geo", "Geoffrey", "George", "Georgette", "Georgiana", "Georgianna", "Geovanni", "Geovanny", "Geovany", "Gerald", "Geraldine", "Gerard", "Gerardo", "Gerda", "Gerhard", "Germaine", "German", "Gerry", "Gerson", "Gertrude", "Gia", "Gianni", "Gideon", "Gilbert", "Gilberto", "Gilda", "Giles", "Gillian", "Gina", "Gino", "Giovani", "Giovanna", "Giovanni", "Giovanny", "Gisselle", "Giuseppe", "Gladyce", "Gladys", "Glen", "Glenda", "Glenna", "Glennie", "Gloria", "Godfrey", "Golda", "Golden", "Gonzalo", "Gordon", "Grace", "Gracie", "Graciela", "Grady", "Graham", "Grant", "Granville", "Grayce", "Grayson", "Green", "Greg", "Gregg", "Gregoria", "Gregorio", "Gregory", "Greta", "Gretchen", "Greyson", "Griffin", "Grover", "Guadalupe", "Gudrun", "Guido", "Guillermo", "Guiseppe", "Gunnar", "Gunner", "Gus", "Gussie", "Gust", "Gustave", "Guy", "Gwen", "Gwendolyn", "Hadley", "Hailee", "Hailey", "Hailie", "Hal", "Haleigh", "Haley", "Halie", "Halle", "Hallie", "Hank", "Hanna", "Hannah", "Hans", "Hardy", "Harley", "Harmon", "Harmony", "Harold", "Harrison", "Harry", "Harvey", "Haskell", "Hassan", "Hassie", "Hattie", "Haven", "Hayden", "Haylee", "Hayley", "Haylie", "Hazel", "Hazle", "Heath", "Heather", "Heaven", "Heber", "Hector", "Heidi", "Helen", "Helena", "Helene", "Helga", "Hellen", "Helmer", "Heloise", "Henderson", "Henri", "Henriette", "Henry", "Herbert", "Herman", "Hermann", "Hermina", "Herminia", "Herminio", "Hershel", "Herta", "Hertha", "Hester", "Hettie", "Hilario", "Hilbert", "Hilda", "Hildegard", "Hillard", "Hillary", "Hilma", "Hilton", "Hipolito", "Hiram", "Hobart", "Holden", "Hollie", "Hollis", "Holly", "Hope", "Horace", "Horacio", "Hortense", "Hosea", "Houston", "Howard", "Howell", "Hoyt", "Hubert", "Hudson", "Hugh", "Hulda", "Humberto", "Hunter", "Hyman", "Ian", "Ibrahim", "Icie", "Ida", "Idell", "Idella", "Ignacio", "Ignatius", "Ike", "Ila", "Ilene", "Iliana", "Ima", "Imani", "Imelda", "Immanuel", "Imogene", "Ines", "Irma", "Irving", "Irwin", "Isaac", "Isabel", "Isabell", "Isabella", "Isabelle", "Isac", "Isadore", "Isai", "Isaiah", "Isaias", "Isidro", "Ismael", "Isobel", "Isom", "Israel", "Issac", "Itzel", "Iva", "Ivah", "Ivory", "Ivy", "Izabella", "Izaiah", "Jabari", "Jace", "Jacey", "Jacinthe", "Jacinto", "Jack", "Jackeline", "Jackie", "Jacklyn", "Jackson", "Jacky", "Jaclyn", "Jacquelyn", "Jacques", "Jacynthe", "Jada", "Jade", "Jaden", "Jadon", "Jadyn", "Jaeden", "Jaida", "Jaiden", "Jailyn", "Jaime", "Jairo", "Jakayla", "Jake", "Jakob", "Jaleel", "Jalen", "Jalon", "Jalyn", "Jamaal", "Jamal", "Jamar", "Jamarcus", "Jamel", "Jameson", "Jamey", "Jamie", "Jamil", "Jamir", "Jamison", "Jammie", "Jan", "Jana", "Janae", "Jane", "Janelle", "Janessa", "Janet", "Janice", "Janick", "Janie", "Janis", "Janiya", "Jannie", "Jany", "Jaquan", "Jaquelin", "Jaqueline", "Jared", "Jaren", "Jarod", "Jaron", "Jarred", "Jarrell", "Jarret", "Jarrett", "Jarrod", "Jarvis", "Jasen", "Jasmin", "Jason", "Jasper", "Jaunita", "Javier", "Javon", "Javonte", "Jay", "Jayce", "Jaycee", "Jayda", "Jayde", "Jayden", "Jaydon", "Jaylan", "Jaylen", "Jaylin", "Jaylon", "Jayme", "Jayne", "Jayson", "Jazlyn", "Jazmin", "Jazmyn", "Jazmyne", "Jean", "Jeanette", "Jeanie", "Jeanne", "Jed", "Jedediah", "Jedidiah", "Jeff", "Jefferey", "Jeffery", "Jeffrey", "Jeffry", "Jena", "Jenifer", "Jennie", "Jennifer", "Jennings", "Jennyfer", "Jensen", "Jerad", "Jerald", "Jeramie", "Jeramy", "Jerel", "Jeremie", "Jeremy", "Jermain", "Jermaine", "Jermey", "Jerod", "Jerome", "Jeromy", "Jerrell", "Jerrod", "Jerrold", "Jerry", "Jess", "Jesse", "Jessica", "Jessie", "Jessika", "Jessy", "Jessyca", "Jesus", "Jett", "Jettie", "Jevon", "Jewel", "Jewell", "Jillian", "Jimmie", "Jimmy", "Jo", "Joan", "Joana", "Joanie", "Joanne", "Joannie", "Joanny", "Joany", "Joaquin", "Jocelyn", "Jodie", "Jody", "Joe", "Joel", "Joelle", "Joesph", "Joey", "Johan", "Johann", "Johanna", "Johathan", "John", "Johnathan", "Johnathon", "Johnnie", "Johnny", "Johnpaul", "Johnson", "Jolie", "Jon", "Jonas", "Jonatan", "Jonathan", "Jonathon", "Jordan", "Jordane", "Jordi", "Jordon", "Jordy", "Jordyn", "Jorge", "Jose", "Josefa", "Josefina", "Joseph", "Josephine", "Josh", "Joshua", "Joshuah", "Josiah", "Josiane", "Josianne", "Josie", "Josue", "Jovan", "Jovani", "Jovanny", "Jovany", "Joy", "Joyce", "Juana", "Juanita", "Judah", "Judd", "Jude", "Judge", "Judson", "Judy", "Jules", "Julia", "Julian", "Juliana", "Julianne", "Julie", "Julien", "Juliet", "Julio", "Julius", "June", "Junior", "Junius", "Justen", "Justice", "Justina", "Justine", "Juston", "Justus", "Justyn", "Juvenal", "Juwan", "Kacey", "Kaci", "Kacie", "Kade", "Kaden", "Kadin", "Kaela", "Kaelyn", "Kaia", "Kailee", "Kailey", "Kailyn", "Kaitlin", "Kaitlyn", "Kale", "Kaleb", "Kaleigh", "Kaley", "Kali", "Kallie", "Kameron", "Kamille", "Kamren", "Kamron", "Kamryn", "Kane", "Kara", "Kareem", "Karelle", "Karen", "Kari", "Kariane", "Karianne", "Karina", "Karine", "Karl", "Karlee", "Karley", "Karli", "Karlie", "Karolann", "Karson", "Kasandra", "Kasey", "Kassandra", "Katarina", "Katelin", "Katelyn", "Katelynn", "Katharina", "Katherine", "Katheryn", "Kathleen", "Kathlyn", "Kathryn", "Kathryne", "Katlyn", "Katlynn", "Katrina", "Katrine", "Kattie", "Kavon", "Kay", "Kaya", "Kaycee", "Kayden", "Kayla", "Kaylah", "Kaylee", "Kayleigh", "Kayley", "Kayli", "Kaylie", "Kaylin", "Keagan", "Keanu", "Keara", "Keaton", "Keegan", "Keeley", "Keely", "Keenan", "Keira", "Keith", "Kellen", "Kelley", "Kelli", "Kellie", "Kelly", "Kelsi", "Kelsie", "Kelton", "Kelvin", "Ken", "Kendall", "Kendra", "Kendrick", "Kenna", "Kennedi", "Kennedy", "Kenneth", "Kennith", "Kenny", "Kenton", "Kenya", "Kenyatta", "Kenyon", "Keon", "Keshaun", "Keshawn", "Keven", "Kevin", "Kevon", "Keyon", "Keyshawn", "Khalid", "Khalil", "Kian", "Kiana", "Kianna", "Kiara", "Kiarra", "Kiel", "Kiera", "Kieran", "Kiley", "Kim", "Kimberly", "King", "Kip", "Kira", "Kirk", "Kirsten", "Kirstin", "Kitty", "Kobe", "Koby", "Kody", "Kolby", "Kole", "Korbin", "Korey", "Kory", "Kraig", "Kris", "Krista", "Kristian", "Kristin", "Kristina", "Kristofer", "Kristoffer", "Kristopher", "Kristy", "Krystal", "Krystel", "Krystina", "Kurt", "Kurtis", "Kyla", "Kyle", "Kylee", "Kyleigh", "Kyler", "Kylie", "Kyra", "Lacey", "Lacy", "Ladarius", "Lafayette", "Laila", "Laisha", "Lamar", "Lambert", "Lamont", "Lance", "Landen", "Lane", "Laney", "Larissa", "Laron", "Larry", "Larue", "Laura", "Laurel", "Lauren", "Laurence", "Lauretta", "Lauriane", "Laurianne", "Laurie", "Laurine", "Laury", "Lauryn", "Lavada", "Lavern", "Laverna", "Laverne", "Lavina", "Lavinia", "Lavon", "Lavonne", "Lawrence", "Lawson", "Layla", "Layne", "Lazaro", "Lea", "Leann", "Leanna", "Leanne", "Leatha", "Leda", "Lee", "Leif", "Leila", "Leilani", "Lela", "Lelah", "Leland", "Lelia", "Lempi", "Lemuel", "Lenna", "Lennie", "Lenny", "Lenora", "Lenore", "Leo", "Leola", "Leon", "Leonard", "Leonardo", "Leone", "Leonel", "Leonie", "Leonor", "Leonora", "Leopold", "Leopoldo", "Leora", "Lera", "Lesley", "Leslie", "Lesly", "Lessie", "Lester", "Leta", "Letha", "Letitia", "Levi", "Lew", "Lewis", "Lexi", "Lexie", "Lexus", "Lia", "Liam", "Liana", "Libbie", "Libby", "Lila", "Lilian", "Liliana", "Liliane", "Lilla", "Lillian", "Lilliana", "Lillie", "Lilly", "Lily", "Lilyan", "Lina", "Lincoln", "Linda", "Lindsay", "Lindsey", "Linnea", "Linnie", "Linwood", "Lionel", "Lisa", "Lisandro", "Lisette", "Litzy", "Liza", "Lizeth", "Lizzie", "Llewellyn", "Lloyd", "Logan", "Lois", "Lola", "Lolita", "Loma", "Lon", "London", "Lonie", "Lonnie", "Lonny", "Lonzo", "Lora", "Loraine", "Loren", "Lorena", "Lorenz", "Lorenza", "Lorenzo", "Lori", "Lorine", "Lorna", "Lottie", "Lou", "Louie", "Louisa", "Lourdes", "Louvenia", "Lowell", "Loy", "Loyal", "Loyce", "Lucas", "Luciano", "Lucie", "Lucienne", "Lucile", "Lucinda", "Lucio", "Lucious", "Lucius", "Lucy", "Ludie", "Ludwig", "Lue", "Luella", "Luigi", "Luis", "Luisa", "Lukas", "Lula", "Lulu", "Luna", "Lupe", "Lura", "Lurline", "Luther", "Luz", "Lyda", "Lydia", "Lyla", "Lynn", "Lyric", "Lysanne", "Mabel", "Mabelle", "Mable", "Mac", "Macey", "Maci", "Macie", "Mack", "Mackenzie", "Macy", "Madaline", "Madalyn", "Maddison", "Madeline", "Madelyn", "Madelynn", "Madge", "Madie", "Madilyn", "Madisen", "Madison", "Madisyn", "Madonna", "Madyson", "Mae", "Maegan", "Maeve", "Mafalda", "Magali", "Magdalen", "Magdalena", "Maggie", "Magnolia", "Magnus", "Maia", "Maida", "Maiya", "Major", "Makayla", "Makenna", "Makenzie", "Malachi", "Malcolm", "Malika", "Malinda", "Mallie", "Mallory", "Malvina", "Mandy", "Manley", "Manuel", "Manuela", "Mara", "Marc", "Marcel", "Marcelina", "Marcelino", "Marcella", "Marcelle", "Marcellus", "Marcelo", "Marcia", "Marco", "Marcos", "Marcus", "Margaret", "Margarete", "Margarett", "Margaretta", "Margarette", "Margarita", "Marge", "Margie", "Margot", "Margret", "Marguerite", "Maria", "Mariah", "Mariam", "Marian", "Mariana", "Mariane", "Marianna", "Marianne", "Mariano", "Maribel", "Marie", "Mariela", "Marielle", "Marietta", "Marilie", "Marilou", "Marilyne", "Marina", "Mario", "Marion", "Marisa", "Marisol", "Maritza", "Marjolaine", "Marjorie", "Marjory", "Mark", "Markus", "Marlee", "Marlen", "Marlene", "Marley", "Marlin", "Marlon", "Marques", "Marquis", "Marquise", "Marshall", "Marta", "Martin", "Martina", "Martine", "Marty", "Marvin", "Mary", "Maryam", "Maryjane", "Maryse", "Mason", "Mateo", "Mathew", "Mathias", "Mathilde", "Matilda", "Matilde", "Matt", "Matteo", "Mattie", "Maud", "Maude", "Maudie", "Maureen", "Maurice", "Mauricio", "Maurine", "Maverick", "Mavis", "Max", "Maxie", "Maxime", "Maximilian", "Maximillia", "Maximillian", "Maximo", "Maximus", "Maxine", "Maxwell", "May", "Maya", "Maybell", "Maybelle", "Maye", "Maymie", "Maynard", "Mayra", "Mazie", "Mckayla", "Mckenna", "Mckenzie", "Meagan", "Meaghan", "Meda", "Megane", "Meggie", "Meghan", "Mekhi", "Melany", "Melba", "Melisa", "Melissa", "Mellie", "Melody", "Melvin", "Melvina", "Melyna", "Melyssa", "Mercedes", "Meredith", "Merl", "Merle", "Merlin", "Merritt", "Mertie", "Mervin", "Meta", "Mia", "Micaela", "Micah", "Michael", "Michaela", "Michale", "Micheal", "Michel", "Michele", "Michelle", "Miguel", "Mikayla", "Mike", "Mikel", "Milan", "Miles", "Milford", "Miller", "Millie", "Milo", "Milton", "Mina", "Minerva", "Minnie", "Miracle", "Mireille", "Mireya", "Misael", "Missouri", "Misty", "Mitchel", "Mitchell", "Mittie", "Modesta", "Modesto", "Mohamed", "Mohammad", "Mohammed", "Moises", "Mollie", "Molly", "Mona", "Monica", "Monique", "Monroe", "Monserrat", "Monserrate", "Montana", "Monte", "Monty", "Morgan", "Moriah", "Morris", "Mortimer", "Morton", "Mose", "Moses", "Moshe", "Mossie", "Mozell", "Mozelle", "Muhammad", "Muriel", "Murl", "Murphy", "Murray", "Mustafa", "Mya", "Myah", "Mylene", "Myles", "Myra", "Myriam", "Myrl", "Myrna", "Myron", "Myrtice", "Myrtie", "Myrtis", "Myrtle", "Nadia", "Nakia", "Name", "Nannie", "Naomi", "Naomie", "Napoleon", "Narciso", "Nash", "Nasir", "Nat", "Natalia", "Natalie", "Natasha", "Nathan", "Nathanael", "Nathanial", "Nathaniel", "Nathen", "Nayeli", "Neal", "Ned", "Nedra", "Neha", "Neil", "Nelda", "Nella", "Nelle", "Nellie", "Nels", "Nelson", "Neoma", "Nestor", "Nettie", "Neva", "Newell", "Newton", "Nia", "Nicholas", "Nicholaus", "Nichole", "Nick", "Nicklaus", "Nickolas", "Nico", "Nicola", "Nicolas", "Nicole", "Nicolette", "Nigel", "Nikita", "Nikki", "Nikko", "Niko", "Nikolas", "Nils", "Nina", "Noah", "Noble", "Noe", "Noel", "Noelia", "Noemi", "Noemie", "Noemy", "Nola", "Nolan", "Nona", "Nora", "Norbert", "Norberto", "Norene", "Norma", "Norris", "Norval", "Norwood", "Nova", "Novella", "Nya", "Nyah", "Nyasia", "Obie", "Oceane", "Ocie", "Octavia", "Oda", "Odell", "Odessa", "Odie", "Ofelia", "Okey", "Ola", "Olaf", "Ole", "Olen", "Oleta", "Olga", "Olin", "Oliver", "Ollie", "Oma", "Omari", "Omer", "Ona", "Onie", "Opal", "Ophelia", "Ora", "Oral", "Oran", "Oren", "Orie", "Orin", "Orion", "Orland", "Orlando", "Orlo", "Orpha", "Orrin", "Orval", "Orville", "Osbaldo", "Osborne", "Oscar", "Osvaldo", "Oswald", "Oswaldo", "Otha", "Otho", "Otilia", "Otis", "Ottilie", "Ottis", "Otto", "Ova", "Owen", "Ozella", "Pablo", "Paige", "Palma", "Pamela", "Pansy", "Paolo", "Paris", "Parker", "Pascale", "Pasquale", "Pat", "Patience", "Patricia", "Patrick", "Patsy", "Pattie", "Paul", "Paula", "Pauline", "Paxton", "Payton", "Pearl", "Pearlie", "Pearline", "Pedro", "Peggie", "Penelope", "Percival", "Percy", "Perry", "Pete", "Peter", "Petra", "Peyton", "Philip", "Phoebe", "Phyllis", "Pierce", "Pierre", "Pietro", "Pink", "Pinkie", "Piper", "Polly", "Porter", "Precious", "Presley", "Preston", "Price", "Prince", "Princess", "Priscilla", "Providenci", "Prudence", "Queen", "Queenie", "Quentin", "Quincy", "Quinn", "Quinten", "Quinton", "Rachael", "Rachel", "Rachelle", "Rae", "Raegan", "Rafael", "Rafaela", "Raheem", "Rahsaan", "Rahul", "Raina", "Raleigh", "Ralph", "Ramiro", "Ramon", "Ramona", "Randal", "Randall", "Randi", "Randy", "Ransom", "Raoul", "Raphael", "Raphaelle", "Raquel", "Rashad", "Rashawn", "Rasheed", "Raul", "Raven", "Ray", "Raymond", "Raymundo", "Reagan", "Reanna", "Reba", "Rebeca", "Rebecca", "Rebeka", "Rebekah", "Reece", "Reed", "Reese", "Regan", "Reggie", "Reginald", "Reid", "Reilly", "Reina", "Reinhold", "Remington", "Rene", "Renee", "Ressie", "Reta", "Retha", "Retta", "Reuben", "Reva", "Rex", "Rey", "Reyes", "Reymundo", "Reyna", "Reynold", "Rhea", "Rhett", "Rhianna", "Rhiannon", "Rhoda", "Ricardo", "Richard", "Richie", "Richmond", "Rick", "Rickey", "Rickie", "Ricky", "Rico", "Rigoberto", "Riley", "Rita", "River", "Robb", "Robbie", "Robert", "Roberta", "Roberto", "Robin", "Robyn", "Rocio", "Rocky", "Rod", "Roderick", "Rodger", "Rodolfo", "Rodrick", "Rodrigo", "Roel", "Rogelio", "Roger", "Rogers", "Rolando", "Rollin", "Roma", "Romaine", "Roman", "Ron", "Ronaldo", "Ronny", "Roosevelt", "Rory", "Rosa", "Rosalee", "Rosalia", "Rosalind", "Rosalinda", "Rosalyn", "Rosamond", "Rosanna", "Rosario", "Roscoe", "Rose", "Rosella", "Roselyn", "Rosemarie", "Rosemary", "Rosendo", "Rosetta", "Rosie", "Rosina", "Roslyn", "Ross", "Rossie", "Rowan", "Rowena", "Rowland", "Roxane", "Roxanne", "Roy", "Royal", "Royce", "Rozella", "Ruben", "Rubie", "Ruby", "Rubye", "Rudolph", "Rudy", "Rupert", "Russ", "Russel", "Russell", "Rusty", "Ruth", "Ruthe", "Ruthie", "Ryan", "Ryann", "Ryder", "Rylan", "Rylee", "Ryleigh", "Ryley", "Sabina", "Sabrina", "Sabryna", "Sadie", "Sadye", "Sage", "Saige", "Sallie", "Sally", "Salma", "Salvador", "Salvatore", "Sam", "Samanta", "Samantha", "Samara", "Samir", "Sammie", "Sammy", "Samson", "Sandra", "Sandrine", "Sandy", "Sanford", "Santa", "Santiago", "Santina", "Santino", "Santos", "Sarah", "Sarai", "Sarina", "Sasha", "Saul", "Savanah", "Savanna", "Savannah", "Savion", "Scarlett", "Schuyler", "Scot", "Scottie", "Scotty", "Seamus", "Sean", "Sebastian", "Sedrick", "Selena", "Selina", "Selmer", "Serena", "Serenity", "Seth", "Shad", "Shaina", "Shakira", "Shana", "Shane", "Shanel", "Shanelle", "Shania", "Shanie", "Shaniya", "Shanna", "Shannon", "Shanny", "Shanon", "Shany", "Sharon", "Shaun", "Shawn", "Shawna", "Shaylee", "Shayna", "Shayne", "Shea", "Sheila", "Sheldon", "Shemar", "Sheridan", "Sherman", "Sherwood", "Shirley", "Shyann", "Shyanne", "Sibyl", "Sid", "Sidney", "Sienna", "Sierra", "Sigmund", "Sigrid", "Sigurd", "Silas", "Sim", "Simeon", "Simone", "Sincere", "Sister", "Skye", "Skyla", "Skylar", "Sofia", "Soledad", "Solon", "Sonia", "Sonny", "Sonya", "Sophia", "Sophie", "Spencer", "Stacey", "Stacy", "Stan", "Stanford", "Stanley", "Stanton", "Stefan", "Stefanie", "Stella", "Stephan", "Stephania", "Stephanie", "Stephany", "Stephen", "Stephon", "Sterling", "Steve", "Stevie", "Stewart", "Stone", "Stuart", "Summer", "Sunny", "Susan", "Susana", "Susanna", "Susie", "Suzanne", "Sven", "Syble", "Sydnee", "Sydney", "Sydni", "Sydnie", "Sylvan", "Sylvester", "Sylvia", "Tabitha", "Tad", "Talia", "Talon", "Tamara", "Tamia", "Tania", "Tanner", "Tanya", "Tara", "Taryn", "Tate", "Tatum", "Tatyana", "Taurean", "Tavares", "Taya", "Taylor", "Teagan", "Ted", "Telly", "Terence", "Teresa", "Terrance", "Terrell", "Terrence", "Terrill", "Terry", "Tess", "Tessie", "Tevin", "Thad", "Thaddeus", "Thalia", "Thea", "Thelma", "Theo", "Theodora", "Theodore", "Theresa", "Therese", "Theresia", "Theron", "Thomas", "Thora", "Thurman", "Tia", "Tiana", "Tianna", "Tiara", "Tierra", "Tiffany", "Tillman", "Timmothy", "Timmy", "Timothy", "Tina", "Tito", "Titus", "Tobin", "Toby", "Tod", "Tom", "Tomas", "Tomasa", "Tommie", "Toney", "Toni", "Tony", "Torey", "Torrance", "Torrey", "Toy", "Trace", "Tracey", "Tracy", "Travis", "Travon", "Tre", "Tremaine", "Tremayne", "Trent", "Trenton", "Tressa", "Tressie", "Treva", "Trever", "Trevion", "Trevor", "Trey", "Trinity", "Trisha", "Tristian", "Tristin", "Triston", "Troy", "Trudie", "Trycia", "Trystan", "Turner", "Twila", "Tyler", "Tyra", "Tyree", "Tyreek", "Tyrel", "Tyrell", "Tyrese", "Tyrique", "Tyshawn", "Tyson", "Ubaldo", "Ulices", "Ulises", "Una", "Unique", "Urban", "Uriah", "Uriel", "Ursula", "Vada", "Valentin", "Valentina", "Valentine", "Valerie", "Vallie", "Van", "Vance", "Vanessa", "Vaughn", "Veda", "Velda", "Vella", "Velma", "Velva", "Vena", "Verda", "Verdie", "Vergie", "Verla", "Verlie", "Vern", "Verna", "Verner", "Vernice", "Vernie", "Vernon", "Verona", "Veronica", "Vesta", "Vicenta", "Vicente", "Vickie", "Vicky", "Victor", "Victoria", "Vida", "Vidal", "Vilma", "Vince", "Vincent", "Vincenza", "Vincenzo", "Vinnie", "Viola", "Violet", "Violette", "Virgie", "Virgil", "Virginia", "Virginie", "Vita", "Vito", "Viva", "Vivian", "Viviane", "Vivianne", "Vivien", "Vivienne", "Vladimir", "Wade", "Waino", "Waldo", "Walker", "Wallace", "Walter", "Walton", "Wanda", "Ward", "Warren", "Watson", "Wava", "Waylon", "Wayne", "Webster", "Weldon", "Wellington", "Wendell", "Wendy", "Werner", "Westley", "Weston", "Whitney", "Wilber", "Wilbert", "Wilburn", "Wiley", "Wilford", "Wilfred", "Wilfredo", "Wilfrid", "Wilhelm", "Wilhelmine", "Will", "Willa", "Willard", "William", "Willie", "Willis", "Willow", "Willy", "Wilma", "Wilmer", "Wilson", "Wilton", "Winfield", "Winifred", "Winnifred", "Winona", "Winston", "Woodrow", "Wyatt", "Wyman", "Xander", "Xavier", "Xzavier", "Yadira", "Yasmeen", "Yasmin", "Yasmine", "Yazmin", "Yesenia", "Yessenia", "Yolanda", "Yoshiko", "Yvette", "Yvonne", "Zachariah", "Zachary", "Zachery", "Zack", "Zackary", "Zackery", "Zakary", "Zander", "Zane", "Zaria", "Zechariah", "Zelda", "Zella", "Zelma", "Zena", "Zetta", "Zion", "Zita", "Zoe", "Zoey", "Zoie", "Zoila", "Zola", "Zora", "Zula"]; e.exports = { generateUsername: function () { return i.randomElement(r) + "-" + i.randomAlphanumStr(3); } }; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return g; })); var i = n(4), r = n(2), s = n(8), o = n(1), a = n.n(o), c = n(6), d = n(11), u = n.n(d), l = n(38), h = n.n(l), p = n(39), m = n(57); var f = Object(i.getLogger)(e);
                var g = /** @class */ (function (_super) {
                    __extends(g, _super);
                    function g(e, t, n) {
                        var _this = this;
                        _this = _super.call(this) || this, _this.xmpp = e, _this.eventEmitter = t, _this.sessions = {}, _this.jvbIceConfig = n.jvb, _this.p2pIceConfig = n.p2p, _this.mediaConstraints = { offerToReceiveAudio: !0, offerToReceiveVideo: !0 };
                        return _this;
                    }
                    g.prototype.init = function (e) { _super.prototype.init.call(this, e), this.connection.addHandler(this.onJingle.bind(this), "urn:xmpp:jingle:1", "iq", "set", null, null); };
                    g.prototype.onJingle = function (e) { var t = $(e).find("jingle").attr("sid"), n = $(e).find("jingle").attr("action"), i = e.getAttribute("from"), o = Object(r.$iq)({ type: "result", to: i, id: e.getAttribute("id") }); f.log("on jingle " + n + " from " + i, e); var d = this.sessions[t]; if ("session-initiate" !== n) {
                        if (!d)
                            return o.attrs({ type: "error" }), o.c("error", { type: "cancel" }).c("item-not-found", { xmlns: "urn:ietf:params:xml:ns:xmpp-stanzas" }).up().c("unknown-session", { xmlns: "urn:xmpp:jingle:errors:1" }), f.warn("invalid session id", e), this.connection.send(o), !0;
                        if (i !== d.remoteJid)
                            return f.warn("jid mismatch for session id", t, d.remoteJid, e), o.attrs({ type: "error" }), o.c("error", { type: "cancel" }).c("item-not-found", { xmlns: "urn:ietf:params:xml:ns:xmpp-stanzas" }).up().c("unknown-session", { xmlns: "urn:xmpp:jingle:errors:1" }), this.connection.send(o), !0;
                    }
                    else if (void 0 !== d)
                        return o.attrs({ type: "error" }), o.c("error", { type: "cancel" }).c("service-unavailable", { xmlns: "urn:ietf:params:xml:ns:xmpp-stanzas" }).up(), f.warn("duplicate session id", t, e), this.connection.send(o), !0; var l = window.performance.now(), h = "focus" !== r.Strophe.getResourceFromJid(i); switch (n) {
                        case "session-initiate": {
                            f.log("(TIME) received session-initiate:\t", l);
                            var t_109 = $(e).find("jingle>startmuted");
                            if (t_109 && t_109.length > 0) {
                                var e_134 = t_109.attr("audio"), n_75 = t_109.attr("video");
                                this.eventEmitter.emit(a.a.START_MUTED_FROM_FOCUS, "true" === e_134, "true" === n_75);
                            }
                            f.info("Marking session from " + i + " as " + (h ? "" : "*not*") + " P2P");
                            var n_76 = h ? this.p2pIceConfig : this.jvbIceConfig;
                            d = new m.a($(e).find("jingle").attr("sid"), $(e).attr("to"), i, this.connection, this.mediaConstraints, JSON.parse(JSON.stringify(n_76)), h, !1), this.sessions[d.sid] = d, this.eventEmitter.emit(a.a.CALL_INCOMING, d, $(e).find(">jingle"), l);
                            break;
                        }
                        case "session-accept":
                            this.eventEmitter.emit(a.a.CALL_ACCEPTED, d, $(e).find(">jingle"));
                            break;
                        case "content-modify":
                            d.modifyContents($(e).find(">jingle"));
                            break;
                        case "transport-info":
                            this.eventEmitter.emit(a.a.TRANSPORT_INFO, d, $(e).find(">jingle"));
                            break;
                        case "session-terminate": {
                            f.log("terminating...", d.sid);
                            var t_110 = null, n_77 = null;
                            $(e).find(">jingle>reason").length && (t_110 = $(e).find(">jingle>reason>:first")[0].tagName, n_77 = $(e).find(">jingle>reason>text").text()), this.terminate(d.sid, t_110, n_77), this.eventEmitter.emit(a.a.CALL_ENDED, d, t_110, n_77);
                            break;
                        }
                        case "transport-replace":
                            f.info("(TIME) Start transport replace:\t", l), c.a.sendAnalytics(Object(s.G)(s.f, { p2p: h, value: l })), d.replaceTransport($(e).find(">jingle"), function () { var e = window.performance.now(); f.info("(TIME) Transport replace success:\t", e), c.a.sendAnalytics(Object(s.G)(s.g, { p2p: h, value: e })); }, function (e) { u.a.callErrorHandler(e), f.error("Transport replace failed", e), d.sendTransportReject(); });
                            break;
                        case "addsource":
                        case "source-add":
                            d.addRemoteStream($(e).find(">jingle>content"));
                            break;
                        case "removesource":
                        case "source-remove":
                            d.removeRemoteStream($(e).find(">jingle>content"));
                            break;
                        default: f.warn("jingle action not implemented", n), o.attrs({ type: "error" }), o.c("error", { type: "cancel" }).c("bad-request", { xmlns: "urn:ietf:params:xml:ns:xmpp-stanzas" }).up();
                    } return this.connection.send(o), !0; };
                    g.prototype.newP2PJingleSession = function (e, t) { var n = new m.a(h.a.randomHexString(12), e, t, this.connection, this.mediaConstraints, this.p2pIceConfig, !0, !0); return this.sessions[n.sid] = n, n; };
                    g.prototype.terminate = function (e, t, n) { this.sessions.hasOwnProperty(e) && ("ended" !== this.sessions[e].state && this.sessions[e].onTerminated(t, n), delete this.sessions[e]); };
                    g.prototype.getStunAndTurnCredentials = function () {
                        var _this = this;
                        this.connection.sendIQ(Object(r.$iq)({ type: "get", to: this.xmpp.options.hosts.domain }).c("services", { xmlns: "urn:xmpp:extdisco:2" }), function (e) { return _this.onReceiveStunAndTurnCredentials(e); }, function (e) { f.warn("getting turn credentials with extdisco:2 failed, trying extdisco:1", e), _this.connection.sendIQ(Object(r.$iq)({ type: "get", to: _this.xmpp.options.hosts.domain }).c("services", { xmlns: "urn:xmpp:extdisco:1" }), function (e) { return _this.onReceiveStunAndTurnCredentials(e); }, function (e) { f.warn("getting turn credentials failed", e), f.warn("is mod_turncredentials or similar installed and configured?"); }); });
                    };
                    g.prototype.onReceiveStunAndTurnCredentials = function (e) { var t = []; $(e).find(">services>service").each(function (e, n) { var i = {}, r = (n = $(n)).attr("type"); switch (r) {
                        case "stun":
                            i.urls = "stun:" + n.attr("host"), n.attr("port") && (i.urls += ":" + n.attr("port")), t.push(i);
                            break;
                        case "turn":
                        case "turns": {
                            i.urls = r + ":", i.username = n.attr("username"), i.urls += n.attr("host");
                            n.attr("port") && (i.urls += ":" + n.attr("port"));
                            var e_135 = n.attr("transport");
                            e_135 && "udp" !== e_135 && (i.urls += "?transport=" + e_135), i.credential = n.attr("password") || i.credential, t.push(i);
                            break;
                        }
                    } }); var n = this.xmpp.options; for (var e_136 = t.length - 1; e_136 > 0; e_136--) {
                        var n_78 = Math.floor(Math.random() * (e_136 + 1)), i_54 = t[e_136];
                        t[e_136] = t[n_78], t[n_78] = i_54;
                    } var i; i = n.useTurnUdp ? function (e) { return e.urls.startsWith("turn"); } : function (e) { return e.urls.startsWith("turn") && e.urls.indexOf("transport=tcp") >= 0; }, this.jvbIceConfig.iceServers = t.filter(i), this.p2pIceConfig.iceServers = t; };
                    g.prototype.getLog = function () {
                        var _this = this;
                        var e = {};
                        return Object.keys(this.sessions).forEach(function (t) { var n = _this.sessions[t].peerconnection; n && n.updateLog && (e["jingle_" + t] = { updateLog: n.updateLog, stats: n.stats, url: window.location.href }); }), e;
                    };
                    return g;
                }(p.b));  }).call(this, "modules/xmpp/strophe.jingle.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(107), r = n.n(i), s = n(4); var o = Object(s.getLogger)(e);
                var a = /** @class */ (function () {
                    function a() {
                        this._queue = r.a.queue(this._processQueueTasks.bind(this), 1), this._stopped = !1;
                    }
                    a.prototype.clear = function () { this._queue.kill(); };
                    a.prototype._processQueueTasks = function (e, t) { try {
                        e(t);
                    }
                    catch (e) {
                        o.error("Task failed: " + e), t(e);
                    } };
                    a.prototype.push = function (e, t) { this._stopped ? t && t(new Error("The queue has been stopped")) : this._queue.push(e, t); };
                    a.prototype.shutdown = function () { this._stopped = !0; };
                    return a;
                }());  }).call(this, "modules/util/AsyncQueue.js");
        }, function (e, t, n) {
            (function (n, i) {
                var r;
                /*!
                 * async
                 * https://github.com/caolan/async
                 *
                 * Copyright 2010-2014 Caolan McMahon
                 * Released under the MIT license
                 */ !function () { var s, o, a = {}; function c(e) { var t = !1; return function () { if (t)
                    throw new Error("Callback was already called."); t = !0, e.apply(s, arguments); }; } null != (s = this) && (o = s.async), a.noConflict = function () { return s.async = o, a; }; var d = Object.prototype.toString, u = Array.isArray || function (e) { return "[object Array]" === d.call(e); }, l = function (e, t) { if (e.forEach)
                    return e.forEach(t); for (var n = 0; n < e.length; n += 1)
                    t(e[n], n, e); }, h = function (e, t) { if (e.map)
                    return e.map(t); var n = []; return l(e, (function (e, i, r) { n.push(t(e, i, r)); })), n; }, p = function (e) { if (Object.keys)
                    return Object.keys(e); var t = []; for (var n in e)
                    e.hasOwnProperty(n) && t.push(n); return t; }; void 0 !== n && n.nextTick ? (a.nextTick = n.nextTick, a.setImmediate = void 0 !== i ? function (e) { i(e); } : a.nextTick) : "function" == typeof i ? (a.nextTick = function (e) { i(e); }, a.setImmediate = a.nextTick) : (a.nextTick = function (e) { setTimeout(e, 0); }, a.setImmediate = a.nextTick), a.each = function (e, t, n) { if (n = n || function () { }, !e.length)
                    return n(); var i = 0; function r(t) { t ? (n(t), n = function () { }) : (i += 1) >= e.length && n(); } l(e, (function (e) { t(e, c(r)); })); }, a.forEach = a.each, a.eachSeries = function (e, t, n) { if (n = n || function () { }, !e.length)
                    return n(); var i = 0, r = function () { t(e[i], (function (t) { t ? (n(t), n = function () { }) : (i += 1) >= e.length ? n() : r(); })); }; r(); }, a.forEachSeries = a.eachSeries, a.eachLimit = function (e, t, n, i) { m(t).apply(null, [e, n, i]); }, a.forEachLimit = a.eachLimit; var m = function (e) { return function (t, n, i) { if (i = i || function () { }, !t.length || e <= 0)
                    return i(); var r = 0, s = 0, o = 0; !function a() { if (r >= t.length)
                    return i(); for (; o < e && s < t.length;)
                    o += 1, n(t[(s += 1) - 1], (function (e) { e ? (i(e), i = function () { }) : (o -= 1, (r += 1) >= t.length ? i() : a()); })); }(); }; }, f = function (e) { return function () { var t = Array.prototype.slice.call(arguments); return e.apply(null, [a.each].concat(t)); }; }, g = function (e) { return function () { var t = Array.prototype.slice.call(arguments); return e.apply(null, [a.eachSeries].concat(t)); }; }, _ = function (e, t, n, i) { if (t = h(t, (function (e, t) { return { index: t, value: e }; })), i) {
                    var r = [];
                    e(t, (function (e, t) { n(e.value, (function (n, i) { r[e.index] = i, t(n); })); }), (function (e) { i(e, r); }));
                }
                else
                    e(t, (function (e, t) { n(e.value, (function (e) { t(e); })); })); }; a.map = f(_), a.mapSeries = g(_), a.mapLimit = function (e, t, n, i) { return v(t)(e, n, i); }; var v = function (e) { return function (e, t) { return function () { var n = Array.prototype.slice.call(arguments); return t.apply(null, [m(e)].concat(n)); }; }(e, _); }; a.reduce = function (e, t, n, i) { a.eachSeries(e, (function (e, i) { n(t, e, (function (e, n) { t = n, i(e); })); }), (function (e) { i(e, t); })); }, a.inject = a.reduce, a.foldl = a.reduce, a.reduceRight = function (e, t, n, i) { var r = h(e, (function (e) { return e; })).reverse(); a.reduce(r, t, n, i); }, a.foldr = a.reduceRight; var S = function (e, t, n, i) { var r = []; e(t = h(t, (function (e, t) { return { index: t, value: e }; })), (function (e, t) { n(e.value, (function (n) { n && r.push(e), t(); })); }), (function (e) { i(h(r.sort((function (e, t) { return e.index - t.index; })), (function (e) { return e.value; }))); })); }; a.filter = f(S), a.filterSeries = g(S), a.select = a.filter, a.selectSeries = a.filterSeries; var y = function (e, t, n, i) { var r = []; e(t = h(t, (function (e, t) { return { index: t, value: e }; })), (function (e, t) { n(e.value, (function (n) { n || r.push(e), t(); })); }), (function (e) { i(h(r.sort((function (e, t) { return e.index - t.index; })), (function (e) { return e.value; }))); })); }; a.reject = f(y), a.rejectSeries = g(y); var E = function (e, t, n, i) { e(t, (function (e, t) { n(e, (function (n) { n ? (i(e), i = function () { }) : t(); })); }), (function (e) { i(); })); }; a.detect = f(E), a.detectSeries = g(E), a.some = function (e, t, n) { a.each(e, (function (e, i) { t(e, (function (e) { e && (n(!0), n = function () { }), i(); })); }), (function (e) { n(!1); })); }, a.any = a.some, a.every = function (e, t, n) { a.each(e, (function (e, i) { t(e, (function (e) { e || (n(!1), n = function () { }), i(); })); }), (function (e) { n(!0); })); }, a.all = a.every, a.sortBy = function (e, t, n) { a.map(e, (function (e, n) { t(e, (function (t, i) { t ? n(t) : n(null, { value: e, criteria: i }); })); }), (function (e, t) { if (e)
                    return n(e); n(null, h(t.sort((function (e, t) { var n = e.criteria, i = t.criteria; return n < i ? -1 : n > i ? 1 : 0; })), (function (e) { return e.value; }))); })); }, a.auto = function (e, t) { t = t || function () { }; var n = p(e), i = n.length; if (!i)
                    return t(); var r = {}, s = [], o = function (e) { s.unshift(e); }, c = function () { i--, l(s.slice(0), (function (e) { e(); })); }; o((function () { if (!i) {
                    var e = t;
                    t = function () { }, e(null, r);
                } })), l(n, (function (n) { var i = u(e[n]) ? e[n] : [e[n]], d = function (e) { var i = Array.prototype.slice.call(arguments, 1); if (i.length <= 1 && (i = i[0]), e) {
                    var s = {};
                    l(p(r), (function (e) { s[e] = r[e]; })), s[n] = i, t(e, s), t = function () { };
                }
                else
                    r[n] = i, a.setImmediate(c); }, h = i.slice(0, Math.abs(i.length - 1)) || [], m = function () { return t = function (e, t) { return e && r.hasOwnProperty(t); }, i = !0, ((e = h).reduce ? e.reduce(t, i) : (l(e, (function (e, n, r) { i = t(i, e, n, r); })), i)) && !r.hasOwnProperty(n); var e, t, i; }; if (m())
                    i[i.length - 1](d, r);
                else {
                    var f = function () { m() && (!function (e) { for (var t = 0; t < s.length; t += 1)
                        if (s[t] === e)
                            return void s.splice(t, 1); }(f), i[i.length - 1](d, r)); };
                    o(f);
                } })); }, a.retry = function (e, t, n) { var i = []; "function" == typeof e && (n = t, t = e, e = 5), e = parseInt(e, 10) || 5; var r = function (r, s) { for (var o = function (e, t) { return function (n) { e((function (e, i) { n(!e || t, { err: e, result: i }); }), s); }; }; e;)
                    i.push(o(t, !(e -= 1))); a.series(i, (function (e, t) { t = t[t.length - 1], (r || n)(t.err, t.result); })); }; return n ? r() : r; }, a.waterfall = function (e, t) { if (t = t || function () { }, !u(e)) {
                    var n = new Error("First argument to waterfall must be an array of functions");
                    return t(n);
                } if (!e.length)
                    return t(); var i = function (e) { return function (n) { if (n)
                    t.apply(null, arguments), t = function () { };
                else {
                    var r = Array.prototype.slice.call(arguments, 1), s = e.next();
                    s ? r.push(i(s)) : r.push(t), a.setImmediate((function () { e.apply(null, r); }));
                } }; }; i(a.iterator(e))(); }; var b = function (e, t, n) { if (n = n || function () { }, u(t))
                    e.map(t, (function (e, t) { e && e((function (e) { var n = Array.prototype.slice.call(arguments, 1); n.length <= 1 && (n = n[0]), t.call(null, e, n); })); }), n);
                else {
                    var i = {};
                    e.each(p(t), (function (e, n) { t[e]((function (t) { var r = Array.prototype.slice.call(arguments, 1); r.length <= 1 && (r = r[0]), i[e] = r, n(t); })); }), (function (e) { n(e, i); }));
                } }; a.parallel = function (e, t) { b({ map: a.map, each: a.each }, e, t); }, a.parallelLimit = function (e, t, n) { b({ map: v(t), each: m(t) }, e, n); }, a.series = function (e, t) { if (t = t || function () { }, u(e))
                    a.mapSeries(e, (function (e, t) { e && e((function (e) { var n = Array.prototype.slice.call(arguments, 1); n.length <= 1 && (n = n[0]), t.call(null, e, n); })); }), t);
                else {
                    var n = {};
                    a.eachSeries(p(e), (function (t, i) { e[t]((function (e) { var r = Array.prototype.slice.call(arguments, 1); r.length <= 1 && (r = r[0]), n[t] = r, i(e); })); }), (function (e) { t(e, n); }));
                } }, a.iterator = function (e) { var t = function (n) { var i = function () { return e.length && e[n].apply(null, arguments), i.next(); }; return i.next = function () { return n < e.length - 1 ? t(n + 1) : null; }, i; }; return t(0); }, a.apply = function (e) { var t = Array.prototype.slice.call(arguments, 1); return function () { return e.apply(null, t.concat(Array.prototype.slice.call(arguments))); }; }; var T = function (e, t, n, i) { var r = []; e(t, (function (e, t) { n(e, (function (e, n) { r = r.concat(n || []), t(e); })); }), (function (e) { i(e, r); })); }; a.concat = f(T), a.concatSeries = g(T), a.whilst = function (e, t, n) { e() ? t((function (i) { if (i)
                    return n(i); a.whilst(e, t, n); })) : n(); }, a.doWhilst = function (e, t, n) { e((function (i) { if (i)
                    return n(i); var r = Array.prototype.slice.call(arguments, 1); t.apply(null, r) ? a.doWhilst(e, t, n) : n(); })); }, a.until = function (e, t, n) { e() ? n() : t((function (i) { if (i)
                    return n(i); a.until(e, t, n); })); }, a.doUntil = function (e, t, n) { e((function (i) { if (i)
                    return n(i); var r = Array.prototype.slice.call(arguments, 1); t.apply(null, r) ? n() : a.doUntil(e, t, n); })); }, a.queue = function (e, t) { function n(e, t, n, i) { if (e.started || (e.started = !0), u(t) || (t = [t]), 0 == t.length)
                    return a.setImmediate((function () { e.drain && e.drain(); })); l(t, (function (t) { var r = { data: t, callback: "function" == typeof i ? i : null }; n ? e.tasks.unshift(r) : e.tasks.push(r), e.saturated && e.tasks.length === e.concurrency && e.saturated(), a.setImmediate(e.process); })); } void 0 === t && (t = 1); var i = 0, r = { tasks: [], concurrency: t, saturated: null, empty: null, drain: null, started: !1, paused: !1, push: function (e, t) { n(r, e, !1, t); }, kill: function () { r.drain = null, r.tasks = []; }, unshift: function (e, t) { n(r, e, !0, t); }, process: function () { if (!r.paused && i < r.concurrency && r.tasks.length) {
                        var t = r.tasks.shift();
                        r.empty && 0 === r.tasks.length && r.empty(), i += 1;
                        var n = c((function () { i -= 1, t.callback && t.callback.apply(t, arguments), r.drain && r.tasks.length + i === 0 && r.drain(), r.process(); }));
                        e(t.data, n);
                    } }, length: function () { return r.tasks.length; }, running: function () { return i; }, idle: function () { return r.tasks.length + i === 0; }, pause: function () { !0 !== r.paused && (r.paused = !0, r.process()); }, resume: function () { !1 !== r.paused && (r.paused = !1, r.process()); } }; return r; }, a.priorityQueue = function (e, t) { function n(e, t) { return e.priority - t.priority; } var i = a.queue(e, t); return i.push = function (e, t, r) { !function (e, t, i, r) { if (e.started || (e.started = !0), u(t) || (t = [t]), 0 == t.length)
                    return a.setImmediate((function () { e.drain && e.drain(); })); l(t, (function (t) { var s = { data: t, priority: i, callback: "function" == typeof r ? r : null }; e.tasks.splice(function (e, t, n) { for (var i = -1, r = e.length - 1; i < r;) {
                    var s = i + (r - i + 1 >>> 1);
                    n(t, e[s]) >= 0 ? i = s : r = s - 1;
                } return i; }(e.tasks, s, n) + 1, 0, s), e.saturated && e.tasks.length === e.concurrency && e.saturated(), a.setImmediate(e.process); })); }(i, e, t, r); }, delete i.unshift, i; }, a.cargo = function (e, t) { var n = !1, i = [], r = { tasks: i, payload: t, saturated: null, empty: null, drain: null, drained: !0, push: function (e, n) { u(e) || (e = [e]), l(e, (function (e) { i.push({ data: e, callback: "function" == typeof n ? n : null }), r.drained = !1, r.saturated && i.length === t && r.saturated(); })), a.setImmediate(r.process); }, process: function s() { if (!n) {
                        if (0 === i.length)
                            return r.drain && !r.drained && r.drain(), void (r.drained = !0);
                        var o = "number" == typeof t ? i.splice(0, t) : i.splice(0, i.length), a = h(o, (function (e) { return e.data; }));
                        r.empty && r.empty(), n = !0, e(a, (function () { n = !1; var e = arguments; l(o, (function (t) { t.callback && t.callback.apply(null, e); })), s(); }));
                    } }, length: function () { return i.length; }, running: function () { return n; } }; return r; }; var C = function (e) { return function (t) { var n = Array.prototype.slice.call(arguments, 1); t.apply(null, n.concat([function (t) { var n = Array.prototype.slice.call(arguments, 1); "undefined" != typeof console && (t ? console.error && console.error(t) : console[e] && l(n, (function (t) { console[e](t); }))); }])); }; }; a.log = C("log"), a.dir = C("dir"), a.memoize = function (e, t) { var n = {}, i = {}; t = t || function (e) { return e; }; var r = function () { var r = Array.prototype.slice.call(arguments), s = r.pop(), o = t.apply(null, r); o in n ? a.nextTick((function () { s.apply(null, n[o]); })) : o in i ? i[o].push(s) : (i[o] = [s], e.apply(null, r.concat([function () { n[o] = arguments; var e = i[o]; delete i[o]; for (var t = 0, r = e.length; t < r; t++)
                        e[t].apply(null, arguments); }]))); }; return r.memo = n, r.unmemoized = e, r; }, a.unmemoize = function (e) { return function () { return (e.unmemoized || e).apply(null, arguments); }; }, a.times = function (e, t, n) { for (var i = [], r = 0; r < e; r++)
                    i.push(r); return a.map(i, t, n); }, a.timesSeries = function (e, t, n) { for (var i = [], r = 0; r < e; r++)
                    i.push(r); return a.mapSeries(i, t, n); }, a.seq = function () { var e = arguments; return function () { var t = this, n = Array.prototype.slice.call(arguments), i = n.pop(); a.reduce(e, n, (function (e, n, i) { n.apply(t, e.concat([function () { var e = arguments[0], t = Array.prototype.slice.call(arguments, 1); i(e, t); }])); }), (function (e, n) { i.apply(t, [e].concat(n)); })); }; }, a.compose = function () { return a.seq.apply(null, Array.prototype.reverse.call(arguments)); }; var R = function (e, t) { var n = function () { var n = this, i = Array.prototype.slice.call(arguments), r = i.pop(); return e(t, (function (e, t) { e.apply(n, i.concat([t])); }), r); }; if (arguments.length > 2) {
                    var i = Array.prototype.slice.call(arguments, 2);
                    return n.apply(this, i);
                } return n; }; a.applyEach = f(R), a.applyEachSeries = g(R), a.forever = function (e, t) { !function n(i) { if (i) {
                    if (t)
                        return t(i);
                    throw i;
                } e(n); }(); }, e.exports ? e.exports = a : void 0 === (r = function () { return a; }.apply(t, [])) || (e.exports = r); }();
            }).call(this, n(60), n(157).setImmediate);
        }, function (e, t) { e.exports = { integerHash: function (e) { if (!e)
                return 0; var t, n, i = 0; for (n = 0; n < e.length; n++)
                t = e.charCodeAt(n), i += t * Math.pow(31, e.length - 1 - n), i = Math.abs(0 | i); return i; } }; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(4), r = n(20), s = n(34); var o = Object(i.getLogger)(e);
                var a = /** @class */ (function (_super) {
                    __extends(a, _super);
                    function a(e, t, n, i, r, s, o) {
                        var _this = this;
                        _this = _super.call(this) || this, _this.sid = e, _this.localJid = t, _this.remoteJid = n, _this.connection = i, _this.mediaConstraints = r, _this.iceConfig = s, _this.isInitiator = o, _this.usedrip = !0, _this.dripContainer = [], _this.room = null, _this.state = null, _this.rtc = null;
                        return _this;
                    }
                    Object.defineProperty(a.prototype, "initiatorJid", {
                        get: function () { return this.isInitiator ? this.localJid : this.remoteJid; },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "responderJid", {
                        get: function () { return this.isInitiator ? this.remoteJid : this.localJid; },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.initialize = function (e, t, n) { if (null !== this.state) {
                        var e_137 = "attempt to initiate on session " + this.sid + "\n                   in state " + this.state;
                        throw o.error(e_137), new Error(e_137);
                    } this.room = e, this.rtc = t, this.state = s.c, this.doInitialize(n); };
                    a.prototype.doInitialize = function (e) { };
                    a.prototype.addIceCandidates = function (e) { };
                    a.prototype.getState = function () { return this.state; };
                    a.prototype.addSources = function (e) { };
                    a.prototype.removeSources = function (e) { };
                    a.prototype.terminate = function (e, t, n) { };
                    a.prototype.acceptOffer = function (e, t, n) { };
                    a.prototype._getInitiatorJid = function () { return this.isInitiator ? this.localJid : this.remoteJid; };
                    return a;
                }(r.a));  }).call(this, "modules/xmpp/JingleSession.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return c; })); var i = n(4), r = n(5), s = n(42), o = n(111); var a = Object(i.getLogger)(e);
                var c = /** @class */ (function (_super) {
                    __extends(c, _super);
                    function c() {
                        var _this = this;
                        _this = _super.call(this) || this, _this.ssrcOwners = new Map, _this.chatRoom = null;
                        return _this;
                    }
                    c.prototype.setChatRoom = function (e) {
                        var _this = this;
                        var t = this.chatRoom;
                        this.chatRoom = e, t && (t.removePresenceListener("audiomuted", this._audioMuteHandler), t.removePresenceListener("videomuted", this._videoMuteHandler), t.removePresenceListener("videoType", this._videoTypeHandler)), e && (this._audioMuteHandler = function (e, t) { _this.eventEmitter.emit(s.a, t, r.a, "true" === e.value); }, e.addPresenceListener("audiomuted", this._audioMuteHandler), this._videoMuteHandler = function (e, t) { _this.eventEmitter.emit(s.a, t, r.c, "true" === e.value); }, e.addPresenceListener("videomuted", this._videoMuteHandler), this._videoTypeHandler = function (e, t) { _this.eventEmitter.emit(s.b, t, e.value); }, e.addPresenceListener("videoType", this._videoTypeHandler));
                    };
                    c.prototype.getPeerMediaInfo = function (e, t) { if (this.chatRoom)
                        return this.chatRoom.getMediaPresenceInfo(e, t); a.error("Requested peer media info, before room was set"); };
                    c.prototype.getSSRCOwner = function (e) { return this.ssrcOwners.get(e); };
                    c.prototype.setSSRCOwner = function (e, t) { if ("number" != typeof e)
                        throw new TypeError("SSRC(" + e + ") must be a number"); this.ssrcOwners.set(e, t); };
                    return c;
                }(o.a));  }).call(this, "modules/xmpp/SignalingLayerImpl.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return r; }));
            var i = n(20);
            var r = /** @class */ (function (_super) {
                __extends(r, _super);
                function r() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                r.prototype.getSSRCOwner = function (e) { throw new Error("not implemented"); };
                r.prototype.getPeerMediaInfo = function (e, t) { throw new Error("not implemented"); };
                return r;
            }(i.a));
        }, function (e, t, n) {
            "use strict";
            var i = n(2), r = n(39);
            var s = /** @class */ (function (_super) {
                __extends(s, _super);
                function s() {
                    var _this = this;
                    _this = _super.call(this) || this, _this.log = [];
                    return _this;
                }
                s.prototype.init = function (e) { _super.prototype.init.call(this, e), this.connection.rawInput = this.logIncoming.bind(this), this.connection.rawOutput = this.logOutgoing.bind(this); };
                s.prototype.logIncoming = function (e) { this.log.push([(new Date).getTime(), "incoming", e]); };
                s.prototype.logOutgoing = function (e) { this.log.push([(new Date).getTime(), "outgoing", e]); };
                return s;
            }(r.b));
            t.a = function () { i.Strophe.addConnectionPlugin("logger", new s); };
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(4), r = n(2), s = n(39); var o = Object(i.getLogger)(e);
                var a = /** @class */ (function (_super) {
                    __extends(a, _super);
                    function a() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    a.prototype.init = function (e) { _super.prototype.init.call(this, e), this.connection.addHandler(this.onRayo.bind(this), "urn:xmpp:rayo:1", "iq", "set", null, null); };
                    a.prototype.onRayo = function (e) { o.info("Rayo IQ", e); };
                    a.prototype.dial = function (e, t, n, i, s) {
                        var _this = this;
                        return new Promise(function (a, c) { if (!s)
                            return void c(new Error("Internal error!")); var d = Object(r.$iq)({ type: "set", to: s }); d.c("dial", { xmlns: "urn:xmpp:rayo:1", to: e, from: t }), d.c("header", { name: "JvbRoomName", value: n }).up(), i && i.length && d.c("header", { name: "JvbRoomPassword", value: i }).up(), _this.connection.sendIQ(d, function (e) { o.info("Dial result ", e); var t = $(e).find("ref").attr("uri"); _this.callResource = t.substr("xmpp:".length), o.info("Received call resource: " + _this.callResource), a(); }, function (e) { o.info("Dial error ", e), c(e); }); });
                    };
                    a.prototype.hangup = function () {
                        var _this = this;
                        return new Promise(function (e, t) { if (!_this.callResource)
                            return t(new Error("No call in progress")), void o.warn("No call in progress"); var n = Object(r.$iq)({ type: "set", to: _this.callResource }); n.c("hangup", { xmlns: "urn:xmpp:rayo:1" }), _this.connection.sendIQ(n, function (t) { o.info("Hangup result ", t), _this.callResource = null, e(); }, function (e) { o.info("Hangup error ", e), _this.callResource = null, t(new Error("Hangup error ")); }); });
                    };
                    return a;
                }(s.b));  }).call(this, "modules/xmpp/strophe.rayo.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(4), r = n(2), s = n(11), o = n.n(s); var a = Object(i.getLogger)(e); var c = -1; var d = /request id \d+.\d+ got 200/, u = /request errored, status: (\d+), number of errors: \d+/; t.a = function () { r.Strophe.log = function (e, t) { switch ((a.trace("Strophe", e, t), "string" == typeof t && -1 !== t.indexOf("Request ") && -1 !== t.indexOf("timed out (secondary), restarting") && (e = r.Strophe.LogLevel.WARN), e)) {
                case r.Strophe.LogLevel.DEBUG:
                    -1 !== c && d.test(t) && (a.debug("Reset lastErrorStatus"), c = -1);
                    break;
                case r.Strophe.LogLevel.WARN:
                    a.warn("Strophe: " + t);
                    var e_138 = u.exec(t);
                    e_138 && 2 === e_138.length && (c = parseInt(e_138[1], 10), a.debug("lastErrorStatus set to: " + c));
                    break;
                case r.Strophe.LogLevel.ERROR:
                case r.Strophe.LogLevel.FATAL: t = "Strophe: " + t, o.a.callErrorHandler(new Error(t)), a.error(t);
            } }, r.Strophe.getLastErrorStatus = function () { return c; }, r.Strophe.getStatusString = function (e) { switch (e) {
                case r.Strophe.Status.BINDREQUIRED: return "BINDREQUIRED";
                case r.Strophe.Status.ERROR: return "ERROR";
                case r.Strophe.Status.CONNECTING: return "CONNECTING";
                case r.Strophe.Status.CONNFAIL: return "CONNFAIL";
                case r.Strophe.Status.AUTHENTICATING: return "AUTHENTICATING";
                case r.Strophe.Status.AUTHFAIL: return "AUTHFAIL";
                case r.Strophe.Status.CONNECTED: return "CONNECTED";
                case r.Strophe.Status.DISCONNECTED: return "DISCONNECTED";
                case r.Strophe.Status.DISCONNECTING: return "DISCONNECTING";
                case r.Strophe.Status.ATTACHED: return "ATTACHED";
                default: return "unknown";
            } }; }; }).call(this, "modules/xmpp/strophe.util.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return u; })); var i = n(4), r = n(0), s = n(23), o = n.n(s), a = n(5), c = n(3); var d = Object(i.getLogger)(e);
                var u = /** @class */ (function () {
                    function u(e, t) {
                        var _this = this;
                        this.conference = e, this.options = t, this.disabledCodec = t.disabledCodec === o.a.VP8 ? void 0 : this._getCodecMimeType(t.disabledCodec);
                        var n = this._getCodecMimeType(t.jvbCodec), i = this._getCodecMimeType(t.p2pCodec);
                        this.jvbPreferredCodec = n && this._isCodecSupported(n) ? n : o.a.VP8, this.p2pPreferredCodec = i && this._isCodecSupported(i) ? i : o.a.VP8, d.debug("Codec preferences for the conference are JVB: " + this.jvbPreferredCodec + ",\n            P2P: " + this.p2pPreferredCodec), c.a.isFirefox() && this.jvbPreferredCodec === o.a.VP9 && (this.jvbPreferredCodec = o.a.VP8), this.conference.on(r.USER_JOINED, function () { return _this._selectPreferredCodec(); }), this.conference.on(r.USER_LEFT, function () { return _this._selectPreferredCodec(); }), this.conference.on(r._MEDIA_SESSION_STARTED, function (e) { return _this._onMediaSessionStared(e); });
                    }
                    u.prototype._getCodecMimeType = function (e) { return "string" == typeof e ? Object.values(o.a).find(function (t) { return t === e.toLowerCase(); }) : null; };
                    u.prototype._isCodecSupported = function (e) { return !(!c.a.isFirefox() && !c.a.isReactNative()) || window.RTCRtpReceiver && window.RTCRtpReceiver.getCapabilities && window.RTCRtpReceiver.getCapabilities("video").codecs.some(function (t) { return t.mimeType.toLowerCase() === "video/" + e; }); };
                    u.prototype._onMediaSessionStared = function (e) { var t = e.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec, n = this.disabledCodec && this._isCodecSupported(this.disabledCodec) ? this.disabledCodec : null; this._selectPreferredCodec(e, t, n); };
                    u.prototype._selectPreferredCodec = function (e, t, n) {
                        if (e === void 0) { e = null; }
                        if (t === void 0) { t = null; }
                        if (n === void 0) { n = null; }
                        var i = e || this.conference.jvbJingleSession, r = t || this.jvbPreferredCodec;
                        var s = r;
                        if (i && !i.isP2P && !this.options.enforcePreferredCodec) {
                            var e_140 = this.conference.getParticipants().map(function (e) { return e.getId(); });
                            for (var _i = 0, e_139 = e_140; _i < e_139.length; _i++) {
                                var t_111 = e_139[_i];
                                var e_141 = i.signalingLayer.getPeerMediaInfo(t_111, a.c);
                                e_141 && e_141.codecType && e_141.codecType !== r && (s = e_141.codecType);
                            }
                        }
                        i && i.setVideoCodecs(s, n);
                    };
                    u.prototype.getPreferredCodec = function () { return this.jvbPreferredCodec; };
                    return u;
                }());  }).call(this, "modules/RTC/CodecSelection.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return p; })); var i = n(4), r = n(7), s = n.n(r), o = n(8), a = n(6), c = n(11), d = n.n(c); function u(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { l(e, t, n[t]); }));
            } return e; } function l(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var h = Object(i.getLogger)(e);
                var p = /** @class */ (function () {
                    function p(e, t, n) {
                        if (!e && !t)
                            throw new TypeError("At least peerconnection or wsUrl must be given");
                        if (e && t)
                            throw new TypeError("Just one of peerconnection or wsUrl must be given");
                        if (e ? h.debug("constructor() with peerconnection") : h.debug("constructor() with wsUrl:\"" + t + "\""), this._channel = null, this._eventEmitter = n, this._mode = null, this._areRetriesEnabled = !1, this._closedFromClient = !1, e) {
                            var t_112 = e.createDataChannel("JVB data channel", { protocol: "http://jitsi.org/protocols/colibri" });
                            this._handleChannel(t_112), this._mode = "datachannel";
                        }
                        else
                            t && (this._areRetriesEnabled = !0, this._wsUrl = t, this._initWebSocket());
                    }
                    p.prototype._initWebSocket = function () { var e = new WebSocket(this._wsUrl); this._handleChannel(e), this._mode = "websocket"; };
                    p.prototype._startConnectionRetries = function () {
                        var _this = this;
                        var e = 1;
                        var t = function () { _this.isOpen() || (_this._initWebSocket(_this._wsUrl), e = Math.min(2 * e, 60), _this._retryTimeout = setTimeout(t, 1e3 * e)); };
                        this._retryTimeout = setTimeout(t, 1e3 * e);
                    };
                    p.prototype._stopConnectionRetries = function () { this._retryTimeout && (clearTimeout(this._retryTimeout), this._retryTimeout = void 0); };
                    p.prototype._retryWebSocketConnection = function (e) {
                        var _this = this;
                        if (!this._areRetriesEnabled)
                            return;
                        var t = e.code, n = e.reason;
                        a.a.sendAnalytics(Object(o.y)(t, n)), this._areRetriesEnabled = !1, this._eventEmitter.once(s.a.DATA_CHANNEL_OPEN, function () { _this._stopConnectionRetries(), _this._areRetriesEnabled = !0; }), this._startConnectionRetries();
                    };
                    Object.defineProperty(p.prototype, "mode", {
                        get: function () { return this._mode; },
                        enumerable: false,
                        configurable: true
                    });
                    p.prototype.close = function () { if (this._closedFromClient = !0, this._stopConnectionRetries(), this._areRetriesEnabled = !1, this._channel) {
                        try {
                            this._channel.close();
                        }
                        catch (e) { }
                        this._channel = null;
                    } };
                    p.prototype.isOpen = function () { return this._channel && ("open" === this._channel.readyState || this._channel.readyState === WebSocket.OPEN); };
                    p.prototype.sendEndpointStatsMessage = function (e) { this._send(u({ colibriClass: "EndpointStats" }, e)); };
                    p.prototype.sendMessage = function (e, t) { this._send({ colibriClass: "EndpointMessage", msgPayload: t, to: e }); };
                    p.prototype.sendSetLastNMessage = function (e) { h.log("Sending lastN=" + e + "."), this._send({ colibriClass: "LastNChangedEvent", lastN: e }); };
                    p.prototype.sendSelectedEndpointsMessage = function (e) { h.log("Sending selected endpoints: " + e + "."), this._send({ colibriClass: "SelectedEndpointsChangedEvent", selectedEndpoints: e }); };
                    p.prototype.sendReceiverVideoConstraintMessage = function (e) { h.log("Sending ReceiverVideoConstraint with maxFrameHeight=" + e + "px"), this._send({ colibriClass: "ReceiverVideoConstraint", maxFrameHeight: e }); };
                    p.prototype.sendNewReceiverVideoConstraintsMessage = function (e) { h.log("Sending ReceiverVideoConstraints with " + JSON.stringify(e)), this._send(u({ colibriClass: "ReceiverVideoConstraints" }, e)); };
                    p.prototype.sendVideoTypeMessage = function (e) { h.debug("Sending VideoTypeMessage with video type as " + e), this._send({ colibriClass: "VideoTypeMessage", videoType: e }); };
                    p.prototype._handleChannel = function (e) {
                        var _this = this;
                        var t = this._eventEmitter;
                        e.onopen = function () { h.info(_this._mode + " channel opened"), t.emit(s.a.DATA_CHANNEL_OPEN); }, e.onerror = function (e) { "websocket" !== _this._mode && h.error("Channel error: " + e.message); }, e.onmessage = function (_a) {
                            var e = _a.data;
                            var n;
                            try {
                                n = JSON.parse(e);
                            }
                            catch (t) {
                                return d.a.callErrorHandler(t), void h.error("Failed to parse channel message as JSON: ", e, t);
                            }
                            var i = n.colibriClass;
                            switch (i) {
                                case "DominantSpeakerEndpointChangeEvent": {
                                    var e_142 = n.dominantSpeakerEndpoint, _b = n.previousSpeakers, i_55 = _b === void 0 ? [] : _b;
                                    h.debug("Dominant speaker: " + e_142 + ", previous speakers: " + i_55), t.emit(s.a.DOMINANT_SPEAKER_CHANGED, e_142, i_55);
                                    break;
                                }
                                case "EndpointConnectivityStatusChangeEvent": {
                                    var e_143 = n.endpoint, i_56 = "true" === n.active;
                                    h.info("Endpoint connection status changed: " + e_143 + " active=" + i_56), t.emit(s.a.ENDPOINT_CONN_STATUS_CHANGED, e_143, i_56);
                                    break;
                                }
                                case "EndpointMessage":
                                    t.emit(s.a.ENDPOINT_MESSAGE_RECEIVED, n.from, n.msgPayload);
                                    break;
                                case "EndpointStats":
                                    t.emit(s.a.ENDPOINT_STATS_RECEIVED, n.from, n);
                                    break;
                                case "LastNEndpointsChangeEvent": {
                                    var e_144 = n.lastNEndpoints;
                                    h.info("New forwarded endpoints: " + e_144), t.emit(s.a.LASTN_ENDPOINT_CHANGED, e_144);
                                    break;
                                }
                                case "SenderVideoConstraints": {
                                    var e_145 = n.videoConstraints;
                                    e_145 && (h.info("SenderVideoConstraints: " + JSON.stringify(e_145)), t.emit(s.a.SENDER_VIDEO_CONSTRAINTS_CHANGED, e_145));
                                    break;
                                }
                                case "ServerHello":
                                    h.info("Received ServerHello, version=" + n.version + ".");
                                    break;
                                default: h.debug("Channel JSON-formatted message: ", n), t.emit("rtc.datachannel." + i, n);
                            }
                        }, e.onclose = function (e) { h.info("Channel closed by " + (_this._closedFromClient ? "client" : "server")), "websocket" === _this._mode && (_this._closedFromClient || (h.error("Channel closed: " + e.code + " " + e.reason), _this._retryWebSocketConnection(e))), _this._channel = null; }, this._channel = e;
                    };
                    p.prototype._send = function (e) { var t = this._channel; if (!this.isOpen())
                        throw h.error("Bridge Channel send: no opened channel."), new Error("No opened channel"); t.send(JSON.stringify(e)); };
                    return p;
                }());  }).call(this, "modules/RTC/BridgeChannel.js");
        }, function (e, t, n) {
            "use strict";
            var i = n(53);
            function r(e, t, n, r, s) { var o = i.writeRtpDescription(e.kind, t); if (o += i.writeIceParameters(e.iceGatherer.getLocalParameters()), o += i.writeDtlsParameters(e.dtlsTransport.getLocalParameters(), "offer" === n ? "actpass" : s || "active"), o += "a=mid:" + e.mid + "\r\n", e.rtpSender && e.rtpReceiver ? o += "a=sendrecv\r\n" : e.rtpSender ? o += "a=sendonly\r\n" : e.rtpReceiver ? o += "a=recvonly\r\n" : o += "a=inactive\r\n", e.rtpSender) {
                var a = e.rtpSender._initialTrackId || e.rtpSender.track.id;
                e.rtpSender._initialTrackId = a;
                var c = "msid:" + (r ? r.id : "-") + " " + a + "\r\n";
                o += "a=" + c, o += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " " + c, e.sendEncodingParameters[0].rtx && (o += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " " + c, o += "a=ssrc-group:FID " + e.sendEncodingParameters[0].ssrc + " " + e.sendEncodingParameters[0].rtx.ssrc + "\r\n");
            } return o += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " cname:" + i.localCName + "\r\n", e.rtpSender && e.sendEncodingParameters[0].rtx && (o += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " cname:" + i.localCName + "\r\n"), o; }
            function s(e, t) { var n = { codecs: [], headerExtensions: [], fecMechanisms: [] }, i = function (e, t) { e = parseInt(e, 10); for (var n = 0; n < t.length; n++)
                if (t[n].payloadType === e || t[n].preferredPayloadType === e)
                    return t[n]; }, r = function (e, t, n, r) { var s = i(e.parameters.apt, n), o = i(t.parameters.apt, r); return s && o && s.name.toLowerCase() === o.name.toLowerCase(); }; return e.codecs.forEach((function (i) { for (var s = 0; s < t.codecs.length; s++) {
                var o = t.codecs[s];
                if (i.name.toLowerCase() === o.name.toLowerCase() && i.clockRate === o.clockRate) {
                    if ("rtx" === i.name.toLowerCase() && i.parameters && o.parameters.apt && !r(i, o, e.codecs, t.codecs))
                        continue;
                    (o = JSON.parse(JSON.stringify(o))).numChannels = Math.min(i.numChannels, o.numChannels), n.codecs.push(o), o.rtcpFeedback = o.rtcpFeedback.filter((function (e) { for (var t = 0; t < i.rtcpFeedback.length; t++)
                        if (i.rtcpFeedback[t].type === e.type && i.rtcpFeedback[t].parameter === e.parameter)
                            return !0; return !1; }));
                    break;
                }
            } })), e.headerExtensions.forEach((function (e) { for (var i = 0; i < t.headerExtensions.length; i++) {
                var r = t.headerExtensions[i];
                if (e.uri === r.uri) {
                    n.headerExtensions.push(r);
                    break;
                }
            } })), n; }
            function o(e, t, n) { return -1 !== { offer: { setLocalDescription: ["stable", "have-local-offer"], setRemoteDescription: ["stable", "have-remote-offer"] }, answer: { setLocalDescription: ["have-remote-offer", "have-local-pranswer"], setRemoteDescription: ["have-local-offer", "have-remote-pranswer"] } }[t][e].indexOf(n); }
            function a(e, t) { var n = e.getRemoteCandidates().find((function (e) { return t.foundation === e.foundation && t.ip === e.ip && t.port === e.port && t.priority === e.priority && t.protocol === e.protocol && t.type === e.type; })); return n || e.addRemoteCandidate(t), !n; }
            function c(e, t) { var n = new Error(t); return n.name = e, n.code = { NotSupportedError: 9, InvalidStateError: 11, InvalidAccessError: 15, TypeError: void 0, OperationError: void 0 }[e], n; }
            e.exports = function (e, t) { function n(t, n) { n.addTrack(t), n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack", { track: t })); } function d(t, n, i, r) { var s = new Event("track"); s.track = n, s.receiver = i, s.transceiver = { receiver: i }, s.streams = r, e.setTimeout((function () { t._dispatchEvent("track", s); })); } var u = function (n) { var r = this, s = document.createDocumentFragment(); if (["addEventListener", "removeEventListener", "dispatchEvent"].forEach((function (e) { r[e] = s[e].bind(s); })), this.canTrickleIceCandidates = null, this.needNegotiation = !1, this.localStreams = [], this.remoteStreams = [], this._localDescription = null, this._remoteDescription = null, this.signalingState = "stable", this.iceConnectionState = "new", this.connectionState = "new", this.iceGatheringState = "new", n = JSON.parse(JSON.stringify(n || {})), this.usingBundle = "max-bundle" === n.bundlePolicy, "negotiate" === n.rtcpMuxPolicy)
                throw c("NotSupportedError", "rtcpMuxPolicy 'negotiate' is not supported"); switch (n.rtcpMuxPolicy || (n.rtcpMuxPolicy = "require"), n.iceTransportPolicy) {
                case "all":
                case "relay": break;
                default: n.iceTransportPolicy = "all";
            } switch (n.bundlePolicy) {
                case "balanced":
                case "max-compat":
                case "max-bundle": break;
                default: n.bundlePolicy = "balanced";
            } if (n.iceServers = function (e, t) { var n = !1; return (e = JSON.parse(JSON.stringify(e))).filter((function (e) { if (e && (e.urls || e.url)) {
                var i = e.urls || e.url;
                e.url && !e.urls && console.warn("RTCIceServer.url is deprecated! Use urls instead.");
                var r = "string" == typeof i;
                return r && (i = [i]), i = i.filter((function (e) { return 0 === e.indexOf("turn:") && -1 !== e.indexOf("transport=udp") && -1 === e.indexOf("turn:[") && !n ? (n = !0, !0) : 0 === e.indexOf("stun:") && t >= 14393 && -1 === e.indexOf("?transport=udp"); })), delete e.url, e.urls = r ? i[0] : i, !!i.length;
            } })); }(n.iceServers || [], t), this._iceGatherers = [], n.iceCandidatePoolSize)
                for (var o = n.iceCandidatePoolSize; o > 0; o--)
                    this._iceGatherers.push(new e.RTCIceGatherer({ iceServers: n.iceServers, gatherPolicy: n.iceTransportPolicy }));
            else
                n.iceCandidatePoolSize = 0; this._config = n, this.transceivers = [], this._sdpSessionId = i.generateSessionId(), this._sdpSessionVersion = 0, this._dtlsRole = void 0, this._isClosed = !1; }; Object.defineProperty(u.prototype, "localDescription", { configurable: !0, get: function () { return this._localDescription; } }), Object.defineProperty(u.prototype, "remoteDescription", { configurable: !0, get: function () { return this._remoteDescription; } }), u.prototype.onicecandidate = null, u.prototype.onaddstream = null, u.prototype.ontrack = null, u.prototype.onremovestream = null, u.prototype.onsignalingstatechange = null, u.prototype.oniceconnectionstatechange = null, u.prototype.onconnectionstatechange = null, u.prototype.onicegatheringstatechange = null, u.prototype.onnegotiationneeded = null, u.prototype.ondatachannel = null, u.prototype._dispatchEvent = function (e, t) { this._isClosed || (this.dispatchEvent(t), "function" == typeof this["on" + e] && this["on" + e](t)); }, u.prototype._emitGatheringStateChange = function () { var e = new Event("icegatheringstatechange"); this._dispatchEvent("icegatheringstatechange", e); }, u.prototype.getConfiguration = function () { return this._config; }, u.prototype.getLocalStreams = function () { return this.localStreams; }, u.prototype.getRemoteStreams = function () { return this.remoteStreams; }, u.prototype._createTransceiver = function (e, t) { var n = this.transceivers.length > 0, i = { track: null, iceGatherer: null, iceTransport: null, dtlsTransport: null, localCapabilities: null, remoteCapabilities: null, rtpSender: null, rtpReceiver: null, kind: e, mid: null, sendEncodingParameters: null, recvEncodingParameters: null, stream: null, associatedRemoteMediaStreams: [], wantReceive: !0 }; if (this.usingBundle && n)
                i.iceTransport = this.transceivers[0].iceTransport, i.dtlsTransport = this.transceivers[0].dtlsTransport;
            else {
                var r = this._createIceAndDtlsTransports();
                i.iceTransport = r.iceTransport, i.dtlsTransport = r.dtlsTransport;
            } return t || this.transceivers.push(i), i; }, u.prototype.addTrack = function (t, n) { if (this._isClosed)
                throw c("InvalidStateError", "Attempted to call addTrack on a closed peerconnection."); var i; if (this.transceivers.find((function (e) { return e.track === t; })))
                throw c("InvalidAccessError", "Track already exists."); for (var r = 0; r < this.transceivers.length; r++)
                this.transceivers[r].track || this.transceivers[r].kind !== t.kind || (i = this.transceivers[r]); return i || (i = this._createTransceiver(t.kind)), this._maybeFireNegotiationNeeded(), -1 === this.localStreams.indexOf(n) && this.localStreams.push(n), i.track = t, i.stream = n, i.rtpSender = new e.RTCRtpSender(t, i.dtlsTransport), i.rtpSender; }, u.prototype.addStream = function (e) { var n = this; if (t >= 15025)
                e.getTracks().forEach((function (t) { n.addTrack(t, e); }));
            else {
                var i = e.clone();
                e.getTracks().forEach((function (e, t) { var n = i.getTracks()[t]; e.addEventListener("enabled", (function (e) { n.enabled = e.enabled; })); })), i.getTracks().forEach((function (e) { n.addTrack(e, i); }));
            } }, u.prototype.removeTrack = function (t) { if (this._isClosed)
                throw c("InvalidStateError", "Attempted to call removeTrack on a closed peerconnection."); if (!(t instanceof e.RTCRtpSender))
                throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender."); var n = this.transceivers.find((function (e) { return e.rtpSender === t; })); if (!n)
                throw c("InvalidAccessError", "Sender was not created by this connection."); var i = n.stream; n.rtpSender.stop(), n.rtpSender = null, n.track = null, n.stream = null, -1 === this.transceivers.map((function (e) { return e.stream; })).indexOf(i) && this.localStreams.indexOf(i) > -1 && this.localStreams.splice(this.localStreams.indexOf(i), 1), this._maybeFireNegotiationNeeded(); }, u.prototype.removeStream = function (e) { var t = this; e.getTracks().forEach((function (e) { var n = t.getSenders().find((function (t) { return t.track === e; })); n && t.removeTrack(n); })); }, u.prototype.getSenders = function () { return this.transceivers.filter((function (e) { return !!e.rtpSender; })).map((function (e) { return e.rtpSender; })); }, u.prototype.getReceivers = function () { return this.transceivers.filter((function (e) { return !!e.rtpReceiver; })).map((function (e) { return e.rtpReceiver; })); }, u.prototype._createIceGatherer = function (t, n) { var i = this; if (n && t > 0)
                return this.transceivers[0].iceGatherer; if (this._iceGatherers.length)
                return this._iceGatherers.shift(); var r = new e.RTCIceGatherer({ iceServers: this._config.iceServers, gatherPolicy: this._config.iceTransportPolicy }); return Object.defineProperty(r, "state", { value: "new", writable: !0 }), this.transceivers[t].bufferedCandidateEvents = [], this.transceivers[t].bufferCandidates = function (e) { var n = !e.candidate || 0 === Object.keys(e.candidate).length; r.state = n ? "completed" : "gathering", null !== i.transceivers[t].bufferedCandidateEvents && i.transceivers[t].bufferedCandidateEvents.push(e); }, r.addEventListener("localcandidate", this.transceivers[t].bufferCandidates), r; }, u.prototype._gather = function (t, n) { var r = this, s = this.transceivers[n].iceGatherer; if (!s.onlocalcandidate) {
                var o = this.transceivers[n].bufferedCandidateEvents;
                this.transceivers[n].bufferedCandidateEvents = null, s.removeEventListener("localcandidate", this.transceivers[n].bufferCandidates), s.onlocalcandidate = function (e) { if (!(r.usingBundle && n > 0)) {
                    var o = new Event("icecandidate");
                    o.candidate = { sdpMid: t, sdpMLineIndex: n };
                    var a = e.candidate, c = !a || 0 === Object.keys(a).length;
                    if (c)
                        "new" !== s.state && "gathering" !== s.state || (s.state = "completed");
                    else {
                        "new" === s.state && (s.state = "gathering"), a.component = 1, a.ufrag = s.getLocalParameters().usernameFragment;
                        var d = i.writeCandidate(a);
                        o.candidate = Object.assign(o.candidate, i.parseCandidate(d)), o.candidate.candidate = d, o.candidate.toJSON = function () { return { candidate: o.candidate.candidate, sdpMid: o.candidate.sdpMid, sdpMLineIndex: o.candidate.sdpMLineIndex, usernameFragment: o.candidate.usernameFragment }; };
                    }
                    var u = i.getMediaSections(r._localDescription.sdp);
                    u[o.candidate.sdpMLineIndex] += c ? "a=end-of-candidates\r\n" : "a=" + o.candidate.candidate + "\r\n", r._localDescription.sdp = i.getDescription(r._localDescription.sdp) + u.join("");
                    var l = r.transceivers.every((function (e) { return e.iceGatherer && "completed" === e.iceGatherer.state; }));
                    "gathering" !== r.iceGatheringState && (r.iceGatheringState = "gathering", r._emitGatheringStateChange()), c || r._dispatchEvent("icecandidate", o), l && (r._dispatchEvent("icecandidate", new Event("icecandidate")), r.iceGatheringState = "complete", r._emitGatheringStateChange());
                } }, e.setTimeout((function () { o.forEach((function (e) { s.onlocalcandidate(e); })); }), 0);
            } }, u.prototype._createIceAndDtlsTransports = function () { var t = this, n = new e.RTCIceTransport(null); n.onicestatechange = function () { t._updateIceConnectionState(), t._updateConnectionState(); }; var i = new e.RTCDtlsTransport(n); return i.ondtlsstatechange = function () { t._updateConnectionState(); }, i.onerror = function () { Object.defineProperty(i, "state", { value: "failed", writable: !0 }), t._updateConnectionState(); }, { iceTransport: n, dtlsTransport: i }; }, u.prototype._disposeIceAndDtlsTransports = function (e) { var t = this.transceivers[e].iceGatherer; t && (delete t.onlocalcandidate, delete this.transceivers[e].iceGatherer); var n = this.transceivers[e].iceTransport; n && (delete n.onicestatechange, delete this.transceivers[e].iceTransport); var i = this.transceivers[e].dtlsTransport; i && (delete i.ondtlsstatechange, delete i.onerror, delete this.transceivers[e].dtlsTransport); }, u.prototype._transceive = function (e, n, r) { var o = s(e.localCapabilities, e.remoteCapabilities); n && e.rtpSender && (o.encodings = e.sendEncodingParameters, o.rtcp = { cname: i.localCName, compound: e.rtcpParameters.compound }, e.recvEncodingParameters.length && (o.rtcp.ssrc = e.recvEncodingParameters[0].ssrc), e.rtpSender.send(o)), r && e.rtpReceiver && o.codecs.length > 0 && ("video" === e.kind && e.recvEncodingParameters && t < 15019 && e.recvEncodingParameters.forEach((function (e) { delete e.rtx; })), e.recvEncodingParameters.length ? o.encodings = e.recvEncodingParameters : o.encodings = [{}], o.rtcp = { compound: e.rtcpParameters.compound }, e.rtcpParameters.cname && (o.rtcp.cname = e.rtcpParameters.cname), e.sendEncodingParameters.length && (o.rtcp.ssrc = e.sendEncodingParameters[0].ssrc), e.rtpReceiver.receive(o)); }, u.prototype.setLocalDescription = function (e) { var t, n, r = this; if (-1 === ["offer", "answer"].indexOf(e.type))
                return Promise.reject(c("TypeError", 'Unsupported type "' + e.type + '"')); if (!o("setLocalDescription", e.type, r.signalingState) || r._isClosed)
                return Promise.reject(c("InvalidStateError", "Can not set local " + e.type + " in state " + r.signalingState)); if ("offer" === e.type)
                t = i.splitSections(e.sdp), n = t.shift(), t.forEach((function (e, t) { var n = i.parseRtpParameters(e); r.transceivers[t].localCapabilities = n; })), r.transceivers.forEach((function (e, t) { r._gather(e.mid, t); }));
            else if ("answer" === e.type) {
                t = i.splitSections(r._remoteDescription.sdp), n = t.shift();
                var a = i.matchPrefix(n, "a=ice-lite").length > 0;
                t.forEach((function (e, t) { var o = r.transceivers[t], c = o.iceGatherer, d = o.iceTransport, u = o.dtlsTransport, l = o.localCapabilities, h = o.remoteCapabilities; if (!(i.isRejected(e) && 0 === i.matchPrefix(e, "a=bundle-only").length) && !o.rejected) {
                    var p = i.getIceParameters(e, n), m = i.getDtlsParameters(e, n);
                    a && (m.role = "server"), r.usingBundle && 0 !== t || (r._gather(o.mid, t), "new" === d.state && d.start(c, p, a ? "controlling" : "controlled"), "new" === u.state && u.start(m));
                    var f = s(l, h);
                    r._transceive(o, f.codecs.length > 0, !1);
                } }));
            } return r._localDescription = { type: e.type, sdp: e.sdp }, "offer" === e.type ? r._updateSignalingState("have-local-offer") : r._updateSignalingState("stable"), Promise.resolve(); }, u.prototype.setRemoteDescription = function (r) { var u = this; if (-1 === ["offer", "answer"].indexOf(r.type))
                return Promise.reject(c("TypeError", 'Unsupported type "' + r.type + '"')); if (!o("setRemoteDescription", r.type, u.signalingState) || u._isClosed)
                return Promise.reject(c("InvalidStateError", "Can not set remote " + r.type + " in state " + u.signalingState)); var l = {}; u.remoteStreams.forEach((function (e) { l[e.id] = e; })); var h = [], p = i.splitSections(r.sdp), m = p.shift(), f = i.matchPrefix(m, "a=ice-lite").length > 0, g = i.matchPrefix(m, "a=group:BUNDLE ").length > 0; u.usingBundle = g; var _ = i.matchPrefix(m, "a=ice-options:")[0]; return u.canTrickleIceCandidates = !!_ && _.substr(14).split(" ").indexOf("trickle") >= 0, p.forEach((function (o, c) { var d = i.splitLines(o), p = i.getKind(o), _ = i.isRejected(o) && 0 === i.matchPrefix(o, "a=bundle-only").length, v = d[0].substr(2).split(" ")[2], S = i.getDirection(o, m), y = i.parseMsid(o), E = i.getMid(o) || i.generateIdentifier(); if (_ || "application" === p && ("DTLS/SCTP" === v || "UDP/DTLS/SCTP" === v))
                u.transceivers[c] = { mid: E, kind: p, protocol: v, rejected: !0 };
            else {
                var b, T, C, R, A, w, I, P, O;
                !_ && u.transceivers[c] && u.transceivers[c].rejected && (u.transceivers[c] = u._createTransceiver(p, !0));
                var D, N, M = i.parseRtpParameters(o);
                _ || (D = i.getIceParameters(o, m), (N = i.getDtlsParameters(o, m)).role = "client"), I = i.parseRtpEncodingParameters(o);
                var k = i.parseRtcpParameters(o), L = i.matchPrefix(o, "a=end-of-candidates", m).length > 0, x = i.matchPrefix(o, "a=candidate:").map((function (e) { return i.parseCandidate(e); })).filter((function (e) { return 1 === e.component; }));
                if (("offer" === r.type || "answer" === r.type) && !_ && g && c > 0 && u.transceivers[c] && (u._disposeIceAndDtlsTransports(c), u.transceivers[c].iceGatherer = u.transceivers[0].iceGatherer, u.transceivers[c].iceTransport = u.transceivers[0].iceTransport, u.transceivers[c].dtlsTransport = u.transceivers[0].dtlsTransport, u.transceivers[c].rtpSender && u.transceivers[c].rtpSender.setTransport(u.transceivers[0].dtlsTransport), u.transceivers[c].rtpReceiver && u.transceivers[c].rtpReceiver.setTransport(u.transceivers[0].dtlsTransport)), "offer" !== r.type || _) {
                    if ("answer" === r.type && !_) {
                        T = (b = u.transceivers[c]).iceGatherer, C = b.iceTransport, R = b.dtlsTransport, A = b.rtpReceiver, w = b.sendEncodingParameters, P = b.localCapabilities, u.transceivers[c].recvEncodingParameters = I, u.transceivers[c].remoteCapabilities = M, u.transceivers[c].rtcpParameters = k, x.length && "new" === C.state && (!f && !L || g && 0 !== c ? x.forEach((function (e) { a(b.iceTransport, e); })) : C.setRemoteCandidates(x)), g && 0 !== c || ("new" === C.state && C.start(T, D, "controlling"), "new" === R.state && R.start(N)), !s(b.localCapabilities, b.remoteCapabilities).codecs.filter((function (e) { return "rtx" === e.name.toLowerCase(); })).length && b.sendEncodingParameters[0].rtx && delete b.sendEncodingParameters[0].rtx, u._transceive(b, "sendrecv" === S || "recvonly" === S, "sendrecv" === S || "sendonly" === S), !A || "sendrecv" !== S && "sendonly" !== S ? delete b.rtpReceiver : (O = A.track, y ? (l[y.stream] || (l[y.stream] = new e.MediaStream), n(O, l[y.stream]), h.push([O, A, l[y.stream]])) : (l.default || (l.default = new e.MediaStream), n(O, l.default), h.push([O, A, l.default])));
                    }
                }
                else {
                    (b = u.transceivers[c] || u._createTransceiver(p)).mid = E, b.iceGatherer || (b.iceGatherer = u._createIceGatherer(c, g)), x.length && "new" === b.iceTransport.state && (!L || g && 0 !== c ? x.forEach((function (e) { a(b.iceTransport, e); })) : b.iceTransport.setRemoteCandidates(x)), P = e.RTCRtpReceiver.getCapabilities(p), t < 15019 && (P.codecs = P.codecs.filter((function (e) { return "rtx" !== e.name; }))), w = b.sendEncodingParameters || [{ ssrc: 1001 * (2 * c + 2) }];
                    var F, j = !1;
                    if ("sendrecv" === S || "sendonly" === S) {
                        if (j = !b.rtpReceiver, A = b.rtpReceiver || new e.RTCRtpReceiver(b.dtlsTransport, p), j)
                            O = A.track, y && "-" === y.stream || (y ? (l[y.stream] || (l[y.stream] = new e.MediaStream, Object.defineProperty(l[y.stream], "id", { get: function () { return y.stream; } })), Object.defineProperty(O, "id", { get: function () { return y.track; } }), F = l[y.stream]) : (l.default || (l.default = new e.MediaStream), F = l.default)), F && (n(O, F), b.associatedRemoteMediaStreams.push(F)), h.push([O, A, F]);
                    }
                    else
                        b.rtpReceiver && b.rtpReceiver.track && (b.associatedRemoteMediaStreams.forEach((function (t) { var n = t.getTracks().find((function (e) { return e.id === b.rtpReceiver.track.id; })); n && function (t, n) { n.removeTrack(t), n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack", { track: t })); }(n, t); })), b.associatedRemoteMediaStreams = []);
                    b.localCapabilities = P, b.remoteCapabilities = M, b.rtpReceiver = A, b.rtcpParameters = k, b.sendEncodingParameters = w, b.recvEncodingParameters = I, u._transceive(u.transceivers[c], !1, j);
                }
            } })), void 0 === u._dtlsRole && (u._dtlsRole = "offer" === r.type ? "active" : "passive"), u._remoteDescription = { type: r.type, sdp: r.sdp }, "offer" === r.type ? u._updateSignalingState("have-remote-offer") : u._updateSignalingState("stable"), Object.keys(l).forEach((function (t) { var n = l[t]; if (n.getTracks().length) {
                if (-1 === u.remoteStreams.indexOf(n)) {
                    u.remoteStreams.push(n);
                    var i = new Event("addstream");
                    i.stream = n, e.setTimeout((function () { u._dispatchEvent("addstream", i); }));
                }
                h.forEach((function (e) { var t = e[0], i = e[1]; n.id === e[2].id && d(u, t, i, [n]); }));
            } })), h.forEach((function (e) { e[2] || d(u, e[0], e[1], []); })), e.setTimeout((function () { u && u.transceivers && u.transceivers.forEach((function (e) { e.iceTransport && "new" === e.iceTransport.state && e.iceTransport.getRemoteCandidates().length > 0 && (console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"), e.iceTransport.addRemoteCandidate({})); })); }), 4e3), Promise.resolve(); }, u.prototype.close = function () { this.transceivers.forEach((function (e) { e.iceTransport && e.iceTransport.stop(), e.dtlsTransport && e.dtlsTransport.stop(), e.rtpSender && e.rtpSender.stop(), e.rtpReceiver && e.rtpReceiver.stop(); })), this._isClosed = !0, this._updateSignalingState("closed"); }, u.prototype._updateSignalingState = function (e) { this.signalingState = e; var t = new Event("signalingstatechange"); this._dispatchEvent("signalingstatechange", t); }, u.prototype._maybeFireNegotiationNeeded = function () { var t = this; "stable" === this.signalingState && !0 !== this.needNegotiation && (this.needNegotiation = !0, e.setTimeout((function () { if (t.needNegotiation) {
                t.needNegotiation = !1;
                var e = new Event("negotiationneeded");
                t._dispatchEvent("negotiationneeded", e);
            } }), 0)); }, u.prototype._updateIceConnectionState = function () { var e, t = { new: 0, closed: 0, checking: 0, connected: 0, completed: 0, disconnected: 0, failed: 0 }; if (this.transceivers.forEach((function (e) { e.iceTransport && !e.rejected && t[e.iceTransport.state]++; })), e = "new", t.failed > 0 ? e = "failed" : t.checking > 0 ? e = "checking" : t.disconnected > 0 ? e = "disconnected" : t.new > 0 ? e = "new" : t.connected > 0 ? e = "connected" : t.completed > 0 && (e = "completed"), e !== this.iceConnectionState) {
                this.iceConnectionState = e;
                var n = new Event("iceconnectionstatechange");
                this._dispatchEvent("iceconnectionstatechange", n);
            } }, u.prototype._updateConnectionState = function () { var e, t = { new: 0, closed: 0, connecting: 0, connected: 0, completed: 0, disconnected: 0, failed: 0 }; if (this.transceivers.forEach((function (e) { e.iceTransport && e.dtlsTransport && !e.rejected && (t[e.iceTransport.state]++, t[e.dtlsTransport.state]++); })), t.connected += t.completed, e = "new", t.failed > 0 ? e = "failed" : t.connecting > 0 ? e = "connecting" : t.disconnected > 0 ? e = "disconnected" : t.new > 0 ? e = "new" : t.connected > 0 && (e = "connected"), e !== this.connectionState) {
                this.connectionState = e;
                var n = new Event("connectionstatechange");
                this._dispatchEvent("connectionstatechange", n);
            } }, u.prototype.createOffer = function () { var n = this; if (n._isClosed)
                return Promise.reject(c("InvalidStateError", "Can not call createOffer after close")); var s = n.transceivers.filter((function (e) { return "audio" === e.kind; })).length, o = n.transceivers.filter((function (e) { return "video" === e.kind; })).length, a = arguments[0]; if (a) {
                if (a.mandatory || a.optional)
                    throw new TypeError("Legacy mandatory/optional constraints not supported.");
                void 0 !== a.offerToReceiveAudio && (s = !0 === a.offerToReceiveAudio ? 1 : !1 === a.offerToReceiveAudio ? 0 : a.offerToReceiveAudio), void 0 !== a.offerToReceiveVideo && (o = !0 === a.offerToReceiveVideo ? 1 : !1 === a.offerToReceiveVideo ? 0 : a.offerToReceiveVideo);
            } for (n.transceivers.forEach((function (e) { "audio" === e.kind ? --s < 0 && (e.wantReceive = !1) : "video" === e.kind && --o < 0 && (e.wantReceive = !1); })); s > 0 || o > 0;)
                s > 0 && (n._createTransceiver("audio"), s--), o > 0 && (n._createTransceiver("video"), o--); var d = i.writeSessionBoilerplate(n._sdpSessionId, n._sdpSessionVersion++); n.transceivers.forEach((function (r, s) { var o = r.track, a = r.kind, c = r.mid || i.generateIdentifier(); r.mid = c, r.iceGatherer || (r.iceGatherer = n._createIceGatherer(s, n.usingBundle)); var d = e.RTCRtpSender.getCapabilities(a); t < 15019 && (d.codecs = d.codecs.filter((function (e) { return "rtx" !== e.name; }))), d.codecs.forEach((function (e) { "H264" === e.name && void 0 === e.parameters["level-asymmetry-allowed"] && (e.parameters["level-asymmetry-allowed"] = "1"), r.remoteCapabilities && r.remoteCapabilities.codecs && r.remoteCapabilities.codecs.forEach((function (t) { e.name.toLowerCase() === t.name.toLowerCase() && e.clockRate === t.clockRate && (e.preferredPayloadType = t.payloadType); })); })), d.headerExtensions.forEach((function (e) { (r.remoteCapabilities && r.remoteCapabilities.headerExtensions || []).forEach((function (t) { e.uri === t.uri && (e.id = t.id); })); })); var u = r.sendEncodingParameters || [{ ssrc: 1001 * (2 * s + 1) }]; o && t >= 15019 && "video" === a && !u[0].rtx && (u[0].rtx = { ssrc: u[0].ssrc + 1 }), r.wantReceive && (r.rtpReceiver = new e.RTCRtpReceiver(r.dtlsTransport, a)), r.localCapabilities = d, r.sendEncodingParameters = u; })), "max-compat" !== n._config.bundlePolicy && (d += "a=group:BUNDLE " + n.transceivers.map((function (e) { return e.mid; })).join(" ") + "\r\n"), d += "a=ice-options:trickle\r\n", n.transceivers.forEach((function (e, t) { d += r(e, e.localCapabilities, "offer", e.stream, n._dtlsRole), d += "a=rtcp-rsize\r\n", !e.iceGatherer || "new" === n.iceGatheringState || 0 !== t && n.usingBundle || (e.iceGatherer.getLocalCandidates().forEach((function (e) { e.component = 1, d += "a=" + i.writeCandidate(e) + "\r\n"; })), "completed" === e.iceGatherer.state && (d += "a=end-of-candidates\r\n")); })); var u = new e.RTCSessionDescription({ type: "offer", sdp: d }); return Promise.resolve(u); }, u.prototype.createAnswer = function () { var n = this; if (n._isClosed)
                return Promise.reject(c("InvalidStateError", "Can not call createAnswer after close")); if ("have-remote-offer" !== n.signalingState && "have-local-pranswer" !== n.signalingState)
                return Promise.reject(c("InvalidStateError", "Can not call createAnswer in signalingState " + n.signalingState)); var o = i.writeSessionBoilerplate(n._sdpSessionId, n._sdpSessionVersion++); n.usingBundle && (o += "a=group:BUNDLE " + n.transceivers.map((function (e) { return e.mid; })).join(" ") + "\r\n"), o += "a=ice-options:trickle\r\n"; var a = i.getMediaSections(n._remoteDescription.sdp).length; n.transceivers.forEach((function (e, i) { if (!(i + 1 > a)) {
                if (e.rejected)
                    return "application" === e.kind ? "DTLS/SCTP" === e.protocol ? o += "m=application 0 DTLS/SCTP 5000\r\n" : o += "m=application 0 " + e.protocol + " webrtc-datachannel\r\n" : "audio" === e.kind ? o += "m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n" : "video" === e.kind && (o += "m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"), void (o += "c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:" + e.mid + "\r\n");
                var c;
                if (e.stream)
                    "audio" === e.kind ? c = e.stream.getAudioTracks()[0] : "video" === e.kind && (c = e.stream.getVideoTracks()[0]), c && t >= 15019 && "video" === e.kind && !e.sendEncodingParameters[0].rtx && (e.sendEncodingParameters[0].rtx = { ssrc: e.sendEncodingParameters[0].ssrc + 1 });
                var d = s(e.localCapabilities, e.remoteCapabilities);
                !d.codecs.filter((function (e) { return "rtx" === e.name.toLowerCase(); })).length && e.sendEncodingParameters[0].rtx && delete e.sendEncodingParameters[0].rtx, o += r(e, d, "answer", e.stream, n._dtlsRole), e.rtcpParameters && e.rtcpParameters.reducedSize && (o += "a=rtcp-rsize\r\n");
            } })); var d = new e.RTCSessionDescription({ type: "answer", sdp: o }); return Promise.resolve(d); }, u.prototype.addIceCandidate = function (e) { var t, n = this; return e && void 0 === e.sdpMLineIndex && !e.sdpMid ? Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")) : new Promise((function (r, s) { if (!n._remoteDescription)
                return s(c("InvalidStateError", "Can not add ICE candidate without a remote description")); if (e && "" !== e.candidate) {
                var o = e.sdpMLineIndex;
                if (e.sdpMid)
                    for (var d = 0; d < n.transceivers.length; d++)
                        if (n.transceivers[d].mid === e.sdpMid) {
                            o = d;
                            break;
                        }
                var u = n.transceivers[o];
                if (!u)
                    return s(c("OperationError", "Can not add ICE candidate"));
                if (u.rejected)
                    return r();
                var l = Object.keys(e.candidate).length > 0 ? i.parseCandidate(e.candidate) : {};
                if ("tcp" === l.protocol && (0 === l.port || 9 === l.port))
                    return r();
                if (l.component && 1 !== l.component)
                    return r();
                if ((0 === o || o > 0 && u.iceTransport !== n.transceivers[0].iceTransport) && !a(u.iceTransport, l))
                    return s(c("OperationError", "Can not add ICE candidate"));
                var h = e.candidate.trim();
                0 === h.indexOf("a=") && (h = h.substr(2)), (t = i.getMediaSections(n._remoteDescription.sdp))[o] += "a=" + (l.type ? h : "end-of-candidates") + "\r\n", n._remoteDescription.sdp = i.getDescription(n._remoteDescription.sdp) + t.join("");
            }
            else
                for (var p = 0; p < n.transceivers.length && (n.transceivers[p].rejected || (n.transceivers[p].iceTransport.addRemoteCandidate({}), (t = i.getMediaSections(n._remoteDescription.sdp))[p] += "a=end-of-candidates\r\n", n._remoteDescription.sdp = i.getDescription(n._remoteDescription.sdp) + t.join(""), !n.usingBundle)); p++)
                    ; r(); })); }, u.prototype.getStats = function (t) { if (t && t instanceof e.MediaStreamTrack) {
                var n = null;
                if (this.transceivers.forEach((function (e) { e.rtpSender && e.rtpSender.track === t ? n = e.rtpSender : e.rtpReceiver && e.rtpReceiver.track === t && (n = e.rtpReceiver); })), !n)
                    throw c("InvalidAccessError", "Invalid selector.");
                return n.getStats();
            } var i = []; return this.transceivers.forEach((function (e) { ["rtpSender", "rtpReceiver", "iceGatherer", "iceTransport", "dtlsTransport"].forEach((function (t) { e[t] && i.push(e[t].getStats()); })); })), Promise.all(i).then((function (e) { var t = new Map; return e.forEach((function (e) { e.forEach((function (e) { t.set(e.id, e); })); })), t; })); }; ["RTCRtpSender", "RTCRtpReceiver", "RTCIceGatherer", "RTCIceTransport", "RTCDtlsTransport"].forEach((function (t) { var n = e[t]; if (n && n.prototype && n.prototype.getStats) {
                var i = n.prototype.getStats;
                n.prototype.getStats = function () { return i.apply(this).then((function (e) { var t = new Map; return Object.keys(e).forEach((function (n) { var i; e[n].type = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[(i = e[n]).type] || i.type, t.set(n, e[n]); })), t; })); };
            } })); var l = ["createOffer", "createAnswer"]; return l.forEach((function (e) { var t = u.prototype[e]; u.prototype[e] = function () { var e = arguments; return "function" == typeof e[0] || "function" == typeof e[1] ? t.apply(this, [arguments[2]]).then((function (t) { "function" == typeof e[0] && e[0].apply(null, [t]); }), (function (t) { "function" == typeof e[1] && e[1].apply(null, [t]); })) : t.apply(this, arguments); }; })), (l = ["setLocalDescription", "setRemoteDescription", "addIceCandidate"]).forEach((function (e) { var t = u.prototype[e]; u.prototype[e] = function () { var e = arguments; return "function" == typeof e[1] || "function" == typeof e[2] ? t.apply(this, arguments).then((function () { "function" == typeof e[1] && e[1].apply(null); }), (function (t) { "function" == typeof e[2] && e[2].apply(null, [t]); })) : t.apply(this, arguments); }; })), ["getStats"].forEach((function (e) { var t = u.prototype[e]; u.prototype[e] = function () { var e = arguments; return "function" == typeof e[1] ? t.apply(this, arguments).then((function () { "function" == typeof e[1] && e[1].apply(null); })) : t.apply(this, arguments); }; })), u; };
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return A; })); var i = n(148), r = n(4), s = n(25), o = n.n(s), a = n(23), c = n(5), d = n(7), u = n.n(d), l = n(42), h = n(12), p = n(3), m = n(11), f = n(119), g = n(17), _ = n(9), v = n(120), S = n(31), y = n(121), E = n(122), b = n(13), T = n(10), C = n(68); var R = Object(r.getLogger)(e); function A(e, t, r, s, o, a, c) {
                var _this = this;
                this.audioTransferActive = !(!0 === c.startSilent), this._dtmfSender = void 0, this._dtmfTonesQueue = [], this.videoTransferActive = !0, this.rtc = e, this.id = t, this.isP2P = a, this.remoteTracks = new Map, this.localTracks = new Map, this._addedStreams = [], this.localSSRCs = new Map, this.localUfrag = null, this.remoteUfrag = null, this.signalingLayer = r, this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this), this.signalingLayer.on(l.b, this._peerVideoTypeChanged), this._peerMutedChanged = this._peerMutedChanged.bind(this), this.signalingLayer.on(l.a, this._peerMutedChanged), this.options = c;
                var d = o || {};
                d.optional = d.optional || [], Array.isArray(d.optional) ? d.optional.push({ rtcStatsSFUP2P: this.isP2P }) : R.warn("Optional param is not an array, rtcstats p2p data is omitted."), this.peerconnection = new T.a.RTCPeerConnectionType(s, d);
                var u = { low: 2e5, standard: 7e5, high: 25e5 };
                this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo ? this.options.videoQuality.maxBitratesVideo : u, this.tpcUtils = new C.b(this, this.videoBitrates), this.updateLog = [], this.stats = {}, this.statsinterval = null, this.maxstats = c.maxstats, this.interop = new i.a;
                var h = n(161);
                this.simulcast = new h({ numOfLayers: C.a.length, explodeRemoteSimulcast: !1, usesUnifiedPlan: p.a.usesUnifiedPlan() }), this.sdpConsistency = new v.a(this.toString()), this.localSdpMunger = new E.a(this), this.eventEmitter = e.eventEmitter, this.rtxModifier = new f.a, this.senderVideoMaxHeight = null, this.trace = function (e, t) { R.debug(e, t), _this.updateLog.push({ time: new Date, type: e, value: t || "" }); }, this.onicecandidate = null, this.peerconnection.onicecandidate = function (e) { _this.trace("onicecandidate", JSON.stringify(e.candidate, null, " ")), null !== _this.onicecandidate && _this.onicecandidate(e); }, p.a.usesPlanB() ? (this.peerconnection.onaddstream = function (e) { return _this._remoteStreamAdded(e.stream); }, this.peerconnection.onremovestream = function (e) { return _this._remoteStreamRemoved(e.stream); }) : this.peerconnection.ontrack = function (e) { var t = e.streams[0]; _this._remoteTrackAdded(t, e.track, e.transceiver), t.onremovetrack = function (e) { _this._remoteTrackRemoved(t, e.track); }; }, this.onsignalingstatechange = null, this.peerconnection.onsignalingstatechange = function (e) { _this.trace("onsignalingstatechange", _this.signalingState), null !== _this.onsignalingstatechange && _this.onsignalingstatechange(e); }, this.oniceconnectionstatechange = null, this.peerconnection.oniceconnectionstatechange = function (e) { _this.trace("oniceconnectionstatechange", _this.iceConnectionState), null !== _this.oniceconnectionstatechange && _this.oniceconnectionstatechange(e); }, this.onnegotiationneeded = null, this.peerconnection.onnegotiationneeded = function (e) { _this.trace("onnegotiationneeded"), null !== _this.onnegotiationneeded && _this.onnegotiationneeded(e); }, this.ondatachannel = null, this.peerconnection.ondatachannel = function (e) { _this.trace("ondatachannel"), null !== _this.ondatachannel && _this.ondatachannel(e); }, this.maxstats && (this.statsinterval = window.setInterval(function () { _this.getStats(function (e) { if (e.result && "function" == typeof e.result) {
                    var t_113 = e.result();
                    var _loop_9 = function (e_146) {
                        var n_79 = t_113[e_146];
                        n_79.names().forEach(function (e) { _this._processStat(n_79, e, n_79.stat(e)); });
                    };
                    for (var e_146 = 0; e_146 < t_113.length; ++e_146) {
                        _loop_9(e_146);
                    }
                }
                else
                    e.forEach(function (e) { return _this._processStat(e, "", e); }); }, function () { }); }, 1e3)), R.info("Create new " + this);
            } A.prototype._processStat = function (e, t, n) { var i = e.id + "-" + t; var r = this.stats[i]; var s = new Date; r || (this.stats[i] = r = { startTime: s, endTime: s, values: [], times: [] }), r.values.push(n), r.times.push(s.getTime()), r.values.length > this.maxstats && (r.values.shift(), r.times.shift()), r.endTime = s; }; var w = function (e) { return null == e ? "" : "type: " + e.type + "\r\n" + e.sdp; }; A.prototype.getConnectionState = function () { var e = this.peerconnection.iceConnectionState; return "completed" === e ? "connected" : e; }, A.prototype._getDesiredMediaDirection = function (e) { var t = !0; return e === c.a ? t = this.audioTransferActive : e === c.c && (t = this.videoTransferActive), t ? this.hasAnyTracksOfType(e) ? "sendrecv" : "recvonly" : "inactive"; }, A.prototype._getReceiversByEndpointIds = function (e, t) { var n = [], i = []; for (var _i = 0, e_147 = e; _i < e_147.length; _i++) {
                var i_57 = e_147[_i];
                n = n.concat(this.getRemoteTracks(i_57, t));
            } var r = n.map(function (e) { var t; return null === (t = e.track) || void 0 === t ? void 0 : t.id; }); return i = this.peerconnection.getReceivers().filter(function (e) { return e.track && e.track.kind === t && r.find(function (t) { return t === e.track.id; }); }), i; }, A.prototype.isSimulcastOn = function () { return !this.options.disableSimulcast; }, A.prototype._peerVideoTypeChanged = function (e, t) { if (!e)
                return void R.error("No endpointID on peerVideoTypeChanged " + this); var n = this.getRemoteTracks(e, c.c); n.length && n[0]._setVideoType(t); }, A.prototype._peerMutedChanged = function (e, t, n) { if (!e)
                return void R.error("On peerMuteChanged - no endpoint ID"); var i = this.getRemoteTracks(e, t); i.length && i[0].setMute(n); }, A.prototype.getAudioLevels = function (e) {
                if (e === void 0) { e = []; }
                var t = {};
                return (e.length ? this._getReceiversByEndpointIds(e, c.a) : this.peerconnection.getReceivers().filter(function (e) { return e.track && e.track.kind === c.a && e.track.enabled; })).forEach(function (e) { var n = e.getSynchronizationSources(); n && n.length && (t[n[0].source] = n[0].audioLevel); }), t;
            }, A.prototype.getLocalTracks = function (e) { var t = Array.from(this.localTracks.values()); return void 0 !== e && (t = t.filter(function (t) { return t.getType() === e; })), t; }, A.prototype.getLocalVideoTrack = function () { return this.getLocalTracks(c.c)[0]; }, A.prototype.hasAnyTracksOfType = function (e) { if (!e)
                throw new Error('"mediaType" is required'); return this.getLocalTracks(e).length > 0; }, A.prototype.getRemoteTracks = function (e, t) { var n = [], i = e ? [e] : this.remoteTracks.keys(); for (var _i = 0, i_58 = i; _i < i_58.length; _i++) {
                var e_148 = i_58[_i];
                var i_59 = this.remoteTracks.get(e_148);
                if (i_59)
                    for (var _a = 0, _b = i_59.keys(); _a < _b.length; _a++) {
                        var e_149 = _b[_a];
                        if (!t || t === e_149) {
                            var t_114 = i_59.get(e_149);
                            t_114 && n.push(t_114);
                        }
                    }
            } return n; }, A.prototype.getRemoteSourceInfoByParticipant = function (e) { var t = [], n = this.getRemoteTracks(e); if (!(null == n ? void 0 : n.length))
                return t; var i = n.map(function (e) { return e.getSSRC(); }), r = new g.a(this.remoteDescription.sdp); return i.forEach(function (e, n) { for (var _i = 0, _a = r.media; _i < _a.length; _i++) {
                var i_60 = _a[_i];
                var r_24 = "", s_19 = _.a.findLines(i_60, "a=ssrc:" + e);
                if (s_19.length) {
                    t[n] || (t[n] = "");
                    var o_14 = _.a.findLines(i_60, "a=ssrc-group:FID " + e);
                    if (o_14.length) {
                        var e_150 = o_14[0].split(" ")[2];
                        r_24 += o_14[0] + "\r\n", s_19 = s_19.concat(_.a.findLines(i_60, "a=ssrc:" + e_150));
                    }
                    t[n] += s_19.join("\r\n") + "\r\n", t[n] += r_24;
                }
            } }), t; }, A.prototype.getTrackBySSRC = function (e) { if ("number" != typeof e)
                throw new Error("SSRC " + e + " is not a number"); for (var _i = 0, _a = this.localTracks.values(); _i < _a.length; _i++) {
                var t_115 = _a[_i];
                if (this.getLocalSSRC(t_115) === e)
                    return t_115;
            } for (var _b = 0, _d = this.getRemoteTracks(); _b < _d.length; _b++) {
                var t_116 = _d[_b];
                if (t_116.getSSRC() === e)
                    return t_116;
            } return null; }, A.prototype.getSsrcByTrackId = function (e) { var t = function (t) { return t.getTrack().id === e; }, n = this.getLocalTracks().find(t); if (n)
                return this.getLocalSSRC(n); var i = this.getRemoteTracks().find(t); return i ? i.getSSRC() : null; }, A.prototype._remoteStreamAdded = function (e) {
                var _this = this;
                var t = b.a.getStreamID(e);
                if (!b.a.isUserStreamById(t))
                    return void R.info(this + " ignored remote 'stream added' event for non-user streamid: " + t);
                p.a.isChromiumBased() && (e.onaddtrack = function (t) { _this._remoteTrackAdded(e, t.track); }, e.onremovetrack = function (t) { _this._remoteTrackRemoved(e, t.track); });
                var n = e.getAudioTracks();
                for (var _i = 0, n_80 = n; _i < n_80.length; _i++) {
                    var t_117 = n_80[_i];
                    this._remoteTrackAdded(e, t_117);
                }
                var i = e.getVideoTracks();
                for (var _a = 0, i_61 = i; _a < i_61.length; _a++) {
                    var t_118 = i_61[_a];
                    this._remoteTrackAdded(e, t_118);
                }
            }, A.prototype._remoteTrackAdded = function (e, t, n) {
                if (n === void 0) { n = null; }
                var i = b.a.getStreamID(e), r = t.kind;
                if (!this.isP2P && !b.a.isUserStreamById(i))
                    return void R.info(this + " ignored remote 'stream added' event for non-user streamid: " + i);
                if (R.info(this + " remote track added:", i, r), !r)
                    return void m.callErrorHandler(new Error("MediaType undefined for remote track, stream id: " + i));
                var s = p.a.usesPlanB() ? new g.a(this.remoteDescription.sdp) : new g.a(this.peerconnection.remoteDescription.sdp);
                var o;
                if (p.a.usesUnifiedPlan())
                    if (n && n.mid) {
                        var e_151 = n.mid;
                        o = s.media.filter(function (t) { return _.a.findLine(t, "a=mid:" + e_151); });
                    }
                    else
                        o = s.media.filter(function (e) { var t = _.a.findLine(e, "a=msid:"); return void 0 !== t && i === t.substring(7).split(" ")[0]; });
                else
                    o = s.media.filter(function (e) { return e.startsWith("m=" + r); });
                if (!o.length)
                    return void m.callErrorHandler(new Error("No media lines for type " + r + " found in remote SDP for remote track: " + i));
                var a = _.a.findLines(o[0], "a=ssrc:");
                if (a = a.filter(function (e) { return -1 !== e.indexOf("msid:" + i); }), !a.length)
                    return void m.callErrorHandler(new Error("No SSRC lines for streamId " + i + " for remote track, media type: " + r));
                var c = a[0].substring(7).split(" ")[0], d = Number(c), u = this.signalingLayer.getSSRCOwner(d);
                if (isNaN(d) || d < 0)
                    return void m.callErrorHandler(new Error("Invalid SSRC: " + c + " for remote track, msid: " + i + " media type: " + r));
                if (!u)
                    return void m.callErrorHandler(new Error("No SSRC owner known for: " + d + " for remote track, msid: " + i + " media type: " + r));
                R.log(this + " associated ssrc", u, d);
                var l = this.signalingLayer.getPeerMediaInfo(u, r);
                if (!l)
                    return void m.callErrorHandler(new Error(this + ": no peer media info available for " + u));
                var h = l.muted, f = l.videoType;
                this._createRemoteTrack(u, e, t, r, f, d, h);
            }, A.prototype._createRemoteTrack = function (e, t, n, i, r, s, o) { var a = this.remoteTracks.get(e); a || (a = new Map, this.remoteTracks.set(e, a)); var c = a.get(i); if (c && p.a.isWebKitBased() && this._remoteTrackRemoved(c.getOriginalStream(), c.getTrack()), c && c.getTrack() === n)
                return void R.info(this + " ignored duplicated remote track added event for: " + (e + ", " + i)); c && (R.error(this + " received a second remote track for " + e + " " + i + ", deleting the existing track."), this._remoteTrackRemoved(c.getOriginalStream(), c.getTrack())); var d = new y.a(this.rtc, this.rtc.conference, e, t, n, i, r, s, o, this.isP2P); a.set(i, d), this.eventEmitter.emit(u.a.REMOTE_TRACK_ADDED, d, this); }, A.prototype._remoteStreamRemoved = function (e) { if (!b.a.isUserStream(e)) {
                var t_120 = b.a.getStreamID(e);
                return void R.info("Ignored remote 'stream removed' event for non-user stream " + t_120);
            } var t = e.getVideoTracks(); for (var _i = 0, t_119 = t; _i < t_119.length; _i++) {
                var n_82 = t_119[_i];
                this._remoteTrackRemoved(e, n_82);
            } var n = e.getAudioTracks(); for (var _a = 0, n_81 = n; _a < n_81.length; _a++) {
                var t_121 = n_81[_a];
                this._remoteTrackRemoved(e, t_121);
            } }, A.prototype._remoteTrackRemoved = function (e, t) { var n = b.a.getStreamID(e), i = t && b.a.getTrackID(t); R.info(this + " - remote track removed: " + n + ", " + i), n ? i ? this._removeRemoteTrackById(n, i) || R.warn(this + " Removed track not found for msid: " + n + ",\n             track id: " + i) : m.callErrorHandler(new Error(this + " remote track removal failed - no track ID")) : m.callErrorHandler(new Error(this + " remote track removal failed - no stream ID")); }, A.prototype._getRemoteTrackById = function (e, t) { for (var _i = 0, _a = this.remoteTracks.values(); _i < _a.length; _i++) {
                var n_83 = _a[_i];
                for (var _b = 0, _d = n_83.values(); _b < _d.length; _b++) {
                    var i_62 = _d[_b];
                    if (i_62.getStreamId() == e && i_62.getTrackId() == t)
                        return i_62;
                }
            } }, A.prototype.removeRemoteTracks = function (e) { var t = [], n = this.remoteTracks.get(e); if (n) {
                var i_63 = n.get(c.a), r_25 = n.get(c.c);
                i_63 && t.push(i_63), r_25 && t.push(r_25), this.remoteTracks.delete(e);
            } return R.debug(this + " removed remote tracks for " + e + " count: " + t.length), t; }, A.prototype._removeRemoteTrack = function (e) { e.dispose(); var t = e.getParticipantId(), n = this.remoteTracks.get(t); n ? n.delete(e.getType()) || R.error("Failed to remove " + e + " - type mapping messed up ?") : R.error("removeRemoteTrack: no remote tracks map for " + t), this.eventEmitter.emit(u.a.REMOTE_TRACK_REMOVED, e); }, A.prototype._removeRemoteTrackById = function (e, t) { var n = this._getRemoteTrackById(e, t); return n && this._removeRemoteTrack(n), n; }; var I = function (e) { if ("object" != typeof e || null === e || "string" != typeof e.sdp)
                return R.warn("An empty description was passed as an argument."), e; var t = n(25), i = t.parse(e.sdp); void 0 !== i && void 0 !== i.media && Array.isArray(i.media) && i.media.forEach(function (e) { var t = [], n = []; if (void 0 !== e.ssrcGroups && Array.isArray(e.ssrcGroups) && e.ssrcGroups.forEach(function (e) { void 0 !== e.semantics && "FID" === e.semantics && void 0 !== e.ssrcs && t.push(Number(e.ssrcs.split(" ")[0])); }), Array.isArray(e.ssrcs)) {
                var i_64;
                for (i_64 = 0; i_64 < e.ssrcs.length; i_64++)
                    "object" == typeof e.ssrcs[i_64] && void 0 !== e.ssrcs[i_64].id && t.indexOf(e.ssrcs[i_64].id) >= 0 && (n.push(e.ssrcs[i_64]), delete e.ssrcs[i_64]);
                for (i_64 = 0; i_64 < e.ssrcs.length; i_64++)
                    void 0 !== e.ssrcs[i_64] && n.push(e.ssrcs[i_64]);
                e.ssrcs = function (e) {
                    if (e === void 0) { e = []; }
                    if (!p.a.isChrome() || !p.a.isVersionGreaterThan(70))
                        return e;
                    var t = __spreadArray([], e);
                    return e.filter(function (e) { return e.attribute === "mslabel" && e.value === "-"; }).map(function (e) { return e.id; }).forEach(function (e) { var n = t.find(function (t) { return t.id === e && "cname" === t.attribute; }); n.value = "recvonly-" + e, t = t.filter(function (t) { return t.id !== e; }), t.push(n); }), t;
                }(n);
            } }); var r = t.write(i); return new RTCSessionDescription({ type: e.type, sdp: r }); }; A.prototype.getLocalSSRC = function (e) { var t = this._getSSRC(e.rtcId); return t && t.ssrcs[0]; }, A.prototype._injectSsrcGroupForUnifiedSimulcast = function (e) { var t = o.a.parse(e.sdp), n = t.media.find(function (e) { return "video" === e.type; }); n.ssrcGroups = n.ssrcGroups || []; var i = n.ssrcGroups.filter(function (e) { return "FID" === e.semantics; }); if (n.simulcast || n.simulcast_03) {
                var t_122 = [];
                if (i && i.length ? i.forEach(function (e) { t_122.push(e.ssrcs.split(" ")[0]); }) : n.ssrcs.forEach(function (e) { "msid" === e.attribute && t_122.push(e.id); }), n.ssrcGroups.find(function (e) { return "SIM" === e.semantics; }))
                    return e;
                n.ssrcGroups.push({ semantics: "SIM", ssrcs: t_122.join(" ") });
            } return new RTCSessionDescription({ type: e.type, sdp: o.a.write(t) }); }; var P = { signalingState: function () { return this.peerconnection.signalingState; }, iceConnectionState: function () { return this.peerconnection.iceConnectionState; }, localDescription: function () { var e = this.peerconnection.localDescription; return e ? (this.trace("getLocalDescription::preTransform", w(e)), p.a.usesUnifiedPlan() ? (e = this.interop.toPlanB(e), this.trace("getLocalDescription::postTransform (Plan B)", w(e)), e = this._injectSsrcGroupForUnifiedSimulcast(e), this.trace("getLocalDescription::postTransform (inject ssrc group)", w(e))) : (p.a.doesVideoMuteByStreamRemove() && (e = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(e), R.debug("getLocalDescription::postTransform (munge local SDP)", e)), e = function (e, t) { if (!e)
                    throw new Error("No local description passed in."); var n = new S.a(e.sdp), i = n.selectMedia("audio"); var r = !1; i && "sendrecv" !== i.direction && (t.startSilent ? i.direction = "inactive" : i.direction = "sendrecv", r = !0); var s = n.selectMedia("video"); return s && "sendrecv" !== s.direction && (s.direction = "sendrecv", r = !0), r ? new RTCSessionDescription({ type: e.type, sdp: n.toRawSDP() }) : e; }(e, this.options)), e = this.localSdpMunger.transformStreamIdentifiers(e), e) : (R.debug("getLocalDescription no localDescription found"), {}); }, remoteDescription: function () { var e = this.peerconnection.remoteDescription; return e ? (this.trace("getRemoteDescription::preTransform", w(e)), p.a.usesUnifiedPlan() && (e = this.interop.toPlanB(e), this.trace("getRemoteDescription::postTransform (Plan B)", w(e))), e) : (R.debug("getRemoteDescription no remoteDescription found"), {}); } }; Object.keys(P).forEach(function (e) { Object.defineProperty(A.prototype, e, { get: P[e] }); }), A.prototype._getSSRC = function (e) { return this.localSSRCs.get(e); }, A.prototype._isSharingScreen = function () { var e = this.getLocalVideoTrack(); return e && e.videoType === h.DESKTOP; }, A.prototype._mungeCodecOrder = function (e) { if (!this.codecPreference || p.a.supportsCodecPreferences())
                return e; var t = o.a.parse(e.sdp); for (var _i = 0, _a = t.media; _i < _a.length; _i++) {
                var e_152 = _a[_i];
                if (this.codecPreference.enable && e_152.type === this.codecPreference.mediaType)
                    if (_.a.preferCodec(e_152, this.codecPreference.mimeType), this.codecPreference.mimeType === a.H264 && p.a.isReactNative() && this.isP2P && _.a.stripCodec(e_152, this.codecPreference.mimeType, !0), this.codecPreference.mimeType === a.VP9) {
                        var t_123 = this.videoBitrates.VP9 || this.videoBitrates, n_84 = t_123.high ? t_123.high : 25e5;
                        e_152.bandwidth = [{ type: "AS", limit: this._isSharingScreen() ? 25e5 : Math.floor(n_84 / 1e3) }];
                    }
                    else
                        e_152.bandwidth = void 0;
                else
                    e_152.type === this.codecPreference.mediaType && _.a.stripCodec(e_152, this.codecPreference.mimeType);
            } return new RTCSessionDescription({ type: e.type, sdp: o.a.write(t) }); }, A.prototype.containsTrack = function (e) { if (e.isLocal())
                return this.localTracks.has(e.rtcId); var t = e.getParticipantId(), n = this.remoteTracks.get(t); return Boolean(n && n.get(e.getType()) === e); }, A.prototype.addTrack = function (e, t) {
                if (t === void 0) { t = !1; }
                var n = e.rtcId;
                if (R.info("add " + e + " to: " + this), this.localTracks.has(n))
                    return Promise.reject(new Error(e + " is already in " + this));
                if (this.localTracks.set(n, e), p.a.usesUnifiedPlan() && this.isP2P)
                    this.tpcUtils.addTrack(e, t);
                else {
                    var t_124 = e.getOriginalStream();
                    if (t_124)
                        this._addStream(t_124);
                    else if (!p.a.doesVideoMuteByStreamRemove() || e.isAudioTrack() || e.isVideoTrack() && !e.isMuted())
                        return Promise.reject(new Error(this + " no WebRTC stream for: " + e));
                    if (p.a.usesPlanB() && p.a.doesVideoMuteByStreamRemove() && e.isVideoTrack() && e.isMuted()) {
                        var t_125 = this.generateNewStreamSSRCInfo(e);
                        this.sdpConsistency.setPrimarySsrc(t_125.ssrcs[0]);
                        var n_85 = t_125.groups.find(function (e) { return "SIM" === e.semantics; });
                        n_85 && this.simulcast.setSsrcCache(n_85.ssrcs);
                        var i_65 = t_125.groups.filter(function (e) { return "FID" === e.semantics; });
                        if (i_65) {
                            var e_153 = new Map;
                            i_65.forEach(function (t) { var n = t.ssrcs[0], i = t.ssrcs[1]; e_153.set(n, i); }), this.rtxModifier.setSsrcCache(e_153);
                        }
                    }
                }
                var i = Promise.resolve();
                return p.a.isFirefox() && (i = this.tpcUtils.setEncodings(e)), i;
            }, A.prototype.addTrackUnmute = function (e) { if (!this._assertTrackBelongs("addTrackUnmute", e))
                return Promise.reject("Track not found on the peerconnection"); R.info("Adding " + e + " as unmute to " + this); var t = e.getOriginalStream(); return t ? p.a.usesUnifiedPlan() ? this.tpcUtils.addTrackUnmute(e) : (this._addStream(t), Promise.resolve(!0)) : (R.error("Unable to add " + e + " as unmute to " + this + " - no WebRTC stream"), Promise.reject("Stream not found")); }, A.prototype._addStream = function (e) { this.peerconnection.addStream(e), this._addedStreams.push(e); }, A.prototype._removeStream = function (e) { this.peerconnection.removeStream(e), this._addedStreams = this._addedStreams.filter(function (t) { return t !== e; }); }, A.prototype._assertTrackBelongs = function (e, t) { var n = this.localTracks.has(t.rtcId); return n || R.error(e + ": " + t + " does not belong to " + this), n; }, A.prototype.getConfiguredVideoCodec = function () { var e = this.localDescription.sdp, t = a.VP8; if (!e)
                return t; var n = o.a.parse(e).media.find(function (e) { return e.type === c.c; }).rtp[0].codec; return n ? Object.values(a).find(function (e) { return e === n.toLowerCase(); }) : t; }, A.prototype.setVideoCodecs = function (e, t) {
                if (e === void 0) { e = null; }
                if (t === void 0) { t = null; }
                var n = null === t, i = t || e;
                if (this.codecPreference && (e || t) ? (this.codecPreference.enable = n, this.codecPreference.mimeType = i) : e || t ? this.codecPreference = { enable: n, mediaType: c.c, mimeType: i } : R.warn("Invalid codec settings: preferred " + e + ", disabled " + t + ",\n            atleast one value is needed"), p.a.supportsCodecPreferences()) {
                    var e_154 = this.peerconnection.getTransceivers().find(function (e) { var t, n; return e.receiver && (null === (t = e.receiver) || void 0 === t || null === (n = t.track) || void 0 === n ? void 0 : n.kind) === c.c; });
                    if (!e_154)
                        return;
                    var t_126 = RTCRtpReceiver.getCapabilities("video").codecs;
                    n ? t_126.sort(function (e) { return e.mimeType.toLowerCase() === "video/" + i ? -1 : 1; }) : t_126 = t_126.filter(function (e) { return e.mimeType.toLowerCase() !== "video/" + i; });
                    try {
                        e_154.setCodecPreferences(t_126);
                    }
                    catch (e) {
                        R.warn("Setting " + i + " as " + (n ? "preferred" : "disabled") + " codec failed", e);
                    }
                }
            }, A.prototype.isMediaStreamInPc = function (e) { return this._addedStreams.indexOf(e) > -1; }, A.prototype.removeTrack = function (e) { var t = e.getOriginalStream(); this.trace("removeStream", e.rtcId, t ? t.id : void 0), this._assertTrackBelongs("removeStream", e) && (this.localTracks.delete(e.rtcId), this.localSSRCs.delete(e.rtcId), t && this.peerconnection.removeStream(t)); }, A.prototype.findSenderByKind = function (e) { return this.peerconnection.getSenders().find(function (t) { return t.track && t.track.kind === e; }); }, A.prototype.findReceiverForTrack = function (e) { return this.peerconnection.getReceivers().find(function (t) { return t.track === e; }); }, A.prototype.findSenderForTrack = function (e) { return this.peerconnection.getSenders().find(function (t) { return t.track === e; }); }, A.prototype.replaceTrack = function (e, t) {
                var _this = this;
                if (p.a.usesUnifiedPlan())
                    return R.debug("TPC.replaceTrack using unified plan."), this.tpcUtils.replaceTrack(e, t).then(function () { return _this.isSimulcastOn() && p.a.usesSdpMungingForSimulcast(); });
                R.debug("TPC.replaceTrack using plan B.");
                var n = Promise.resolve();
                return e && this.removeTrack(e), t && (n = this.addTrack(t)), n.then(function () { return !0; });
            }, A.prototype.removeTrackMute = function (e) { var t = e.getOriginalStream(); return this.trace("removeStreamMute", e.rtcId, t ? t.id : null), this._assertTrackBelongs("removeStreamMute", e) ? p.a.usesUnifiedPlan() ? this.tpcUtils.removeTrackMute(e) : t ? (R.info("Removing " + e + " as mute from " + this), this._removeStream(t), Promise.resolve(!0)) : (R.error("removeStreamMute - no WebRTC stream for " + e), Promise.reject("Stream not found")) : Promise.reject("Track not found in the peerconnection"); }, A.prototype.createDataChannel = function (e, t) { return this.trace("createDataChannel", e, t), this.peerconnection.createDataChannel(e, t); }, A.prototype._ensureSimulcastGroupIsLast = function (e) { var t = e.sdp; var n = t.indexOf("m=video"), i = t.indexOf("a=ssrc-group:SIM", n); var r = t.lastIndexOf("a=ssrc-group"); if (-1 === i || -1 === r || r === i)
                return e; var s = t.indexOf("\r\n", i), o = t.substring(i, s + 2); t = t.replace(o, ""), r = t.lastIndexOf("a=ssrc-group"); var a = t.indexOf("\r\n", r), c = t.slice(0, a), d = o.trim(), u = t.slice(a); return t = c + "\r\n" + d + u, new RTCSessionDescription({ type: e.type, sdp: t }); }, A.prototype._adjustLocalMediaDirection = function (e) { var t = new S.a(e.sdp); var n = !1; var i = t.selectMedia("audio"); if (i) {
                var e_155 = this._getDesiredMediaDirection(c.a);
                i.direction !== e_155 && (i.direction = e_155, R.info("Adjusted local audio direction to " + e_155), n = !0);
            }
            else
                R.warn('No "audio" media found int the local description'); var r = t.selectMedia("video"); if (r) {
                var e_156 = this._getDesiredMediaDirection(c.c);
                r.direction !== e_156 && (r.direction = e_156, R.info("Adjusted local video direction to " + e_156), n = !0);
            }
            else
                R.warn('No "video" media found in the local description'); return n ? new RTCSessionDescription({ type: e.type, sdp: t.toRawSDP() }) : e; }, A.prototype.setLocalDescription = function (e) {
                var _this = this;
                var t = e;
                return this.trace("setLocalDescription::preTransform", w(t)), t = this._mungeCodecOrder(t), p.a.usesPlanB() ? (t = this._adjustLocalMediaDirection(t), t = this._ensureSimulcastGroupIsLast(t)) : (t = this.interop.toUnifiedPlan(t), this.trace("setLocalDescription::postTransform (Unified Plan)", w(t))), new Promise(function (e, n) { _this.peerconnection.setLocalDescription(t).then(function () { _this.trace("setLocalDescriptionOnSuccess"); var n = _.a.getUfrag(t.sdp); n !== _this.localUfrag && (_this.localUfrag = n, _this.eventEmitter.emit(u.a.LOCAL_UFRAG_CHANGED, _this, n)), e(); }, function (e) { _this.trace("setLocalDescriptionOnFailure", e), _this.eventEmitter.emit(u.a.SET_LOCAL_DESCRIPTION_FAILED, e, _this), n(e); }); });
            }, A.prototype.setAudioTransferActive = function (e) { R.debug(this + " audio transfer active: " + e); var t = this.audioTransferActive !== e; return this.audioTransferActive = e, p.a.usesUnifiedPlan() ? (this.tpcUtils.setAudioTransferActive(e), !1) : t; }, A.prototype.setSenderVideoDegradationPreference = function () { if (!this.peerconnection.getSenders)
                return R.debug("Browser does not support RTCRtpSender"), Promise.resolve(); var e = this.getLocalVideoTrack(), t = this.findSenderByKind(c.c); if (!t)
                return Promise.resolve(); var n = t.getParameters(), i = e.videoType === h.CAMERA ? "maintain-framerate" : this.options.capScreenshareBitrate && p.a.usesPlanB() ? "maintain-resolution" : "maintain-framerate"; return R.info("Setting a degradation preference of " + i + " on local video track"), n.degradationPreference = i, this.tpcUtils.updateEncodingsResolution(n), t.setParameters(n); }, A.prototype.setMaxBitRate = function () { if (this.getConfiguredVideoCodec() === a.VP9 || !window.RTCRtpSender)
                return Promise.resolve(); var e = this.getLocalVideoTrack(); if (!e)
                return Promise.resolve(); var t = e.videoType, n = p.a.usesPlanB() && t === h.DESKTOP; if (!(this.options.videoQuality && this.options.videoQuality.maxBitratesVideo || n && this.options.capScreenshareBitrate || p.a.usesUnifiedPlan()))
                return Promise.resolve(); var i = e._originalStream && e._originalStream.id !== e.getStreamId(), r = this.findSenderByKind(c.c); if (!r)
                return Promise.resolve(); var s = r.getParameters(); if (!s.encodings || !s.encodings.length)
                return Promise.resolve(); if (this.isSimulcastOn()) {
                for (var e_157 in s.encodings)
                    if (s.encodings.hasOwnProperty(e_157)) {
                        var t_127 = void 0;
                        t_127 = n ? this.options.capScreenshareBitrate ? i ? 25e5 : 5e5 : void 0 : this.tpcUtils.localStreamEncodingsConfig[e_157].maxBitrate, R.info(this + " Setting a max bitrate of " + t_127 + " bps on layer " + this.tpcUtils.localStreamEncodingsConfig[e_157].rid), s.encodings[e_157].maxBitrate = t_127;
                    }
            }
            else {
                var n_86 = this.videoBitrates.high;
                if (t === h.CAMERA) {
                    var t_128 = this.senderVideoMaxHeight ? Math.floor(e.resolution / this.senderVideoMaxHeight) : 1, i_66 = this.tpcUtils.localStreamEncodingsConfig.find(function (e) { return e.scaleResolutionDownBy === t_128; });
                    i_66 && (R.info(this + " Setting a max bitrate of " + i_66.maxBitrate + " bps on local video track"), n_86 = i_66.maxBitrate);
                }
                s.encodings[0].maxBitrate = n_86;
            } return this.tpcUtils.updateEncodingsResolution(s), r.setParameters(s); }, A.prototype.setRemoteDescription = function (e) {
                var _this = this;
                if (this.trace("setRemoteDescription::preTransform", w(e)), e = this._mungeCodecOrder(e), p.a.usesPlanB())
                    this.isSimulcastOn() && (e = this.simulcast.mungeRemoteDescription(e, !0), this.trace("setRemoteDescription::postTransform (simulcast)", w(e))), e = I(e);
                else {
                    var t_129 = this.peerconnection.remoteDescription;
                    e = this.interop.toUnifiedPlan(e, t_129), this.trace("setRemoteDescription::postTransform (Unified)", w(e)), this.isSimulcastOn() && (e = this.simulcast.mungeRemoteDescription(e), e = this.tpcUtils.insertUnifiedPlanSimulcastReceive(e), this.trace("setRemoteDescription::postTransform (sim receive)", w(e)), e = this.tpcUtils.ensureCorrectOrderOfSsrcs(e));
                }
                return new Promise(function (t, n) { _this.peerconnection.setRemoteDescription(e).then(function () { _this.trace("setRemoteDescriptionOnSuccess"); var n = _.a.getUfrag(e.sdp); n !== _this.remoteUfrag && (_this.remoteUfrag = n, _this.eventEmitter.emit(u.a.REMOTE_UFRAG_CHANGED, _this, n)), t(); }, function (e) { _this.trace("setRemoteDescriptionOnFailure", e), _this.eventEmitter.emit(u.a.SET_REMOTE_DESCRIPTION_FAILED, e, _this), n(e); }); });
            }, A.prototype.setSenderVideoConstraint = function (e) {
                var _this = this;
                if (e === void 0) { e = null; }
                if (e < 0)
                    throw new Error("Invalid frameHeight: " + e);
                if (p.a.isReactNative())
                    return Promise.resolve();
                var t = null === e ? this.senderVideoMaxHeight : e;
                if (this.senderVideoMaxHeight = t, null === t)
                    return Promise.resolve();
                R.log(this + " senderVideoMaxHeight: " + t);
                var n = this.getLocalVideoTrack();
                if (!n || n.isMuted())
                    return Promise.resolve();
                var i = this.findSenderByKind(c.c);
                if (!i)
                    return Promise.resolve();
                var r = i.getParameters();
                if (!r || !r.encodings || !r.encodings.length)
                    return Promise.resolve();
                if (this.isSimulcastOn()) {
                    var e_158 = this.tpcUtils.getLocalStreamHeightConstraints(n.track).map(function (e) { return e <= t; }), i_67 = this.tpcUtils.localStreamEncodingsConfig.findIndex(function (e) { return 4 === e.scaleResolutionDownBy; });
                    t > 0 && -1 !== i_67 && (e_158[i_67] = !0);
                    for (var t_130 in r.encodings)
                        r.encodings.hasOwnProperty(t_130) && (r.encodings[t_130].active = e_158[t_130]);
                    this.tpcUtils.updateEncodingsResolution(r);
                }
                else
                    t > 0 ? (r.encodings[0].scaleResolutionDownBy = n.videoType === h.DESKTOP || n.resolution <= t ? 1 : Math.floor(n.resolution / t), r.encodings[0].active = !0) : (r.encodings[0].scaleResolutionDownBy = void 0, r.encodings[0].active = !1);
                return R.info(this + " setting max height of " + t + ", encodings: " + JSON.stringify(r.encodings)), i.setParameters(r).then(function () { if (n.maxEnabledResolution = t, _this.eventEmitter.emit(u.a.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, n), _this.isP2P || !_this.isSimulcastOn())
                    return _this.setMaxBitRate(); });
            }, A.prototype.setVideoTransferActive = function (e) { R.debug(this + " video transfer active: " + e); var t = this.videoTransferActive !== e; return this.videoTransferActive = e, p.a.usesUnifiedPlan() ? (this.tpcUtils.setVideoTransferActive(e), !1) : t; }, A.prototype.sendTones = function (e, t, n) {
                if (t === void 0) { t = 200; }
                if (n === void 0) { n = 200; }
                if (!this._dtmfSender) {
                    if (this.peerconnection.getSenders) {
                        var e_159 = this.peerconnection.getSenders().find(function (e) { return e.dtmf; });
                        this._dtmfSender = e_159 && e_159.dtmf, this._dtmfSender && R.info(this + " initialized DTMFSender using getSenders");
                    }
                    if (!this._dtmfSender) {
                        var e_160 = Array.from(this.localTracks.values()).find(function (e) { return e.isAudioTrack(); });
                        this.peerconnection.createDTMFSender && e_160 && (this._dtmfSender = this.peerconnection.createDTMFSender(e_160.getTrack())), this._dtmfSender && R.info(this + " initialized DTMFSender using deprecated createDTMFSender");
                    }
                    this._dtmfSender && (this._dtmfSender.ontonechange = this._onToneChange.bind(this));
                }
                if (this._dtmfSender) {
                    if (this._dtmfSender.toneBuffer)
                        return void this._dtmfTonesQueue.push({ tones: e, duration: t, interToneGap: n });
                    this._dtmfSender.insertDTMF(e, t, n);
                }
                else
                    R.warn(this + " sendTones - failed to select DTMFSender");
            }, A.prototype._onToneChange = function (e) { if (this._dtmfSender && "" === e.tone && this._dtmfTonesQueue.length) {
                var _a = this._dtmfTonesQueue.shift(), e_161 = _a.tones, t_131 = _a.duration, n_87 = _a.interToneGap;
                this._dtmfSender.insertDTMF(e_161, t_131, n_87);
            } }, A.prototype.generateRecvonlySsrc = function () { var e = _.a.generateSsrc(); R.info(this + " generated new recvonly SSRC: " + e), this.sdpConsistency.setPrimarySsrc(e); }, A.prototype.clearRecvonlySsrc = function () { R.info("Clearing primary video SSRC!"), this.sdpConsistency.clearVideoSsrcCache(); }, A.prototype.close = function () { this.trace("stop"), this.signalingLayer.off(l.a, this._peerMutedChanged), this.signalingLayer.off(l.b, this._peerVideoTypeChanged); for (var _i = 0, _a = this.remoteTracks.values(); _i < _a.length; _i++) {
                var e_162 = _a[_i];
                for (var _b = 0, _d = e_162.values(); _b < _d.length; _b++) {
                    var t_132 = _d[_b];
                    this._removeRemoteTrack(t_132);
                }
            } this.remoteTracks.clear(), this._addedStreams = [], this._dtmfSender = null, this._dtmfTonesQueue = [], this.rtc._removePeerConnection(this) || R.error("RTC._removePeerConnection returned false"), null !== this.statsinterval && (window.clearInterval(this.statsinterval), this.statsinterval = null), R.info("Closing " + this + "..."), this.peerconnection.close(); }, A.prototype.createAnswer = function (e) { return this._createOfferOrAnswer(!1, e); }, A.prototype.createOffer = function (e) { return this._createOfferOrAnswer(!0, e); }, A.prototype._createOfferOrAnswer = function (e, t) {
                var _this = this;
                var n = e ? "Offer" : "Answer";
                this.trace("create" + n, JSON.stringify(t, null, " "));
                var i = function (e, t, i) { try {
                    _this.trace("create" + n + "OnSuccess::preTransform", w(e)), p.a.usesPlanB() && (_this.hasAnyTracksOfType(c.c) || _this.sdpConsistency.hasPrimarySsrcCached() || _this.generateRecvonlySsrc(), e = new RTCSessionDescription({ type: e.type, sdp: _this.sdpConsistency.makeVideoPrimarySsrcsConsistent(e.sdp) }), _this.trace("create" + n + "OnSuccess::postTransform (make primary audio/video ssrcs consistent)", w(e))), _this.isSimulcastOn() && p.a.usesSdpMungingForSimulcast() && (!_this.options.capScreenshareBitrate || _this.options.capScreenshareBitrate && !_this._isSharingScreen()) && (e = _this.simulcast.mungeLocalDescription(e), _this.trace("create" + n + "OnSuccess::postTransform (simulcast)", w(e))), !_this.options.disableRtx && p.a.usesSdpMungingForSimulcast() && (e = new RTCSessionDescription({ type: e.type, sdp: _this.rtxModifier.modifyRtxSsrcs(e.sdp) }), _this.trace("create" + n + "OnSuccess::postTransform (rtx modifier)", w(e)));
                    var i_68 = function (e) { var t = new Map, n = new Map; if ("object" != typeof e || null === e || "string" != typeof e.sdp)
                        return R.warn("An empty description was passed as an argument."), t; var i = o.a.parse(e.sdp); if (!Array.isArray(i.media))
                        return t; for (var _i = 0, _a = i.media; _i < _a.length; _i++) {
                        var e_164 = _a[_i];
                        if (Array.isArray(e_164.ssrcs)) {
                            if (Array.isArray(e_164.ssrcGroups))
                                for (var _b = 0, _d = e_164.ssrcGroups; _b < _d.length; _b++) {
                                    var t_133 = _d[_b];
                                    if (void 0 !== t_133.semantics && void 0 !== t_133.ssrcs) {
                                        var e_165 = t_133.ssrcs.split(" ").map(function (e) { return parseInt(e, 10); }), i_69 = e_165[0];
                                        t_133.ssrcs = e_165, n.has(i_69) || n.set(i_69, []), n.get(i_69).push(t_133);
                                    }
                                }
                            for (var _f = 0, _g = e_164.ssrcs; _f < _g.length; _f++) {
                                var i_70 = _g[_f];
                                if ("msid" !== i_70.attribute)
                                    continue;
                                var e_166 = i_70.value;
                                var r_26 = t.get(e_166);
                                r_26 || (r_26 = { ssrcs: [], groups: [], msid: e_166 }, t.set(e_166, r_26));
                                var s_20 = i_70.id;
                                if (r_26.ssrcs.push(s_20), n.has(s_20)) {
                                    var e_167 = n.get(s_20);
                                    for (var _h = 0, e_163 = e_167; _h < e_163.length; _h++) {
                                        var t_134 = e_163[_h];
                                        r_26.groups.push(t_134);
                                    }
                                }
                            }
                        }
                    } return t; }(e);
                    R.debug("Got local SSRCs MAP: ", i_68), _this._processLocalSSRCsMap(i_68), t(e);
                }
                catch (t) {
                    _this.trace("create" + n + "OnError", t), _this.trace("create" + n + "OnError", w(e)), R.error("create" + n + "OnError", t, w(e)), i(t);
                } }, r = function (t, i) { _this.trace("create" + n + "OnFailure", t); var r = e ? u.a.CREATE_OFFER_FAILED : u.a.CREATE_ANSWER_FAILED; _this.eventEmitter.emit(r, t, _this), i(t); };
                return new Promise(function (n, s) { var o; o = e ? _this.peerconnection.createOffer(t) : _this.peerconnection.createAnswer(t), o.then(function (e) { return i(e, n, s); }, function (e) { return r(e, s); }); });
            }, A.prototype._extractPrimarySSRC = function (e) { return e && e.groups && e.groups.length ? e.groups[0].ssrcs[0] : e && e.ssrcs && e.ssrcs.length ? e.ssrcs[0] : null; }, A.prototype._processLocalSSRCsMap = function (e) { for (var _i = 0, _a = this.localTracks.values(); _i < _a.length; _i++) {
                var t_135 = _a[_i];
                var n_88 = t_135.storedMSID;
                if (e.has(n_88)) {
                    var i_71 = e.get(n_88);
                    if (!i_71)
                        return void R.error("No SSRC found for: " + n_88 + " in " + this);
                    var r_27 = this.localSSRCs.get(t_135.rtcId), s_21 = this._extractPrimarySSRC(i_71), o_15 = this._extractPrimarySSRC(r_27);
                    s_21 !== o_15 ? (null === o_15 ? R.info("Storing new local SSRC for " + t_135 + " in " + this, i_71) : R.error("Overwriting SSRC for " + t_135 + " " + n_88 + " in " + this + " with: ", i_71), this.localSSRCs.set(t_135.rtcId, i_71), this.eventEmitter.emit(u.a.LOCAL_TRACK_SSRC_UPDATED, t_135, s_21)) : R.debug("The local SSRC(" + s_21 + ") for " + t_135 + " " + n_88 + "is still up to date in " + this);
                }
                else
                    t_135.isVideoTrack() || t_135.isMuted() || R.warn("No SSRCs found in the local SDP for " + t_135 + " MSID: " + n_88 + " in " + this);
            } }, A.prototype.addIceCandidate = function (e) { return this.trace("addIceCandidate", JSON.stringify({ candidate: e.candidate, sdpMid: e.sdpMid, sdpMLineIndex: e.sdpMLineIndex, usernameFragment: e.usernameFragment }, null, " ")), this.peerconnection.addIceCandidate(e); }, A.prototype.getStats = function (e, t) { p.a.isWebKitBased() || p.a.isFirefox() || p.a.isReactNative() ? this.peerconnection.getStats().then(e).catch(t || (function () { })) : this.peerconnection.getStats(e); }, A.prototype.generateNewStreamSSRCInfo = function (e) { var t = e.rtcId; var n = this._getSSRC(t); if (n && R.error("Will overwrite local SSRCs for track ID: " + t), this.isSimulcastOn() && (!this.options.capScreenshareBitrate || this.options.capScreenshareBitrate && !this._isSharingScreen())) {
                n = { ssrcs: [], groups: [] };
                for (var e_168 = 0; e_168 < C.a.length; e_168++)
                    n.ssrcs.push(_.a.generateSsrc());
                n.groups.push({ ssrcs: n.ssrcs.slice(), semantics: "SIM" });
            }
            else
                n = { ssrcs: [_.a.generateSsrc()], groups: [] }; if (!this.options.disableRtx) {
                var e_169 = n.ssrcs.length;
                for (var t_136 = 0; t_136 < e_169; ++t_136) {
                    var e_170 = n.ssrcs[t_136], i_72 = _.a.generateSsrc();
                    n.ssrcs.push(i_72), n.groups.push({ ssrcs: [e_170, i_72], semantics: "FID" });
                }
            } return n.msid = e.storedMSID, this.localSSRCs.set(t, n), n; }, A.prototype.toString = function () { return "TPC[" + this.id + ",p2p:" + this.isP2P + "]"; }; }).call(this, "modules/RTC/TraceablePeerConnection.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return c; })); var i = n(4), r = n(9), s = n(31); var o = Object(i.getLogger)(e); function a(e, t, n) { o.debug("Updating mline to associate " + n + "rtx ssrc with primary stream, " + t.id); var i = t.id, r = t.msid, s = t.cname, a = e.getRtxSSRC(i); a !== n ? (a && (o.debug(i + " was previously associated with rtx" + a + ", removing all references to it"), e.removeSSRC(a), o.debug("groups before filtering for " + a), o.debug(e.dumpSSRCGroups()), e.removeGroupsWithSSRC(a)), e.addSSRCAttribute({ id: n, attribute: "cname", value: s }), e.addSSRCAttribute({ id: n, attribute: "msid", value: r }), e.addSSRCGroup({ semantics: "FID", ssrcs: i + " " + n })) : o.debug(n + " was already associated with " + i); }
                var c = /** @class */ (function () {
                    function c() {
                        this.correspondingRtxSsrcs = new Map;
                    }
                    c.prototype.clearSsrcCache = function () { this.correspondingRtxSsrcs.clear(); };
                    c.prototype.setSsrcCache = function (e) { o.debug("Setting ssrc cache to ", e), this.correspondingRtxSsrcs = e; };
                    c.prototype.modifyRtxSsrcs = function (e) { var t = new s.a(e), n = t.selectMedia("video"); return n ? this.modifyRtxSsrcs2(n) ? t.toRawSDP() : e : (o.debug("No 'video' media found in the sdp: " + e), e); };
                    c.prototype.modifyRtxSsrcs2 = function (e) { if ("recvonly" === e.direction)
                        return o.debug("RtxModifier doing nothing, video m line is recvonly"), !1; if (e.getSSRCCount() < 1)
                        return o.debug("RtxModifier doing nothing, no video ssrcs present"), !1; o.debug("Current ssrc mapping: ", this.correspondingRtxSsrcs); var t = e.getPrimaryVideoSSRCs(); o.debug("Parsed primary video ssrcs ", t, " making sure all have rtx streams"); for (var _i = 0, t_137 = t; _i < t_137.length; _i++) {
                        var n_89 = t_137[_i];
                        var t_138 = e.getSSRCAttrValue(n_89, "msid"), i_73 = e.getSSRCAttrValue(n_89, "cname");
                        var s_22 = this.correspondingRtxSsrcs.get(n_89);
                        if (s_22)
                            o.debug("Already have an associated rtx ssrc forvideo ssrc " + n_89 + ": " + s_22);
                        else {
                            o.debug("No previously associated rtx ssrc for video ssrc " + n_89);
                            var t_139 = e.getRtxSSRC(n_89);
                            t_139 ? (o.debug("Rtx stream " + t_139 + " already existed in the sdp as an rtx stream for " + n_89), s_22 = t_139) : (s_22 = r.a.generateSsrc(), o.debug("Generated rtx ssrc " + s_22 + " for ssrc " + n_89)), o.debug("Caching rtx ssrc " + s_22 + " for video ssrc " + n_89), this.correspondingRtxSsrcs.set(n_89, s_22);
                        }
                        a(e, { id: n_89, cname: i_73, msid: t_138 }, s_22);
                    } return !0; };
                    c.prototype.stripRtx = function (e) { var t = new s.a(e), n = t.selectMedia("video"); if (!n)
                        return o.debug("No 'video' media found in the sdp: " + e), e; if ("recvonly" === n.direction)
                        return o.debug("RtxModifier doing nothing, video m line is recvonly"), e; if (n.getSSRCCount() < 1)
                        return o.debug("RtxModifier doing nothing, no video ssrcs present"), e; if (!n.containsAnySSRCGroups())
                        return o.debug("RtxModifier doing nothing, no video ssrcGroups present"), e; var i = n.findGroups("FID"); n.removeGroupsBySemantics("FID"); for (var _i = 0, i_74 = i; _i < i_74.length; _i++) {
                        var e_171 = i_74[_i];
                        var t_140 = Object(s.c)(e_171);
                        n.removeSSRC(t_140);
                    } return t.toRawSDP(); };
                    return c;
                }());  }).call(this, "modules/xmpp/RtxModifier.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return o; })); var i = n(4), r = n(31); var s = Object(i.getLogger)(e);
                var o = /** @class */ (function () {
                    function o(e) {
                        this.clearVideoSsrcCache(), this.logPrefix = e;
                    }
                    o.prototype.clearVideoSsrcCache = function () { this.cachedPrimarySsrc = null, this.injectRecvOnly = !1; };
                    o.prototype.setPrimarySsrc = function (e) { if ("number" != typeof e)
                        throw new Error("Primary SSRC must be a number!"); this.cachedPrimarySsrc = e; };
                    o.prototype.hasPrimarySsrcCached = function () { return Boolean(this.cachedPrimarySsrc); };
                    o.prototype.makeVideoPrimarySsrcsConsistent = function (e) { var t = new r.a(e), n = t.selectMedia("video"); if (!n)
                        return s.debug(this.logPrefix + " no 'video' media found in the sdp: " + e), e; if ("recvonly" === n.direction)
                        this.cachedPrimarySsrc && this.injectRecvOnly ? n.addSSRCAttribute({ id: this.cachedPrimarySsrc, attribute: "cname", value: "recvonly-" + this.cachedPrimarySsrc }) : s.info(this.logPrefix + " no SSRC found for the recvonly videostream!");
                    else {
                        var t_141 = n.getPrimaryVideoSsrc();
                        if (!t_141)
                            return s.info(this.logPrefix + " sdp-consistency couldn't parse new primary ssrc"), e;
                        if (this.cachedPrimarySsrc) {
                            s.info(this.logPrefix + " sdp-consistency replacing new ssrc" + t_141 + " with cached " + this.cachedPrimarySsrc), n.replaceSSRC(t_141, this.cachedPrimarySsrc);
                            for (var _i = 0, _a = n.ssrcGroups; _i < _a.length; _i++) {
                                var e_172 = _a[_i];
                                if ("FID" === e_172.semantics) {
                                    var n_90 = Object(r.b)(e_172), i_75 = Object(r.c)(e_172);
                                    n_90 === t_141 && (e_172.ssrcs = this.cachedPrimarySsrc + " " + i_75);
                                }
                            }
                        }
                        else
                            this.cachedPrimarySsrc = t_141, s.info(this.logPrefix + " sdp-consistency caching primary ssrc" + this.cachedPrimarySsrc);
                        this.injectRecvOnly = !0;
                    } return t.toRawSDP(); };
                    return o;
                }());  }).call(this, "modules/xmpp/SdpConsistency.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return h; })); var i = n(15), r = n(8), s = n(6), o = n(64); var a = n(4).getLogger(e), c = n(7); var d = !1, u = !1; var l = ["abort", "canplay", "canplaythrough", "emptied", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "ratechange", "stalled", "suspend", "waiting"];
                var h = /** @class */ (function (_super) {
                    __extends(h, _super);
                    function h(e, t, n, i, r, s, o, c, d, u) {
                        var _this = this;
                        if (_this = _super.call(this, t, i, r, function () { }, s, o) || this, _this.rtc = e, "number" != typeof c)
                            throw new TypeError("SSRC " + c + " is not a number");
                        _this.ssrc = c, _this.ownerEndpointId = n, _this.muted = d, _this.isP2P = u, a.debug("New remote track added: " + _this), _this.hasBeenMuted = d, _this.rtc && _this.track && _this._bindTrackHandlers(), _this._containerHandlers = {}, l.forEach(function (e) { _this._containerHandlers[e] = _this._containerEventHandler.bind(_this, e); });
                        return _this;
                    }
                    h.prototype._bindTrackHandlers = function () {
                        var _this = this;
                        this.track.addEventListener("mute", function () { return _this._onTrackMute(); }), this.track.addEventListener("unmute", function () { return _this._onTrackUnmute(); }), this.track.addEventListener("ended", function () { a.debug("\"onended\" event(" + Date.now() + "): " + _this); });
                    };
                    h.prototype._onTrackMute = function () { a.debug("\"onmute\" event(" + Date.now() + "): " + this), this.rtc.eventEmitter.emit(c.REMOTE_TRACK_MUTE, this); };
                    h.prototype._onTrackUnmute = function () { a.debug("\"onunmute\" event(" + Date.now() + "): " + this), this.rtc.eventEmitter.emit(c.REMOTE_TRACK_UNMUTE, this); };
                    h.prototype.setMute = function (e) { this.muted !== e && (e && (this.hasBeenMuted = !0), this.stream && (this.stream.muted = e), this.muted = e, this.emit(i.TRACK_MUTE_CHANGED, this)); };
                    h.prototype.isMuted = function () { return this.muted; };
                    h.prototype.getParticipantId = function () { return this.ownerEndpointId; };
                    h.prototype.isLocal = function () { return !1; };
                    h.prototype.getSSRC = function () { return this.ssrc; };
                    h.prototype._setVideoType = function (e) { this.videoType !== e && (this.videoType = e, this.emit(i.TRACK_VIDEOTYPE_CHANGED, e)); };
                    h.prototype._playCallback = function () { var e = this.isVideoTrack() ? "video" : "audio", t = window.performance.now(); console.log("(TIME) Render " + e + ":\t", t), this.conference.getConnectionTimes()[e + ".render"] = t; var n = window.connectionTimes["obtainPermissions.start"], i = window.connectionTimes["obtainPermissions.end"], o = isNaN(i) || isNaN(n) ? 0 : i - n, a = t - (this.conference.getConnectionTimes()["session.initiate"] - this.conference.getConnectionTimes()["muc.joined"]) - o; this.conference.getConnectionTimes()[e + ".ttfm"] = a, console.log("(TIME) TTFM " + e + ":\t", a), s.a.sendAnalytics(Object(r.N)({ media_type: e, muted: this.hasBeenMuted, value: a })); };
                    h.prototype._attachTTFMTracker = function (e) { d && this.isAudioTrack() || u && this.isVideoTrack() || (this.isAudioTrack() && (d = !0), this.isVideoTrack() && (u = !0), e.addEventListener("canplay", this._playCallback.bind(this))); };
                    h.prototype._onTrackAttach = function (e) {
                        var _this = this;
                        a.debug("Track has been attached to a container: " + this), l.forEach(function (t) { e.addEventListener(t, _this._containerHandlers[t]); });
                    };
                    h.prototype._onTrackDetach = function (e) {
                        var _this = this;
                        a.debug("Track has been detached from a container: " + this), l.forEach(function (t) { e.removeEventListener(t, _this._containerHandlers[t]); });
                    };
                    h.prototype._containerEventHandler = function (e) { a.debug(e + " handler was called for a container with attached " + this); };
                    h.prototype._getStatus = function () { var _a = this.track, e = _a.enabled, t = _a.muted, n = _a.readyState; return "readyState: " + n + ", muted: " + t + ", enabled: " + e; };
                    h.prototype.toString = function () { return "RemoteTrack[userID: " + this.getParticipantId() + ", type: " + this.getType() + ", ssrc: " + this.getSSRC() + ", p2p: " + this.isP2P + ", status: " + this._getStatus() + "]"; };
                    return h;
                }(o.a));  }).call(this, "modules/RTC/JitsiRemoteTrack.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(4), r = n(5), s = n(31); var o = Object(i.getLogger)(e);
                var a = /** @class */ (function () {
                    function a(e) {
                        this.tpc = e;
                    }
                    a.prototype._addMutedLocalVideoTracksToSDP = function (e) { var t = this.tpc.getLocalTracks(r.c); if (!t.length)
                        return !1; 1 !== t.length && o.error(this.tpc + " there is more than 1 video track ! Strange things may happen !", t); var n = e.selectMedia("video"); if (!n)
                        return o.debug(this.tpc + ' unable to hack local video track SDP- no "video" media'), !1; var i = !1; for (var _i = 0, t_142 = t; _i < t_142.length; _i++) {
                        var e_173 = t_142[_i];
                        var t_143 = e_173.isMuted(), r_28 = e_173.getOriginalStream(), s_23 = r_28 && this.tpc.isMediaStreamInPc(r_28), a_10 = t_143 || !s_23;
                        if (o.debug(this.tpc + " " + e_173 + " muted: " + t_143 + ", is in PeerConnection: " + s_23 + " => should fake sdp ? : " + a_10), !a_10)
                            continue;
                        var c = this.tpc.isSimulcastOn() ? this.tpc.simulcast.ssrcCache : [this.tpc.sdpConsistency.cachedPrimarySsrc];
                        if (!c.length) {
                            o.error("No SSRCs stored for: " + e_173 + " in " + this.tpc);
                            continue;
                        }
                        i = !0, n.direction = "sendrecv";
                        var d = "injected-" + c[0];
                        for (var _a = 0, c_6 = c; _a < c_6.length; _a++) {
                            var t_144 = c_6[_a];
                            n.removeSSRC(t_144), o.debug(this.tpc + " injecting video SSRC: " + t_144 + " for " + e_173), n.addSSRCAttribute({ id: t_144, attribute: "cname", value: d }), n.addSSRCAttribute({ id: t_144, attribute: "msid", value: e_173.storedMSID });
                        }
                        if (c.length > 1) {
                            var t_145 = { ssrcs: c.join(" "), semantics: "SIM" };
                            n.findGroup(t_145.semantics, t_145.ssrcs) || (o.debug(this.tpc + " injecting SIM group for " + e_173, t_145), n.addSSRCGroup(t_145));
                        }
                        this.tpc.options.disableRtx || this.tpc.rtxModifier.modifyRtxSsrcs2(n);
                    } return i; };
                    a.prototype._transformMediaIdentifiers = function (e) { var t = this.tpc.id; for (var _i = 0, _a = e.ssrcs; _i < _a.length; _i++) {
                        var n_91 = _a[_i];
                        switch (n_91.attribute) {
                            case "cname":
                            case "label":
                            case "mslabel":
                                n_91.value = n_91.value && n_91.value + "-" + t;
                                break;
                            case "msid": if (n_91.value) {
                                var e_174 = n_91.value.split(" ");
                                if (2 === e_174.length) {
                                    var i_76 = e_174[0], r_29 = e_174[1];
                                    n_91.value = i_76 + "-" + t + " " + r_29 + "-" + t;
                                }
                                else
                                    o.warn("Unable to munge local MSID- weird format detected: " + n_91.value);
                            }
                        }
                    } };
                    a.prototype.maybeAddMutedLocalVideoTracksToSDP = function (e) { if (!e)
                        throw new Error("No local description passed in."); var t = new s.a(e.sdp); return this._addMutedLocalVideoTracksToSDP(t) ? new RTCSessionDescription({ type: e.type, sdp: t.toRawSDP() }) : e; };
                    a.prototype.transformStreamIdentifiers = function (e) { if (!e || !e.sdp || !e.type)
                        return e; var t = new s.a(e.sdp), n = t.selectMedia("audio"); n && this._transformMediaIdentifiers(n); var i = t.selectMedia("video"); return i && this._transformMediaIdentifiers(i), new RTCSessionDescription({ type: e.type, sdp: t.toRawSDP() }); };
                    return a;
                }());  }).call(this, "modules/RTC/LocalSdpMunger.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return f; })); var i = n(4), r = n(0), s = n(7), o = n(32); var a = n(36), c = n(12), d = n(1), u = Object(i.getLogger)(e), l = [{ width: 1920, height: 1080, layers: 3, max: 5e3, target: 4e3, min: 800 }, { width: 1280, height: 720, layers: 3, max: 2500, target: 2500, min: 600 }, { width: 960, height: 540, layers: 3, max: 900, target: 900, min: 450 }, { width: 640, height: 360, layers: 2, max: 700, target: 500, min: 150 }, { width: 480, height: 270, layers: 2, max: 450, target: 350, min: 150 }, { width: 320, height: 180, layers: 1, max: 200, target: 150, min: 30 }]; var h = 800, p = null; function m(e, t, n) { if (n < 15e3)
                return 1; var i = 0, r = Math.min(t.height, t.width); if (e) {
                var e_175 = l.find(function (e) { return e.height <= r; });
                if (e_175) {
                    var _loop_10 = function () {
                        var t_146 = r;
                        if (e_175 = l.find(function (e) { return e.height === t_146; }), !e_175)
                            return "break";
                        i += e_175.target;
                    };
                    for (r = e_175.height; r >= 180; r /= 2) {
                        var state_1 = _loop_10();
                        if (state_1 === "break")
                            break;
                    }
                }
            }
            else {
                var e_176 = t.width * t.height;
                i = e_176 <= 76800 ? 600 : e_176 <= 307200 ? 1700 : e_176 <= 518400 ? 2e3 : 2500;
            } return Math.min(i, function (e) { if (e > 6e4)
                return Number.MAX_SAFE_INTEGER; return h * Math.pow(1.08, e / 1e3); }(Math.max(0, n - 1e3))); }
                var f = /** @class */ (function () {
                    function f(e, t, n) {
                        var _this = this;
                        this.eventEmitter = t, this._conference = e, this._localStats = { connectionQuality: 100, jvbRTT: void 0 }, this._lastConnectionQualityUpdate = -1, this._remoteStats = {}, this._timeIceConnected = -1, this._timeVideoUnmuted = -1, this._timeLastBwCapRemoved = -1, n.config.startBitrate && n.config.startBitrate > 0 && (h = n.config.startBitrate), e.on(r.CONNECTION_INTERRUPTED, function () { _this._updateLocalConnectionQuality(0), _this.eventEmitter.emit(o.LOCAL_STATS_UPDATED, _this._localStats), _this._broadcastLocalStats(); }), e.room.addListener(d.ICE_CONNECTION_STATE_CHANGED, function (e, t) { e.isP2P || "connected" !== t || (_this._timeIceConnected = window.performance.now()); }), e.on(r.ENDPOINT_MESSAGE_RECEIVED, function (e, t) { "stats" === t.type && _this._updateRemoteStats(e.getId(), t.values); }), e.on(r.ENDPOINT_STATS_RECEIVED, function (e, t) { _this._updateRemoteStats(e.getId(), t); }), e.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this)), e.on(r.TRACK_MUTE_CHANGED, function (e) { e.isVideoTrack() && (e.isMuted() ? _this._timeVideoUnmuted = -1 : _this._maybeUpdateUnmuteTime()); }), e.on(r.TRACK_ADDED, function (e) { e.isVideoTrack() && !e.isMuted() && _this._maybeUpdateUnmuteTime(); }), e.rtc.on(s.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, function (e) { _this._localStats.maxEnabledResolution = e.maxEnabledResolution; }), e.on(r.SERVER_REGION_CHANGED, function (e) { _this._localStats.serverRegion = e; }), e.on(r.PROPERTIES_CHANGED, function (e) { _this._localStats.bridgeCount = Number((e || {})["bridge-count"]); });
                    }
                    f.prototype._maybeUpdateUnmuteTime = function () { this._timeVideoUnmuted < 0 && (this._timeVideoUnmuted = window.performance.now()); };
                    f.prototype._calculateConnectionQuality = function (e, t, n) { var i = a[n]; var r, s = 100; if (this._localStats.packetLoss && (r = this._localStats.packetLoss.upload, t && (r *= .5)), t || !i || e === c.DESKTOP || this._timeIceConnected < 0 || this._timeVideoUnmuted < 0)
                        void 0 === r ? (u.error("Cannot calculate connection quality, unknown packet loss."), s = 100) : s = r <= 2 ? 100 : r <= 4 ? 70 : r <= 6 ? 50 : r <= 8 ? 30 : r <= 12 ? 10 : 0;
                    else {
                        var e_177 = this._conference.getActivePeerConnection(), t_147 = Boolean(e_177 && e_177.isSimulcastOn()), n_92 = e_177 && e_177.bandwidthLimiter && e_177.bandwidthLimiter.getBandwidthLimit("video");
                        !n_92 && p && (this._timeLastBwCapRemoved = window.performance.now(), h = p), p = n_92;
                        var o_16 = m(t_147, i, window.performance.now() - Math.max(this._timeVideoUnmuted, this._timeIceConnected, this._timeLastBwCapRemoved));
                        o_16 = Math.min(.9 * o_16, 2500), p && (o_16 = Math.min(o_16, p)), s = 100 * this._localStats.bitrate.upload / o_16, r && r >= 10 && (s = Math.min(s, 30));
                    } if (this._lastConnectionQualityUpdate > 0) {
                        var e_178 = 2, t_148 = this._localStats.connectionQuality, n_93 = (window.performance.now() - this._lastConnectionQualityUpdate) / 1e3;
                        s = Math.min(s, t_148 + n_93 * e_178);
                    } return Math.min(100, s); };
                    f.prototype._updateLocalConnectionQuality = function (e) { this._localStats.connectionQuality = e, this._lastConnectionQualityUpdate = window.performance.now(); };
                    f.prototype._broadcastLocalStats = function () { var e = { bitrate: this._localStats.bitrate, packetLoss: this._localStats.packetLoss, connectionQuality: this._localStats.connectionQuality, jvbRTT: this._localStats.jvbRTT, serverRegion: this._localStats.serverRegion, maxEnabledResolution: this._localStats.maxEnabledResolution, avgAudioLevels: this._localStats.localAvgAudioLevels }; try {
                        this._conference.sendEndpointStatsMessage(e);
                    }
                    catch (e) { } };
                    f.prototype._updateLocalStats = function (e, t) { if (!e.isP2P) {
                        var e_179 = t.transport && t.transport.length && t.transport[0].rtt;
                        this._localStats.jvbRTT = e_179 || void 0;
                    } if (e !== this._conference.getActivePeerConnection())
                        return; var n; var i = !this._conference.isConnectionInterrupted(), r = this._conference.getLocalVideoTrack(), s = r ? r.videoType : void 0, a = !r || r.isMuted(), c = r ? Math.min(r.resolution, r.maxEnabledResolution) : null; for (n in a || this._maybeUpdateUnmuteTime(), t)
                        t.hasOwnProperty(n) && (this._localStats[n] = t[n]); i && this._updateLocalConnectionQuality(this._calculateConnectionQuality(s, a, c)), this.eventEmitter.emit(o.LOCAL_STATS_UPDATED, this._localStats), this._broadcastLocalStats(); };
                    f.prototype._updateRemoteStats = function (e, t) { this._remoteStats[e] = { bitrate: t.bitrate, packetLoss: t.packetLoss, connectionQuality: t.connectionQuality, jvbRTT: t.jvbRTT, serverRegion: t.serverRegion, maxEnabledResolution: t.maxEnabledResolution, avgAudioLevels: t.avgAudioLevels }, this.eventEmitter.emit(o.REMOTE_STATS_UPDATED, e, this._remoteStats[e]); };
                    f.prototype.getStats = function () { return this._localStats; };
                    return f;
                }());  }).call(this, "modules/connectivity/ConnectionQuality.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return a; })); var i = n(4), r = n(16), s = n(0); var o = Object(i.getLogger)(e);
                var a = /** @class */ (function () {
                    function a(e) {
                        this._conference = e;
                    }
                    a.prototype._actOnIceFailed = function () { var _a = this._conference.options.config, e = _a.enableForcedReload, t = _a.enableIceRestart, n = void 0 !== t && !t, i = this._conference.room.supportsRestartByTerminate(), a = i && !t, c = this._conference.restartInProgress && e; if (o.info("ICE failed, enableForcedReload: " + e + ", enableIceRestart: " + t + ", restartInProgress: " + this._conference.restartInProgress + ", supports restart by terminate: " + i), n || !t && !i || c)
                        return o.info("ICE failed, but ICE restarts are disabled"), void this._conference.eventEmitter.emit(s.CONFERENCE_FAILED, r.ICE_FAILED); var d = this._conference.jvbJingleSession, u = d && d.getIceConnectionState(); d ? "connected" === u ? o.info("ICE connection restored - not sending ICE failed") : (o.info("Sending ICE failed - the connection did not recover, ICE state: " + u + ", use 'session-terminate': " + a), a ? this._conference.jvbJingleSession.terminate(function () { o.info("session-terminate for ice restart - done"); }, function (e) { o.error("session-terminate for ice restart - error: " + e.message); }, { reason: "connectivity-error", reasonDescription: "ICE FAILED", requestRestart: !0, sendSessionTerminate: !0 }) : this._conference.jvbJingleSession.sendIceFailedNotification()) : o.warn("Not sending ICE failed - no JVB connection"); };
                    a.prototype.start = function () {
                        var _this = this;
                        this._conference.xmpp.ping(65e3).then(function () { _this._canceled || (_this._iceFailedTimeout = window.setTimeout(function () { _this._iceFailedTimeout = void 0, _this._actOnIceFailed(); }, 2e3)); }, function (e) { o.error("PING error/timeout - not sending ICE failed", e); });
                    };
                    a.prototype.cancel = function () { this._canceled = !0, window.clearTimeout(this._iceFailedTimeout); };
                    return a;
                }());  }).call(this, "modules/connectivity/IceFailedHandling.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return d; }));
            var i = n(18), r = n.n(i), s = n(0), o = n(15), a = n(3), c = n(21);
            var d = /** @class */ (function (_super) {
                __extends(d, _super);
                function d(e) {
                    var _this = this;
                    _this = _super.call(this) || this, _this._conference = e, _this._timeoutTrigger = null, _this._hasAudioInput = null, a.a.supportsReceiverStats() || e.statistics.addAudioLevelListener(_this._audioLevel.bind(_this)), e.on(s.TRACK_ADDED, _this._trackAdded.bind(_this));
                    return _this;
                }
                d.prototype._clearTriggerTimeout = function () { clearTimeout(this._timeoutTrigger), this._timeoutTrigger = null; };
                d.prototype._handleAudioInputStateChange = function (e) { var t = 0 !== e; null !== this._hasAudioInput && this._hasAudioInput === t || (this._hasAudioInput = t, this.emit(c.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput)); };
                d.prototype._handleNoAudioInputDetection = function (e) {
                    var _this = this;
                    this._eventFired || (0 !== e || this._timeoutTrigger ? 0 !== e && this._timeoutTrigger && this._clearTriggerTimeout() : this._timeoutTrigger = setTimeout(function () { _this._eventFired = !0, _this.emit(c.NO_AUDIO_INPUT); }, 4e3));
                };
                d.prototype._audioLevel = function (e, t, n, i) { if (!i || !this._audioTrack)
                    return; var r = e.localSSRCs.get(this._audioTrack.rtcId); r && r.ssrcs.includes(t) && (this._handleAudioInputStateChange(n), this._handleNoAudioInputDetection(n)); };
                d.prototype._trackAdded = function (e) {
                    var _this = this;
                    e.isLocalAudioTrack() && (this._audioTrack = e, this._eventFired = !1, this._clearTriggerTimeout(), a.a.supportsReceiverStats() && (e.on(o.NO_AUDIO_INPUT, function (e) { _this._handleNoAudioInputDetection(e); }), e.on(o.TRACK_AUDIO_LEVEL_CHANGED, function (e) { _this._handleNoAudioInputDetection(e), _this._handleAudioInputStateChange(e); })));
                };
                return d;
            }(r.a));
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return o; }));
            var i = n(0), r = n(7), s = n.n(r);
            var o = /** @class */ (function () {
                function o(e) {
                    this.conference = e, e.addEventListener(i.TRACK_AUDIO_LEVEL_CHANGED, this._audioLevel.bind(this)), this.myUserID = this.conference.myUserId();
                }
                o.prototype._audioLevel = function (e, t) { !this.conference.isP2PActive() || t <= .6 || e === this.myUserID && this.conference.getLocalAudioTrack().isMuted() || this.conference.rtc.eventEmitter.emit(s.a.DOMINANT_SPEAKER_CHANGED, e); };
                return o;
            }());
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return o; }));
            var i = n(18), r = n(29), s = n(21);
            var o = /** @class */ (function (_super) {
                __extends(o, _super);
                function o() {
                    var _this = this;
                    _this = _super.call(this) || this, _this._processing = !1, _this._scoreArray = [], _this._audioLvlArray = [], _this._active = !1, _this._calculateNoisyScore = _this._calculateNoisyScore.bind(_this);
                    return _this;
                }
                o.prototype._calculateNoisyScore = function () { var e = Object(r.b)(this._scoreArray), t = Object(r.b)(this._audioLvlArray); e < .2 && t > .04 && (this.emit(s.VAD_NOISY_DEVICE), this._setActiveState(!1)), this.reset(); };
                o.prototype._recordValues = function (e, t) { this._scoreArray.push(e), this._audioLvlArray.push(t); };
                o.prototype._setActiveState = function (e) { this._active = e, this.emit(s.DETECTOR_STATE_CHANGE, this._active); };
                o.prototype.changeMuteState = function (e) { this._setActiveState(!e), this.reset(); };
                o.prototype.isActive = function () { return this._active; };
                o.prototype.reset = function () { this._processing = !1, this._scoreArray = [], this._audioLvlArray = [], clearTimeout(this._processTimeout); };
                o.prototype.processVADScore = function (e) { if (this._active)
                    if (this._processing) {
                        var t_149 = Object(r.c)(e.pcmData);
                        this._recordValues(e.score, Object(r.b)(t_149));
                    }
                    else if (e.score < .2) {
                        var t_150 = Object(r.c)(e.pcmData), n_94 = Object(r.b)(t_150);
                        n_94 > .02 && (this._processing = !0, this._recordValues(e.score, n_94), this._processTimeout = setTimeout(this._calculateNoisyScore, 1500));
                    } };
                return o;
            }(i.EventEmitter));
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return o; }));
            var i = n(18), r = n(29), s = n(21);
            var o = /** @class */ (function (_super) {
                __extends(o, _super);
                function o() {
                    var _this = this;
                    _this = _super.call(this) || this, _this._processing = !1, _this._scoreArray = [], _this._active = !1, _this._calculateVADScore = _this._calculateVADScore.bind(_this);
                    return _this;
                }
                o.prototype._calculateVADScore = function () { Object(r.b)(this._scoreArray) > .6 && (this.emit(s.VAD_TALK_WHILE_MUTED), this._setActiveState(!1)), this.reset(); };
                o.prototype._setActiveState = function (e) { this._active = e, this.emit(s.DETECTOR_STATE_CHANGE, this._active); };
                o.prototype.changeMuteState = function (e) { this._setActiveState(e), this.reset(); };
                o.prototype.isActive = function () { return this._active; };
                o.prototype.processVADScore = function (e) { this._active && (this._processing ? this._scoreArray.push(e.score) : e.score > .9 && (this._processing = !0, this._scoreArray.push(e.score), this._processTimeout = setTimeout(this._calculateVADScore, 700))); };
                o.prototype.reset = function () { this._processing = !1, this._scoreArray = [], clearTimeout(this._processTimeout); };
                return o;
            }(i.EventEmitter));
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return u; })); var i = n(4), r = n(0), s = n(67), o = n(8), a = n(6); var c = Object(i.getLogger)(e);
                var d = /** @class */ (function () {
                    function d(e, t) {
                        this.participant = e, this.e2eping = t, this.id = e.getId(), this.requests = {}, this.lastRequestId = 1, this.clearIntervals = this.clearIntervals.bind(this), this.sendRequest = this.sendRequest.bind(this), this.handleResponse = this.handleResponse.bind(this), this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this), this.sendAnalytics = this.sendAnalytics.bind(this), t.isDataChannelOpen && this.sendRequest(), this.pingInterval = window.setInterval(this.sendRequest, t.pingIntervalMs), this.analyticsInterval = window.setTimeout(this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);
                    }
                    d.prototype.clearIntervals = function () { this.pingInterval && window.clearInterval(this.pingInterval), this.analyticsInterval && window.clearInterval(this.analyticsInterval); };
                    d.prototype.sendRequest = function () { var e = this.lastRequestId++, t = { type: "e2e-ping-request", id: e }; this.e2eping.sendMessage(t, this.id), this.requests[e] = { id: e, timeSent: window.performance.now() }; };
                    d.prototype.handleResponse = function (e) { var t = this.requests[e.id]; t && (t.rtt = window.performance.now() - t.timeSent, this.e2eping.eventEmitter.emit(s.E2E_RTT_CHANGED, this.participant, t.rtt)), this.maybeSendAnalytics(); };
                    d.prototype.maybeSendAnalytics = function () { var e = window.performance.now(); var t, n, i = 1 / 0; for (n in this.requests)
                        this.requests.hasOwnProperty(n) && (t = this.requests[n], t.timeSent < e - this.e2eping.analyticsIntervalMs ? delete this.requests[n] : t.rtt && (i = Math.min(i, t.rtt))); i < 1 / 0 && this.sendAnalytics(i); };
                    d.prototype.sendAnalytics = function (e) { a.a.sendAnalytics(Object(o.D)(this.id, this.participant.getProperty("region"), e)); };
                    return d;
                }()); 
                var u = /** @class */ (function () {
                    function u(e, t, n) {
                        this.conference = e, this.eventEmitter = e.eventEmitter, this.sendMessage = n, this.pingIntervalMs = 1e4, this.analyticsIntervalMs = 6e4, this.participants = {}, this.isDataChannelOpen = !1, t && t.e2eping && ("number" == typeof t.e2eping.pingInterval && (this.pingIntervalMs = t.e2eping.pingInterval), "number" == typeof t.e2eping.analyticsInterval && (this.analyticsIntervalMs = t.e2eping.analyticsInterval), this.analyticsIntervalMs > 0 && this.analyticsIntervalMs < this.pingIntervalMs && (this.analyticsIntervalMs = this.pingIntervalMs)), c.info("Initializing e2e ping; pingInterval=" + this.pingIntervalMs + ", analyticsInterval=" + this.analyticsIntervalMs + "."), this.participantJoined = this.participantJoined.bind(this), e.on(r.USER_JOINED, this.participantJoined), this.participantLeft = this.participantLeft.bind(this), e.on(r.USER_LEFT, this.participantLeft), this.messageReceived = this.messageReceived.bind(this), e.on(r.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived), this.dataChannelOpened = this.dataChannelOpened.bind(this), e.on(r.DATA_CHANNEL_OPENED, this.dataChannelOpened);
                    }
                    u.prototype.dataChannelOpened = function () { this.isDataChannelOpen = !0; for (var e_180 in this.participants)
                        if (this.participants.hasOwnProperty(e_180)) {
                            var t_151 = this.participants[e_180];
                            window.setTimeout(t_151.sendRequest, 200);
                        } };
                    u.prototype.messageReceived = function (e, t) { "e2e-ping-request" === t.type ? this.handleRequest(e.getId(), t) : "e2e-ping-response" === t.type && this.handleResponse(e.getId(), t); };
                    u.prototype.participantJoined = function (e, t) { this.pingIntervalMs <= 0 || (this.participants[e] && (c.info("Participant wrapper already exists for " + e + ". Clearing."), this.participants[e].clearIntervals(), delete this.participants[e]), this.participants[e] = new d(t, this)); };
                    u.prototype.participantLeft = function (e) { this.pingIntervalMs <= 0 || this.participants[e] && (this.participants[e].clearIntervals(), delete this.participants[e]); };
                    u.prototype.handleRequest = function (e, t) { if (t && t.id) {
                        var n_95 = { type: "e2e-ping-response", id: t.id };
                        this.sendMessage(n_95, e);
                    }
                    else
                        c.info("Received an invalid e2e ping request from " + e + "."); };
                    u.prototype.handleResponse = function (e, t) { var n = this.participants[e]; n && n.handleResponse(t); };
                    u.prototype.stop = function () { c.info("Stopping e2eping"), this.conference.off(r.USER_JOINED, this.participantJoined), this.conference.off(r.USER_LEFT, this.participantLeft), this.conference.off(r.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived), this.conference.off(r.DATA_CHANNEL_OPENED, this.dataChannelOpened); for (var e_181 in this.participants)
                        this.participants.hasOwnProperty(e_181) && this.participants[e_181].clearIntervals(); this.participants = {}; };
                    return u;
                }());  }).call(this, "modules/e2eping/e2eping.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return o; })); var i = n(4), r = n(0); var s = Object(i.getLogger)(e);
                var o = /** @class */ (function () {
                    function o(e) {
                        var _this = this;
                        this._conference = e, this._jvb121 = !0, this._conference.addEventListener(r.USER_JOINED, function () { return _this.evaluateStatus(); }), this._conference.addEventListener(r.USER_LEFT, function () { return _this.evaluateStatus(); }), this._conference.addEventListener(r.P2P_STATUS, function () { return _this.evaluateStatus(); });
                    }
                    o.prototype.evaluateStatus = function () { var e = this._jvb121, t = !this._conference.isP2PActive() && this._conference.getParticipantCount() <= 2; e !== t && (this._jvb121 = t, s.debug("JVB121 status " + e + " => " + t), this._conference.eventEmitter.emit(r.JVB121_STATUS, e, t)); };
                    return o;
                }());  }).call(this, "modules/event/Jvb121EventGenerator.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return d; })); var i = n(4), r = n(33), s = n.n(r), o = n(0); var a = Object(i.getLogger)(e);
                var c = /** @class */ (function () {
                    function c() {
                        this._defaultConstraints = { maxHeight: 180 }, this._lastN = -1, this._maxFrameHeight = 2160, this._selectedEndpoints = [], this._receiverVideoConstraints = { constraints: {}, defaultConstraints: this.defaultConstraints, lastN: this._lastN, onStageEndpoints: [], selectedEndpoints: this._selectedEndpoints };
                    }
                    Object.defineProperty(c.prototype, "constraints", {
                        get: function () { return this._receiverVideoConstraints.lastN = this._lastN, this._selectedEndpoints.length ? (this._receiverVideoConstraints.constraints = {}, this._selectedEndpoints.length > 1 ? (this._receiverVideoConstraints.defaultConstraints = { maxHeight: this._maxFrameHeight }, this._receiverVideoConstraints.onStageEndpoints = [], this._receiverVideoConstraints.selectedEndpoints = []) : (this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = { maxHeight: this._maxFrameHeight }, this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints, this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints, this._receiverVideoConstraints.selectedEndpoints = []), this._receiverVideoConstraints) : this._receiverVideoConstraints; },
                        enumerable: false,
                        configurable: true
                    });
                    c.prototype.updateLastN = function (e) { var t = this._lastN !== e; return t && (this._lastN = e, a.debug("Updating ReceiverVideoConstraints lastN(" + e + ")")), t; };
                    c.prototype.updateReceiveResolution = function (e) { var t = this._maxFrameHeight !== e; return t && (this._maxFrameHeight = e, a.debug("Updating receive maxFrameHeight: " + e)), t; };
                    c.prototype.updateReceiverVideoConstraints = function (e) { var t = !s()(this._receiverVideoConstraints, e); return t && (this._receiverVideoConstraints = e, a.debug("Updating ReceiverVideoConstraints " + JSON.stringify(e))), t; };
                    c.prototype.updateSelectedEndpoints = function (e) { a.debug("Updating selected endpoints: " + JSON.stringify(e)), this._selectedEndpoints = e; };
                    return c;
                }()); 
                var d = /** @class */ (function () {
                    function d(e, t) {
                        var _this = this;
                        var n, i;
                        this._conference = e, this._rtc = t, this._receiverVideoConstraints = (null === (n = e.options) || void 0 === n || null === (i = n.config) || void 0 === i ? void 0 : i.useNewBandwidthAllocationStrategy) ? new c : void 0, this._lastN = -1, this._maxFrameHeight = 2160, this._selectedEndpoints = [], this._conference.on(o._MEDIA_SESSION_STARTED, function (e) { return _this._onMediaSessionStarted(e); });
                    }
                    d.prototype._onMediaSessionStarted = function (e) { this._maxFrameHeight && e.setReceiverVideoConstraint(this._maxFrameHeight); };
                    d.prototype.getLastN = function () { return this._lastN; };
                    d.prototype.selectEndpoints = function (e) {
                        var _this = this;
                        if (this._selectedEndpoints = e, this._receiverVideoConstraints) {
                            var t_152 = e.filter(function (e) { return e !== _this._conference.myUserId(); }), n_96 = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));
                            t_152.length && this._receiverVideoConstraints.updateSelectedEndpoints(t_152);
                            var i_77 = this._receiverVideoConstraints.constraints;
                            s()(i_77, n_96) || this._rtc.setNewReceiverVideoConstraints(i_77);
                        }
                        else
                            this._rtc.selectEndpoints(e);
                    };
                    d.prototype.setLastN = function (e) { if (this._lastN !== e) {
                        if (this._lastN = e, this._receiverVideoConstraints) {
                            return void (this._receiverVideoConstraints.updateLastN(e) && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints));
                        }
                        this._rtc.setLastN(e);
                    } };
                    d.prototype.setPreferredReceiveMaxFrameHeight = function (e) { this._maxFrameHeight = e; for (var _i = 0, _a = this._conference._getMediaSessions(); _i < _a.length; _i++) {
                        var t_153 = _a[_i];
                        if (t_153.isP2P || !this._receiverVideoConstraints)
                            e && t_153.setReceiverVideoConstraint(e);
                        else {
                            this._receiverVideoConstraints.updateReceiveResolution(e) && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);
                        }
                    } };
                    d.prototype.setReceiverConstraints = function (e) { this._receiverVideoConstraints || (this._receiverVideoConstraints = new c); this._receiverVideoConstraints.updateReceiverVideoConstraints(e) && this._rtc.setNewReceiverVideoConstraints(e); };
                    return d;
                }());  }).call(this, "modules/qualitycontrol/ReceiveVideoController.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return a; }));
            var i = n(0), r = n(7), s = n.n(r), o = n(63);
            var a = /** @class */ (function () {
                function a(e, t) {
                    var _this = this;
                    var n, r;
                    this.conference = e, this.layerSuspensionEnabled = null === (n = e.options) || void 0 === n || null === (r = n.config) || void 0 === r ? void 0 : r.enableLayerSuspension, this.rtc = t, this.conference.on(i._MEDIA_SESSION_STARTED, function (e) { return _this._onMediaSessionStarted(e); }), this.conference.on(i._MEDIA_SESSION_ACTIVE_CHANGED, function () { return _this._propagateSendMaxFrameHeight(); }), this.rtc.on(s.a.SENDER_VIDEO_CONSTRAINTS_CHANGED, function (e) { var t; (null === (t = _this._senderVideoConstraints) || void 0 === t ? void 0 : t.idealHeight) !== e.idealHeight && (_this._senderVideoConstraints = e, _this._propagateSendMaxFrameHeight()); });
                }
                a.prototype._onMediaSessionStarted = function (e) {
                    var _this = this;
                    e.addListener(o.a.REMOTE_VIDEO_CONSTRAINTS_CHANGED, function (e) { e === _this.conference._getActiveMediaSession() && _this._propagateSendMaxFrameHeight(); }), e.setSenderVideoDegradationPreference(), e.setSenderMaxBitrates();
                };
                a.prototype._propagateSendMaxFrameHeight = function () { var e = this.selectSendMaxFrameHeight(), t = []; if (e >= 0)
                    for (var _i = 0, _a = this.conference._getMediaSessions(); _i < _a.length; _i++) {
                        var n_97 = _a[_i];
                        t.push(n_97.setSenderVideoConstraint(e));
                    } return Promise.all(t); };
                a.prototype.selectSendMaxFrameHeight = function () { var e; var t = this.conference._getActiveMediaSession(), n = t ? t.isP2P ? t.getRemoteRecvMaxFrameHeight() : this.layerSuspensionEnabled ? null === (e = this._senderVideoConstraints) || void 0 === e ? void 0 : e.idealHeight : void 0 : void 0; return this.preferredSendMaxFrameHeight >= 0 && n >= 0 ? Math.min(this.preferredSendMaxFrameHeight, n) : n >= 0 ? n : this.preferredSendMaxFrameHeight; };
                a.prototype.setPreferredSendMaxFrameHeight = function (e) { return this.preferredSendMaxFrameHeight = e, this._propagateSendMaxFrameHeight(); };
                return a;
            }());
        }, function (e, t, n) {
            "use strict";
            (function (e) { var i = n(4), r = n(1), s = n.n(r), o = n(77), a = n(54); function c(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var d = Object(i.getLogger)(e); t.a = /** @class */ (function () {
                function a(e) {
                    this._sessions = {}, this._chatRoom = e, this.onPresence = this.onPresence.bind(this), this._chatRoom.eventEmitter.addListener(s.a.PRESENCE_RECEIVED, this.onPresence);
                }
                a.prototype.getSession = function (e) { return this._sessions[e]; };
                a.prototype.onPresence = function (_a) {
                    var e = _a.fromHiddenDomain, t = _a.presence;
                    a.a.isFromFocus(t) ? this._handleFocusPresence(t) : e && this._handleJibriPresence(t);
                };
                a.prototype.startRecording = function (e) {
                    var _this = this;
                    var t = new o.a(function (e) { for (var t = 1; t < arguments.length; t++) {
                        var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                        "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { c(e, t, n[t]); }));
                    } return e; }({}, e, { connection: this._chatRoom.connection }));
                    return t.start({ appData: e.appData, broadcastId: e.broadcastId, focusMucJid: this._chatRoom.focusMucJid, streamId: e.streamId }).then(function () { return (_this.getSession(t.getID()) || (_this._addSession(t), _this._emitSessionUpdate(t)), t); }).catch(function (e) { return (_this._emitSessionUpdate(t), Promise.reject(e)); });
                };
                a.prototype.stopRecording = function (e) { var t = this.getSession(e); return t ? t.stop({ focusMucJid: this._chatRoom.focusMucJid }) : Promise.reject(new Error("Could not find session")); };
                a.prototype._addSession = function (e) { this._sessions[e.getID()] = e; };
                a.prototype._createSession = function (e, t, n) { var i = new o.a({ connection: this._chatRoom.connection, focusMucJid: this._chatRoom.focusMucJid, mode: n, sessionID: e, status: t }); return this._addSession(i), i; };
                a.prototype._emitSessionUpdate = function (e, t) { this._chatRoom.eventEmitter.emit(s.a.RECORDER_STATE_CHANGED, e, t); };
                a.prototype._handleFocusPresence = function (e) { var t = a.a.getFocusRecordingUpdate(e); if (!t)
                    return; var n = t.error, i = t.initiator, r = t.recordingMode, s = t.sessionID, o = t.status; var c = this.getSession(s); c || "off" !== o ? c && c.getStatus() === o && c.getError() === n ? d.warn("Ignoring duplicate presence update: ", JSON.stringify(t)) : (c || (c = this._createSession(s, o, r)), c.setStatus(o), n && c.setError(n), this._emitSessionUpdate(c, i)) : d.warn("Ignoring recording presence update", "Received a new session with status off."); };
                a.prototype._handleJibriPresence = function (e) { var _a = a.a.getHiddenDomainUpdate(e), t = _a.liveStreamViewURL, n = _a.mode, i = _a.sessionID; if (!i)
                    return void d.warn("Ignoring potential jibri presence due to no session id."); var r = this.getSession(i); r || (r = this._createSession(i, "", n)), r.setLiveStreamViewURL(t), this._emitSessionUpdate(r); };
                return a;
            }()); }).call(this, "modules/recording/RecordingManager.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return u; })); var i = n(4), r = n(0), s = n(5), o = n(32), a = n(8), c = n(6); var d = Object(i.getLogger)(e);
                var u = /** @class */ (function () {
                    function u(e) {
                        this._conference = e, this._localAudioLevelCache = {}, this._reportedParticipants = [], this._audioProblemCandidates = {}, this._numberOfRemoteAudioLevelsReceived = {}, this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this), this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this), this._clearUserData = this._clearUserData.bind(this), this._conference.on(o.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived), this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport), this._conference.on(r.USER_LEFT, this._clearUserData);
                    }
                    u.prototype._onRemoteAudioLevelReceived = function (e, _a) {
                        var t = _a.avgAudioLevels;
                        var n = this._numberOfRemoteAudioLevelsReceived[e] + 1 || 0;
                        if (this._numberOfRemoteAudioLevelsReceived[e] = n, -1 !== this._reportedParticipants.indexOf(e) || e in this._audioProblemCandidates || t <= 0 || n < 3)
                            return;
                        var i = this._conference.getParticipantById(e);
                        if (i) {
                            if (i.getTracksByMediaType(s.a).length > 0 && i.isAudioMuted())
                                return;
                        }
                        var r = this._localAudioLevelCache[e];
                        Array.isArray(r) && !r.every(function (e) { return 0 === e; }) || (this._audioProblemCandidates[e] = { remoteAudioLevels: t, localAudioLevels: [] });
                    };
                    u.prototype._onLocalAudioLevelsReport = function (e, _a) {
                        var _this = this;
                        var t = _a.avgAudioLevels;
                        e === this._conference.getActivePeerConnection() && (Object.keys(t).forEach(function (e) { if (-1 !== _this._reportedParticipants.indexOf(e))
                            return; var n = _this._localAudioLevelCache[e]; Array.isArray(n) ? n.length >= 2 && n.shift() : _this._localAudioLevelCache[e] = [], _this._localAudioLevelCache[e].push(t[e]); }), Object.keys(this._audioProblemCandidates).forEach(function (e) { var _a = _this._audioProblemCandidates[e], n = _a.localAudioLevels, i = _a.remoteAudioLevels; if (n.push(t[e]), 2 === n.length) {
                            if (n.every(function (e) { return void 0 === e || 0 === e; })) {
                                var t_154 = JSON.stringify(n);
                                c.a.sendAnalytics(Object(a.x)(e, t_154, i)), d.warn("A potential problem is detected with the audio output for participant " + e + ", local audio levels: " + t_154 + ", remote audio levels: " + i), _this._reportedParticipants.push(e), _this._clearUserData(e);
                            }
                            delete _this._audioProblemCandidates[e];
                        } }));
                    };
                    u.prototype._clearUserData = function (e) { delete this._localAudioLevelCache[e]; };
                    u.prototype.dispose = function () { this._conference.off(o.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived), this._conference.off(r.USER_LEFT, this._clearUserData), this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport), this._localAudioLevelCache = void 0, this._audioProblemCandidates = void 0, this._reportedParticipants = void 0, this._numberOfRemoteAudioLevelsReceived = void 0, this._conference = void 0; };
                    return u;
                }());  }).call(this, "modules/statistics/AudioOutputProblemDetector.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return g; })); var i = n(4), r = n(33), s = n.n(r), o = n(0), a = n(5), c = n(12), d = n(32), u = n(8), l = n(3), h = n(6); var p = Object(i.getLogger)(e);
                var m = /** @class */ (function () {
                    function m(e) {
                        this.name = e, this.count = 0, this.sum = 0, this.samples = [];
                    }
                    m.prototype.addNext = function (e) { "number" != typeof e ? p.error(this.name + " - invalid value for idx: " + this.count, e) : isNaN(e) || (this.sum += e, this.samples.push(e), this.count += 1); };
                    m.prototype.calculate = function () { return this.sum / this.count; };
                    m.prototype.appendReport = function (e) { e[this.name + "_avg"] = this.calculate(), e[this.name + "_samples"] = JSON.stringify(this.samples); };
                    m.prototype.reset = function () { this.samples = [], this.sum = 0, this.count = 0; };
                    return m;
                }()); 
                var f = /** @class */ (function () {
                    function f(e, t, n) {
                        var _this = this;
                        this.isP2P = t, this._n = n, this._sampleIdx = 0, this._avgRTT = new m("rtt"), this._avgRemoteRTTMap = new Map, this._avgRtpStatsReporter = e, this._avgEnd2EndRTT = void 0, this._onConnectionStats = function (e, t) { _this.isP2P === e.isP2P && _this._calculateAvgStats(t); };
                        var i = e._conference;
                        i.statistics.addConnectionStatsListener(this._onConnectionStats), this.isP2P || (this._onUserLeft = function (e) { return _this._avgRemoteRTTMap.delete(e); }, i.on(o.USER_LEFT, this._onUserLeft), this._onRemoteStatsUpdated = function (e, t) { return _this._processRemoteStats(e, t); }, i.on(d.REMOTE_STATS_UPDATED, this._onRemoteStatsUpdated));
                    }
                    f.prototype._calculateAvgStats = function (e) { if (e) {
                        if (l.a.supportsRTTStatistics() && e.transport && e.transport.length && this._avgRTT.addNext(e.transport[0].rtt), this._sampleIdx += 1, this._sampleIdx >= this._n) {
                            if (l.a.supportsRTTStatistics()) {
                                var t_155 = this._avgRtpStatsReporter._conference, n_98 = { p2p: this.isP2P, conference_size: t_155.getParticipantCount() };
                                if (e.transport && e.transport.length && Object.assign(n_98, { local_candidate_type: e.transport[0].localCandidateType, remote_candidate_type: e.transport[0].remoteCandidateType, transport_type: e.transport[0].type }), this._avgRTT.appendReport(n_98), this.isP2P) {
                                    var e_182 = this._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;
                                    isNaN(e_182) || (n_98.rtt_diff = this._avgRTT.calculate() - e_182);
                                }
                                else {
                                    var e_183 = this._calculateAvgRemoteRTT(), t_156 = this._avgRTT.calculate();
                                    this._avgEnd2EndRTT = t_156 + e_183, isNaN(t_156) || isNaN(e_183) || (n_98.end2end_rtt_avg = this._avgEnd2EndRTT);
                                }
                                h.a.sendAnalytics(Object(u.L)(n_98));
                            }
                            this._resetAvgStats();
                        }
                    }
                    else
                        p.error("No stats"); };
                    f.prototype._calculateAvgRemoteRTT = function () { var e = 0, t = 0; for (var _i = 0, _a = this._avgRemoteRTTMap.values(); _i < _a.length; _i++) {
                        var n_99 = _a[_i];
                        var i_78 = n_99.calculate();
                        isNaN(i_78) || (t += i_78, e += 1, n_99.reset());
                    } return t / e; };
                    f.prototype._processRemoteStats = function (e, t) { var n = "number" == typeof t.jvbRTT; var i = this._avgRemoteRTTMap.get(e); !i && n && (i = new m(e + "_stat_rtt"), this._avgRemoteRTTMap.set(e, i)), n ? i.addNext(t.jvbRTT) : i && this._avgRemoteRTTMap.delete(e); };
                    f.prototype._resetAvgStats = function () { this._avgRTT.reset(), this._avgRemoteRTTMap && this._avgRemoteRTTMap.clear(), this._sampleIdx = 0; };
                    f.prototype.dispose = function () { var e = this._avgRtpStatsReporter._conference; e.statistics.removeConnectionStatsListener(this._onConnectionStats), this.isP2P || (e.off(d.REMOTE_STATS_UPDATED, this._onRemoteStatsUpdated), e.off(o.USER_LEFT, this._onUserLeft)); };
                    return f;
                }()); 
                var g = /** @class */ (function () {
                    function g(e, t) {
                        var _this = this;
                        this._n = t, t > 0 ? (p.info("Avg RTP stats will be calculated every " + t + " samples"), this._sampleIdx = 0, this._conference = e, this._avgAudioBitrateUp = new m("bitrate_audio_upload"), this._avgAudioBitrateDown = new m("bitrate_audio_download"), this._avgVideoBitrateUp = new m("bitrate_video_upload"), this._avgVideoBitrateDown = new m("bitrate_video_download"), this._avgBandwidthUp = new m("bandwidth_upload"), this._avgBandwidthDown = new m("bandwidth_download"), this._avgPacketLossTotal = new m("packet_loss_total"), this._avgPacketLossUp = new m("packet_loss_upload"), this._avgPacketLossDown = new m("packet_loss_download"), this._avgRemoteFPS = new m("framerate_remote"), this._avgRemoteScreenFPS = new m("framerate_screen_remote"), this._avgLocalFPS = new m("framerate_local"), this._avgLocalScreenFPS = new m("framerate_screen_local"), this._avgRemoteCameraPixels = new m("pixels_remote"), this._avgRemoteScreenPixels = new m("pixels_screen_remote"), this._avgLocalCameraPixels = new m("pixels_local"), this._avgLocalScreenPixels = new m("pixels_screen_local"), this._avgCQ = new m("connection_quality"), this._cachedTransportStats = void 0, this._onLocalStatsUpdated = function (e) { _this._calculateAvgStats(e), _this._maybeSendTransportAnalyticsEvent(e); }, e.on(d.LOCAL_STATS_UPDATED, this._onLocalStatsUpdated), this._onP2PStatusChanged = function () { p.debug("Resetting average stats calculation"), _this._resetAvgStats(), _this.jvbStatsMonitor._resetAvgStats(), _this.p2pStatsMonitor._resetAvgStats(); }, e.on(o.P2P_STATUS, this._onP2PStatusChanged), this._onJvb121StatusChanged = function (e, t) { !0 === t && (p.info("Resetting JVB avg RTP stats"), _this._resetAvgJvbStats()); }, e.on(o.JVB121_STATUS, this._onJvb121StatusChanged), this.jvbStatsMonitor = new f(this, !1, t), this.p2pStatsMonitor = new f(this, !0, t)) : p.info("Avg RTP stats reports are disabled.");
                    }
                    g.prototype._calculateAvgStats = function (e) { if (!e)
                        return void p.error("No stats"); var t = this._conference.isP2PActive(), n = this._conference.getParticipantCount(); if (!t && n < 2)
                        return; var i = e.bitrate, r = e.bandwidth, s = e.packetLoss, o = e.framerate, a = e.resolution; if (i)
                        if (r)
                            if (s)
                                if (o)
                                    if (a) {
                                        if (this._avgAudioBitrateUp.addNext(i.audio.upload), this._avgAudioBitrateDown.addNext(i.audio.download), this._avgVideoBitrateUp.addNext(i.video.upload), this._avgVideoBitrateDown.addNext(i.video.download), l.a.supportsBandwidthStatistics() && (this._avgBandwidthUp.addNext(r.upload), this._avgBandwidthDown.addNext(r.download)), this._avgPacketLossUp.addNext(s.upload), this._avgPacketLossDown.addNext(s.download), this._avgPacketLossTotal.addNext(s.total), this._avgCQ.addNext(e.connectionQuality), o && (this._avgRemoteFPS.addNext(this._calculateAvgVideoFps(o, !1, c.CAMERA)), this._avgRemoteScreenFPS.addNext(this._calculateAvgVideoFps(o, !1, c.DESKTOP)), this._avgLocalFPS.addNext(this._calculateAvgVideoFps(o, !0, c.CAMERA)), this._avgLocalScreenFPS.addNext(this._calculateAvgVideoFps(o, !0, c.DESKTOP))), a && (this._avgRemoteCameraPixels.addNext(this._calculateAvgVideoPixels(a, !1, c.CAMERA)), this._avgRemoteScreenPixels.addNext(this._calculateAvgVideoPixels(a, !1, c.DESKTOP)), this._avgLocalCameraPixels.addNext(this._calculateAvgVideoPixels(a, !0, c.CAMERA)), this._avgLocalScreenPixels.addNext(this._calculateAvgVideoPixels(a, !0, c.DESKTOP))), this._sampleIdx += 1, this._sampleIdx >= this._n) {
                                            var i_79 = { p2p: t, conference_size: n };
                                            e.transport && e.transport.length && Object.assign(i_79, { local_candidate_type: e.transport[0].localCandidateType, remote_candidate_type: e.transport[0].remoteCandidateType, transport_type: e.transport[0].type }), this._avgAudioBitrateUp.appendReport(i_79), this._avgAudioBitrateDown.appendReport(i_79), this._avgVideoBitrateUp.appendReport(i_79), this._avgVideoBitrateDown.appendReport(i_79), l.a.supportsBandwidthStatistics() && (this._avgBandwidthUp.appendReport(i_79), this._avgBandwidthDown.appendReport(i_79)), this._avgPacketLossUp.appendReport(i_79), this._avgPacketLossDown.appendReport(i_79), this._avgPacketLossTotal.appendReport(i_79), this._avgRemoteFPS.appendReport(i_79), isNaN(this._avgRemoteScreenFPS.calculate()) || this._avgRemoteScreenFPS.appendReport(i_79), this._avgLocalFPS.appendReport(i_79), isNaN(this._avgLocalScreenFPS.calculate()) || this._avgLocalScreenFPS.appendReport(i_79), this._avgRemoteCameraPixels.appendReport(i_79), isNaN(this._avgRemoteScreenPixels.calculate()) || this._avgRemoteScreenPixels.appendReport(i_79), this._avgLocalCameraPixels.appendReport(i_79), isNaN(this._avgLocalScreenPixels.calculate()) || this._avgLocalScreenPixels.appendReport(i_79), this._avgCQ.appendReport(i_79), h.a.sendAnalytics(Object(u.L)(i_79)), this._resetAvgStats();
                                        }
                                    }
                                    else
                                        p.error("No resolution");
                                else
                                    p.error('No "framerate"');
                            else
                                p.error('No "packetloss"');
                        else
                            p.error('No "bandwidth"');
                    else
                        p.error('No "bitrate"'); };
                    g.prototype._calculateAvgVideoPixels = function (e, t, n) { var i = 0, r = 0; var s = this._conference.myUserId(); for (var _i = 0, _a = Object.keys(e); _i < _a.length; _i++) {
                        var o_17 = _a[_i];
                        if (t ? o_17 === s : o_17 !== s) {
                            var s_24 = t ? null : this._conference.getParticipantById(o_17), a_11 = e[o_17];
                            if ((t || s_24) && a_11) {
                                var e_184 = this._calculatePeerAvgVideoPixels(a_11, s_24, n);
                                isNaN(e_184) || (i += e_184, r += 1);
                            }
                        }
                    } return i / r; };
                    g.prototype._calculatePeerAvgVideoPixels = function (e, t, n) { var i = Object.keys(e).map(function (e) { return Number(e); }), r = null; var s = this._conference.getActivePeerConnection(); t ? (r = t.getTracksByMediaType(a.c), r && (i = i.filter(function (e) { return r.find(function (t) { return !t.isMuted() && t.getSSRC() === e && t.videoType === n; }); }))) : (r = this._conference.getLocalTracks(a.c), i = i.filter(function (e) { return r.find(function (t) { return !t.isMuted() && s.getLocalSSRC(t) === e && t.videoType === n; }); })); var o = 0, c = 0; for (var _i = 0, i_80 = i; _i < i_80.length; _i++) {
                        var t_157 = i_80[_i];
                        var n_100 = Number(e[t_157].height) * Number(e[t_157].width);
                        !isNaN(n_100) && n_100 > 0 && (o += n_100, c += 1);
                    } return o / c; };
                    g.prototype._calculateAvgVideoFps = function (e, t, n) { var i = 0, r = 0; var s = this._conference.myUserId(); for (var _i = 0, _a = Object.keys(e); _i < _a.length; _i++) {
                        var o_18 = _a[_i];
                        if (t ? o_18 === s : o_18 !== s) {
                            var s_25 = t ? null : this._conference.getParticipantById(o_18), a_12 = e[o_18];
                            if ((t || s_25) && a_12) {
                                var e_185 = this._calculatePeerAvgVideoFps(a_12, s_25, n);
                                isNaN(e_185) || (i += e_185, r += 1);
                            }
                        }
                    } return i / r; };
                    g.prototype._calculatePeerAvgVideoFps = function (e, t, n) { var i = Object.keys(e).map(function (e) { return Number(e); }), r = null; var s = this._conference.getActivePeerConnection(); t ? (r = t.getTracksByMediaType(a.c), r && (i = i.filter(function (e) { return r.find(function (t) { return !t.isMuted() && t.getSSRC() === e && t.videoType === n; }); }))) : (r = this._conference.getLocalTracks(a.c), i = i.filter(function (e) { return r.find(function (t) { return !t.isMuted() && s.getLocalSSRC(t) === e && t.videoType === n; }); })); var o = 0, c = 0; for (var _i = 0, i_81 = i; _i < i_81.length; _i++) {
                        var t_158 = i_81[_i];
                        var n_101 = Number(e[t_158]);
                        !isNaN(n_101) && n_101 > 0 && (o += n_101, c += 1);
                    } return o / c; };
                    g.prototype._maybeSendTransportAnalyticsEvent = function (e) { if (!e || !e.transport || !e.transport.length)
                        return; var t = { p2p: e.transport[0].p2p, local_candidate_type: e.transport[0].localCandidateType, remote_candidate_type: e.transport[0].remoteCandidateType, transport_type: e.transport[0].type }; this._cachedTransportStats && s()(t, this._cachedTransportStats) || (this._cachedTransportStats = t, h.a.sendAnalytics(Object(u.M)(t))); };
                    g.prototype._resetAvgJvbStats = function () { this._resetAvgStats(), this.jvbStatsMonitor._resetAvgStats(); };
                    g.prototype._resetAvgStats = function () { this._avgAudioBitrateUp.reset(), this._avgAudioBitrateDown.reset(), this._avgVideoBitrateUp.reset(), this._avgVideoBitrateDown.reset(), this._avgBandwidthUp.reset(), this._avgBandwidthDown.reset(), this._avgPacketLossUp.reset(), this._avgPacketLossDown.reset(), this._avgPacketLossTotal.reset(), this._avgRemoteFPS.reset(), this._avgRemoteScreenFPS.reset(), this._avgLocalFPS.reset(), this._avgLocalScreenFPS.reset(), this._avgRemoteCameraPixels.reset(), this._avgRemoteScreenPixels.reset(), this._avgLocalCameraPixels.reset(), this._avgLocalScreenPixels.reset(), this._avgCQ.reset(), this._sampleIdx = 0; };
                    g.prototype.dispose = function () { this._conference.off(o.P2P_STATUS, this._onP2PStatusChanged), this._conference.off(d.LOCAL_STATS_UPDATED, this._onLocalStatsUpdated), this._conference.off(o.JVB121_STATUS, this._onJvb121StatusChanged), this.jvbStatsMonitor.dispose(), this.p2pStatsMonitor.dispose(); };
                    return g;
                }());  }).call(this, "modules/statistics/AvgRTPStatsReporter.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return c; }));
            var i = n(0), r = n(1), s = n.n(r), o = n(69), a = n.n(o);
            var c = /** @class */ (function () {
                function c(e) {
                    this.stats = { users: {}, dominantSpeakerId: null };
                    var t = e.myUserId();
                    this.stats.users[t] = new a.a(t, null, !0), this.conference = e, e.addEventListener(i.DOMINANT_SPEAKER_CHANGED, this._onDominantSpeaker.bind(this)), e.addEventListener(i.USER_JOINED, this._onUserJoin.bind(this)), e.addEventListener(i.USER_LEFT, this._onUserLeave.bind(this)), e.addEventListener(i.DISPLAY_NAME_CHANGED, this._onDisplayNameChange.bind(this)), e.xmpp && e.xmpp.addListener(s.a.SPEAKER_STATS_RECEIVED, this._updateStats.bind(this));
                }
                c.prototype._onDominantSpeaker = function (e) { var t = this.stats.users[this.stats.dominantSpeakerId], n = this.stats.users[e]; t && t.setDominantSpeaker(!1), n && n.setDominantSpeaker(!0), this.stats.dominantSpeakerId = e; };
                c.prototype._onUserJoin = function (e, t) { t.isHidden() || this.stats.users[e] || (this.stats.users[e] = new a.a(e, t.getDisplayName())); };
                c.prototype._onUserLeave = function (e) { var t = this.stats.users[e]; t && t.markAsHasLeft(); };
                c.prototype._onDisplayNameChange = function (e, t) { var n = this.stats.users[e]; n && n.setDisplayName(t); };
                c.prototype.getStats = function () { return this.stats.users; };
                c.prototype._updateStats = function (e) { for (var t_159 in e) {
                    var n_102 = void 0;
                    var i_82 = this.conference.getParticipantById(t_159);
                    i_82 && i_82.isHidden() || (this.stats.users[t_159] ? (n_102 = this.stats.users[t_159], n_102.getDisplayName() || n_102.setDisplayName(e[t_159].displayName)) : (n_102 = new a.a(t_159, e[t_159].displayName), this.stats.users[t_159] = n_102, n_102.markAsHasLeft())), n_102.totalDominantSpeakerTime = e[t_159].totalDominantSpeakerTime;
                } };
                return c;
            }());
        }, function (e, t, n) { var i = n(82), r = n(164); function s() { this.audioRecorder = new i, this.transcriptionService = new r, this.counter = null, this.startTime = null, this.transcription = null, this.callback = null, this.results = [], this.state = "before", this.lineLength = 0; } function o(e, t) { if (console.log("retrieved an answer from the transcription service. The answer has an array of length: " + t.wordArray.length), t.wordArray.length > 0) {
            var n_103 = t.startTime.getUTCMilliseconds() - e.startTime.getUTCMilliseconds();
            n_103 < 0 && (n_103 = 0);
            var i_83 = "[";
            t.wordArray.forEach(function (e) { e.begin += n_103, e.end += n_103, i_83 += e.word + ","; }), i_83 += "]", console.log(i_83), t.wordArray.name = t.name;
        } e.results.push(t.wordArray), e.counter--, console.log("current counter: " + e.counter), e.maybeMerge(); } function a(e) { for (var t_160 = 0; t_160 < e.length; t_160++)
            0 === e[t_160].length && e.splice(t_160, 1); return e.length > 0; } s.prototype.start = function () { if ("before" !== this.state)
            throw new Error("The transcription can only start when it's in the \"before\" state. It's currently in the \"" + this.state + "\" state"); this.state = "recording", this.audioRecorder.start(), this.startTime = new Date; }, s.prototype.stop = function (e) {
            var _this = this;
            if ("recording" !== this.state)
                throw new Error("The transcription can only stop when it's in the \"recording\" state. It's currently in the \"" + this.state + "\" state");
            console.log("stopping recording and sending audio files"), this.audioRecorder.stop();
            var t = o.bind(null, this);
            this.audioRecorder.getRecordingResults().forEach(function (e) { _this.transcriptionService.send(e, t), _this.counter++; }), this.state = "transcribing", this.callback = e;
        }, s.prototype.maybeMerge = function () { "transcribing" === this.state && 0 === this.counter && this.merge(); }, s.prototype.merge = function () { console.log("starting merge process!\n The length of the array: " + this.results.length), this.transcription = ""; var e = this.results, t = []; var _loop_11 = function () {
            var t_161 = e[0];
            e.forEach(function (e) { e[0].begin < t_161[0].begin && (t_161 = e); });
            var n_104 = t_161.shift();
            var _loop_12 = function () {
                var i_84 = !1;
                var r_30 = t_161[0].begin;
                if (e.forEach(function (e) { e[0].begin < r_30 && (i_84 = !0); }), i_84)
                    return "break";
                n_104 = t_161.shift(), this_6.updateTranscription(n_104, null);
            };
            for (this_6.updateTranscription(n_104, t_161.name); t_161.length > 0;) {
                var state_2 = _loop_12();
                if (state_2 === "break")
                    break;
            }
        }; var this_6 = this; for (a(e), e.forEach(function (e) { return function (e, t) { if (0 === e.length)
            e.push(t);
        else {
            if (e[e.length - 1].begin <= t.begin)
                return void e.push(t);
            for (var n_105 = 0; n_105 < e.length; n_105++)
                if (t.begin < e[n_105].begin)
                    return void e.splice(n_105, 0, t);
            e.push(t);
        } }(t, e); }); a(e);) {
            _loop_11();
        } this.state = "finished", this.callback && this.callback(this.transcription); }, s.prototype.updateTranscription = function (e, t) { null != t && (this.transcription += "\n" + t + ":", this.lineLength = t.length + 1), this.lineLength + e.word.length > 80 && (this.transcription += "\n    ", this.lineLength = 4), this.transcription += " " + e.word, this.lineLength += e.word.length + 1; }, s.prototype.addTrack = function (e) { this.audioRecorder.addTrack(e); }, s.prototype.removeTrack = function (e) { this.audioRecorder.removeTrack(e); }, s.prototype.getTranscription = function () { if ("finished" !== this.state)
            throw new Error("The transcription can only be retrieved when it's in the \"finished\" state. It's currently in the \"" + this.state + "\" state"); return this.transcription; }, s.prototype.getState = function () { return this.state; }, s.prototype.reset = function () { this.state = "before", this.counter = null, this.transcription = null, this.startTime = null, this.callback = null, this.results = [], this.lineLength = 0; }, e.exports = s; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return s; })); var i = n(6); var r = n(4).getLogger(e); function s(e) { this.versions = {}, this.conference = e, this.conference.addCommandListener("versions", this.processVersions.bind(this)); } s.prototype.processVersions = function (e, t, n) {
                var _this = this;
                if (!this.conference._isFocus(n))
                    return void r.warn("Received versions not from the focus user: " + e, n);
                var s = [];
                e.children.forEach(function (e) { var t = e.attributes.name, n = e.value; _this.versions[t] !== n && (_this.versions[t] = n, r.info("Got " + t + " version: " + n), s.push({ id: "component_version", component: t, version: n })); }), s.length > 0 && i.a.sendLog(JSON.stringify(s));
            }, s.prototype.getComponentVersion = function (e) { return this.versions[e]; }; }).call(this, "modules/version/ComponentsVersions.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return d; })); var i = n(4), r = n(1), s = n.n(r), o = n(140), a = n(26); var c = Object(i.getLogger)(e);
                var d = /** @class */ (function () {
                    function d(e) {
                        this.chatRoom = e, this.eventEmitter = e.eventEmitter, c.debug("creating VideoSIPGW"), this.sessions = {}, this.sessionStateChangeListener = this.sessionStateChanged.bind(this), e.addPresenceListener("jibri-sip-call-state", this.handleJibriSIPState.bind(this));
                    }
                    d.prototype.handleJibriSIPState = function (e) { var t = e.attributes; if (!t)
                        return; c.debug("Handle video sip gw state : ", t); var n = t.state; if (n !== this.state)
                        switch (n) {
                            case a.STATE_ON:
                            case a.STATE_OFF:
                            case a.STATE_PENDING:
                            case a.STATE_RETRYING:
                            case a.STATE_FAILED: {
                                var e_186 = t.sipaddress;
                                if (!e_186)
                                    return;
                                var i_85 = this.sessions[e_186];
                                i_85 ? i_85.setState(n, t.failure_reason) : c.warn("Video SIP GW session not found:", e_186);
                            }
                        } };
                    d.prototype.createVideoSIPGWSession = function (e, t) { if (this.sessions[e])
                        return c.warn("There was already a Video SIP GW session for address", e), new Error(a.ERROR_SESSION_EXISTS); var n = new o.a(e, t, this.chatRoom); return n.addStateListener(this.sessionStateChangeListener), this.sessions[e] = n, n; };
                    d.prototype.sessionStateChanged = function (e) { var t = e.address; if (e.newState === a.STATE_OFF || e.newState === a.STATE_FAILED) {
                        var e_187 = this.sessions[t];
                        if (!e_187)
                            return void c.error("Missing Video SIP GW session with address:", t);
                        e_187.removeStateListener(this.sessionStateChangeListener), delete this.sessions[t];
                    } this.eventEmitter.emit(s.a.VIDEO_SIP_GW_SESSION_STATE_CHANGED, e); };
                    return d;
                }());  }).call(this, "modules/videosipgw/VideoSIPGW.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return c; })); var i = n(4), r = n(2), s = n(20), o = n(26); var a = Object(i.getLogger)(e);
                var c = /** @class */ (function (_super) {
                    __extends(c, _super);
                    function c(e, t, n) {
                        var _this = this;
                        _this = _super.call(this) || this, _this.sipAddress = e, _this.displayName = t, _this.chatRoom = n, _this.state = void 0;
                        return _this;
                    }
                    c.prototype.stop = function () { this.state !== o.STATE_OFF && this.state !== o.STATE_FAILED ? this._sendJibriIQ("stop") : a.warn("Video SIP GW session already stopped or failed!"); };
                    c.prototype.start = function () { this.state !== o.STATE_ON && this.state !== o.STATE_OFF && this.state !== o.STATE_PENDING && this.state !== o.STATE_RETRYING ? this._sendJibriIQ("start") : a.warn("Video SIP GW session already started!"); };
                    c.prototype.setState = function (e, t) { if (e === this.state)
                        return; var n = this.state; this.state = e, this.eventEmitter.emit("STATE_CHANGED", { address: this.sipAddress, failureReason: t, oldState: n, newState: this.state, displayName: this.displayName }); };
                    c.prototype.addStateListener = function (e) { this.addListener("STATE_CHANGED", e); };
                    c.prototype.removeStateListener = function (e) { this.removeListener("STATE_CHANGED", e); };
                    c.prototype._sendJibriIQ = function (e) {
                        var _this = this;
                        var t = { xmlns: "http://jitsi.org/protocol/jibri", action: e, sipaddress: this.sipAddress };
                        t.displayname = this.displayName;
                        var n = Object(r.$iq)({ to: this.chatRoom.focusMucJid, type: "set" }).c("jibri", t).up();
                        a.debug(e + " video SIP GW session", n.nodeTree), this.chatRoom.connection.sendIQ(n, function () { }, function (t) { a.error("Failed to " + e + " video SIP GW session, error: ", t), _this.setState(o.STATE_FAILED); });
                    };
                    return c;
                }(s.a));  }).call(this, "modules/videosipgw/JitsiVideoSIPGWSession.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return c; })); var i = n(4), r = n(15), s = n(13), o = n(6); var a = Object(i.getLogger)(e); function c() { return new Promise(function (e) { s.a.enumerateDevices(function (t) { var n = t.filter(function (e) { return "audioinput" === e.kind; }), i = []; for (var _i = 0, n_106 = n; _i < n_106.length; _i++) {
                var e_188 = n_106[_i];
                var t_162 = s.a.obtainAudioAndVideoPermissions({ devices: ["audio"], micDeviceId: e_188.deviceId }).then(function (e) { var t = e[0], n = t.getOriginalStream(); return o.a.startLocalStats(n, t.setAudioLevel.bind(t)), t.addEventListener(r.LOCAL_TRACK_STOPPED, function () { o.a.stopLocalStats(n); }), t; });
                i.push(t_162);
            } Promise.allSettled(i).then(function (t) { var n = t.filter(function (e) { return "fulfilled" === e.status; }), i = t.filter(function (e) { return "rejected" === e.status; }), s = n.map(function (e) { return e.value; }), o = i.map(function (e) { return e.value; }); for (var _i = 0, o_19 = o; _i < o_19.length; _i++) {
                var e_189 = o_19[_i];
                a.error("Failed to acquire audio device with error: ", e_189);
            } var _loop_13 = function (t_163) {
                t_163.on(r.TRACK_AUDIO_LEVEL_CHANGED, function (n) { n > .008 && (d(s), e({ deviceId: t_163.deviceId, deviceLabel: t_163.track.label })); });
            }; for (var _a = 0, s_26 = s; _a < s_26.length; _a++) {
                var t_163 = s_26[_a];
                _loop_13(t_163);
            } setTimeout(function () { d(s), e({ deviceId: "", deviceLabel: "" }); }, 3e3); }); }); }); } function d(e) { for (var _i = 0, e_190 = e; _i < e_190.length; _i++) {
                var t_164 = e_190[_i];
                t_164.stopStream();
            } } }).call(this, "modules/detection/ActiveDeviceDetector.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return f; })); var i = n(4), r = n(2), s = n(5), o = n(12), a = n.n(o), c = n(13), d = n(143), u = n(35); function l(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { h(e, t, n[t]); }));
            } return e; } function h(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } function p(e, t) { if (null == e)
                return {}; var n, i, r = function (e, t) { if (null == e)
                return {}; var n, i, r = {}, s = Object.keys(e); for (i = 0; i < s.length; i++)
                n = s[i], t.indexOf(n) >= 0 || (r[n] = e[n]); return r; }(e, t); if (Object.getOwnPropertySymbols) {
                var s = Object.getOwnPropertySymbols(e);
                for (i = 0; i < s.length; i++)
                    n = s[i], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
            } return r; } var m = Object(i.getLogger)(e);
                var f = /** @class */ (function () {
                    function f(e) {
                        if (e === void 0) { e = {}; }
                        var t = e.jitsiConnection, n = p(e, ["jitsiConnection"]);
                        this._options = l({ iceConfig: t && t.xmpp.connection.jingle.p2pIceConfig }, n), this._peerConnection = null, this._onFatalError = this._onFatalError.bind(this), this._onSendMessage = this._onSendMessage.bind(this), this._onRemoteStream = this._onRemoteStream.bind(this);
                    }
                    f.prototype.processMessage = function (e) { var t = e.from; if (!t)
                        return; if (this._peerConnection && this._peerConnection.getPeerJid() !== t)
                        return void this._onFatalError(t, u.a.CONNECTION_ERROR, "rejected"); var n = this._convertStringToXML(e.data.iq), i = n && n.find("jingle"), r = i && i.attr("action"); r === u.a.INITIATE && (this._peerConnection = this._createPeerConnection(t, { isInitiator: !1, receiveVideo: !0 })), this._peerConnection && this._peerConnection.processMessage(i), r !== u.a.CONNECTION_ERROR && r !== u.a.UNAVAILABLE && r !== u.a.TERMINATE || this._selfCloseConnection(); };
                    f.prototype.start = function (e, t) {
                        if (t === void 0) { t = []; }
                        this._peerConnection = this._createPeerConnection(e, { isInitiator: !0, receiveVideo: !1 }), this._peerConnection.start(t);
                    };
                    f.prototype.stop = function () { this._peerConnection && this._peerConnection.stop(), this._peerConnection = null; };
                    f.prototype._convertStringToXML = function (e) { try {
                        var t_165 = (new DOMParser).parseFromString(e, "text/xml");
                        return $(t_165);
                    }
                    catch (e) {
                        return m.error("Attempted to convert incorrectly formatted xml"), null;
                    } };
                    f.prototype._createPeerConnection = function (e, t) {
                        if (t === void 0) { t = {}; }
                        if (!e)
                            throw new Error("Cannot create ProxyConnectionPC without a peer.");
                        var n = l({ iceConfig: this._options.iceConfig, onError: this._onFatalError, onRemoteStream: this._onRemoteStream, onSendMessage: this._onSendMessage, peerJid: e }, t);
                        return new d.a(n);
                    };
                    f.prototype._onFatalError = function (e, t, n) {
                        if (n === void 0) { n = ""; }
                        m.error("Received a proxy connection error", e, t, n);
                        var i = Object(r.$iq)({ to: e, type: "set" }).c("jingle", { xmlns: "urn:xmpp:jingle:1", action: t }).c("details").t(n).up();
                        this._onSendMessage(e, i), this._peerConnection && this._peerConnection.getPeerJid() === e && this._selfCloseConnection();
                    };
                    f.prototype._onRemoteStream = function (e) { if (!this._options.onRemoteStream)
                        return m.error("Remote track received without callback."), void e.dispose(); var t = e.isVideoTrack(); var n; t && (n = this._options.convertVideoToDesktop ? a.a.DESKTOP : a.a.CAMERA); var i = e.getOriginalStream(), r = c.a.newCreateLocalTracks([{ deviceId: "proxy:" + this._peerConnection.getPeerJid(), mediaType: t ? s.c : s.a, sourceType: "proxy", stream: i, track: i.getVideoTracks()[0], videoType: n }]); this._options.onRemoteStream(r[0]); };
                    f.prototype._onSendMessage = function (e, t) { if (this._options.onSendMessage)
                        try {
                            var n_107 = (new XMLSerializer).serializeToString(t.nodeTree || t);
                            this._options.onSendMessage(e, { iq: n_107 });
                        }
                        catch (e) {
                            m.error("Attempted to send an incorrectly formatted iq.");
                        } };
                    f.prototype._selfCloseConnection = function () { this.stop(), this._options.onConnectionClosed && this._options.onConnectionClosed(); };
                    return f;
                }());  }).call(this, "modules/proxyconnection/ProxyConnectionService.js");
        }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return f; })); var i = n(4), r = n(7), s = n.n(r), o = n(1), a = n.n(o), c = n(13), d = n(57), u = n(22), l = n(35); function h(e) { for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {}, i = Object.keys(n);
                "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter((function (e) { return Object.getOwnPropertyDescriptor(n, e).enumerable; })))), i.forEach((function (t) { p(e, t, n[t]); }));
            } return e; } function p(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e; } var m = Object(i.getLogger)(e);
                var f = /** @class */ (function () {
                    function f(e) {
                        if (e === void 0) { e = {}; }
                        this._options = h({ iceConfig: {}, isInitiator: !1, receiveAudio: !1, receiveVideo: !1 }, e), this._tracks = [], this._peerConnection = null, this._onError = this._onError.bind(this), this._onRemoteStream = this._onRemoteStream.bind(this), this._onSendMessage = this._onSendMessage.bind(this);
                    }
                    f.prototype.getPeerJid = function () { return this._options.peerJid; };
                    f.prototype.processMessage = function (e) { switch (e.attr("action")) {
                        case l.a.ACCEPT:
                            this._onSessionAccept(e);
                            break;
                        case l.a.INITIATE:
                            this._onSessionInitiate(e);
                            break;
                        case l.a.TERMINATE:
                            this._onSessionTerminate(e);
                            break;
                        case l.a.TRANSPORT_INFO: this._onTransportInfo(e);
                    } };
                    f.prototype.start = function (e) {
                        if (e === void 0) { e = []; }
                        this._peerConnection || (this._tracks = this._tracks.concat(e), this._peerConnection = this._createPeerConnection(), this._peerConnection.invite(e));
                    };
                    f.prototype.stop = function () { this._peerConnection && this._peerConnection.terminate(), this._onSessionTerminate(); };
                    f.prototype._createPeerConnection = function () {
                        var _this = this;
                        var e = { connected: !0, jingle: { terminate: function () { } }, sendIQ: this._onSendMessage, addEventListener: function () { return function () { }; } }, t = h({ iceServers: u.a }, this._options.iceConfig), n = { addPresenceListener: function () { }, connectionTimes: [], eventEmitter: { emit: function (e) { switch (e) {
                                    case a.a.CONNECTION_ICE_FAILED:
                                    case a.a.CONNECTION_FAILED: _this._onError(l.a.CONNECTION_ERROR, e);
                                } } }, getMediaPresenceInfo: function () { return ({}); }, removePresenceListener: function () { } };
                        this._rtc = new c.a({}, {}), this._rtc.addListener(s.a.REMOTE_TRACK_ADDED, this._onRemoteStream);
                        var i = new d.a(void 0, void 0, this._options.peerJid, e, { offerToReceiveAudio: this._options.receiveAudio, offerToReceiveVideo: this._options.receiveVideo }, t, !0, this._options.isInitiator);
                        return i.initialize(n, this._rtc, {}), i;
                    };
                    f.prototype._onError = function (e, t) {
                        if (t === void 0) { t = ""; }
                        this._options.onError(this._options.peerJid, e, t);
                    };
                    f.prototype._onRemoteStream = function (e) { this._tracks.push(e), this._options.onRemoteStream(e); };
                    f.prototype._onSendMessage = function (e) { this._options.onSendMessage(this._options.peerJid, e); };
                    f.prototype._onSessionAccept = function (e) { this._peerConnection ? this._peerConnection.setAnswer(e) : m.error("Received an answer when no peer connection exists."); };
                    f.prototype._onSessionInitiate = function (e) {
                        var _this = this;
                        this._peerConnection ? m.error("Received an offer when an offer was already sent.") : (this._peerConnection = this._createPeerConnection(), this._peerConnection.acceptOffer(e, function () { }, function () { return _this._onError(_this._options.peerJid, l.a.CONNECTION_ERROR, "session initiate error"); }));
                    };
                    f.prototype._onSessionTerminate = function () { this._tracks.forEach(function (e) { return e.dispose(); }), this._tracks = [], this._peerConnection && this._peerConnection.onTerminated(), this._rtc && (this._rtc.removeListener(s.a.REMOTE_TRACK_ADDED, this._onRemoteStream), this._rtc.destroy()); };
                    f.prototype._onTransportInfo = function (e) { this._peerConnection.addIceCandidates(e); };
                    return f;
                }());  }).call(this, "modules/proxyconnection/ProxyConnectionPC.js");
        }, function (e, t, n) {
            "use strict";
            t.a = { error: { BUSY: "busy", ERROR: "error", RESOURCE_CONSTRAINT: "resource-constraint", SERVICE_UNAVAILABLE: "service-unavailable" }, mode: { FILE: "file", STREAM: "stream" }, status: { OFF: "off", ON: "on", PENDING: "pending" } };
        }, function (e, t, n) {
            "use strict";
            var i = n(18), r = n.n(i), s = n(3), o = n(30), a = n(50), c = n.n(a), d = n(44);
            var u = new r.a;
            var l = !1, h = null;
            t.a = { init: function (e) {
                    return __awaiter(this, void 0, void 0, function () { var t, n, i; return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (l)
                                    throw new Error("Precall Test already initialized");
                                t = e.callStatsID, n = e.callStatsSecret, i = e.disableThirdPartyRequests;
                                if (!t || !n || i)
                                    throw new Error("Callstats is disabled");
                                return [4 /*yield*/, function () { if (!s.a.isReactNative())
                                        return new Promise(function (e) { c.a.loadScript(d.a, !0, !0, void 0, e); }); }()];
                            case 1: return [2 /*return*/, (_a.sent(), h = new window.callstats, function (e) { return new Promise(function (t, n) { var i = e.callStatsID, r = e.callStatsSecret, s = e.statisticsId || e.statisticsDisplayName || o.a.callStatsUserName; h.initialize(i, r, s, function (e, i) { "success" === e ? (h.on("preCallTestResults", function () {
                                    var e = [];
                                    for (var _i = 0; _i < arguments.length; _i++) {
                                        e[_i] = arguments[_i];
                                    }
                                    u.emit.apply(u, __spreadArray(["preCallTestResults"], e));
                                }), l = !0, t()) : n({ status: e, message: i }); }, null, { disablePrecalltest: !0 }); }); }(e))];
                        }
                    }); });
                }, execute: function () { return l ? new Promise(function (e, t) { u.on("preCallTestResults", function (n, i) { "success" === n ? e(i) : t({ status: n, payload: i }); }), h.makePrecallTest(); }) : Promise.reject("uninitialized"); } };
        }, function (e, t) { var n = { getTokenAuthUrl: function (e, t, n) { return "string" != typeof e ? null : e.replace("{room}", t).replace("{roleUpgrade}", !0 === n); } }; e.exports = n; }, function (e, t, n) {
            "use strict";
            (function (e) { n.d(t, "a", (function () { return o; })); var i = n(4), r = n(66); var s = Object(i.getLogger)(e);
                var o = /** @class */ (function () {
                    function o() {
                        this._started = !1, this._streamsToMix = [], this._streamMSSArray = [];
                    }
                    o.prototype.addMediaStream = function (e) { e.getAudioTracks() || s.warn("Added MediaStream doesn't contain audio tracks."), this._streamsToMix.push(e); };
                    o.prototype.start = function () { if (this._started)
                        return this._mixedMSD.stream; if (this._audioContext = Object(r.a)(), !this._streamsToMix.length)
                        return s.warn("No MediaStream's added to AudioMixer, nothing will happen."), null; this._started = !0, this._mixedMSD = this._audioContext.createMediaStreamDestination(); for (var _i = 0, _a = this._streamsToMix; _i < _a.length; _i++) {
                        var e_191 = _a[_i];
                        var t_166 = this._audioContext.createMediaStreamSource(e_191);
                        t_166.connect(this._mixedMSD), this._streamMSSArray.push(t_166);
                    } return this._mixedMSD.stream; };
                    o.prototype.reset = function () { this._started = !1, this._streamsToMix = []; for (var _i = 0, _a = this._streamMSSArray; _i < _a.length; _i++) {
                        var e_192 = _a[_i];
                        e_192.disconnect();
                    } this._streamMSSArray = [], this._audioContext && (this._audioContext = void 0); };
                    return o;
                }());  }).call(this, "modules/webaudio/AudioMixer.js");
        }, function (e, t, n) {
            "use strict";
            n.d(t, "a", (function () { return f; }));
            var i = n(43), r = n.n(i), s = n(25), o = n.n(s);
            var a = function (e, t) { return void 0 !== e && void 0 !== e.media && Array.isArray(e.media) && e.media.forEach(function (e) { e.sources && e.sources.length && (e.ssrcs = [], e.sources.forEach(function (t) { Object.keys(t).forEach(function (n) { "id" !== n && e.ssrcs.push({ id: t.id, attribute: n, value: t[n] }); }); }), delete e.sources), e.ssrcGroups && e.ssrcGroups.length && e.ssrcGroups.forEach(function (e) { void 0 !== e.ssrcs && Array.isArray(e.ssrcs) && (e.ssrcs = e.ssrcs.join(" ")); }); }), o.a.write(e, t); }, c = function (e) { var t = o.a.parse(e); return void 0 !== t && void 0 !== t.media && Array.isArray(t.media) && t.media.forEach(function (e) { void 0 !== e.ssrcs && Array.isArray(e.ssrcs) && (e.sources = [], e.ssrcs.forEach(function (t) { var n = e.sources.findIndex(function (e) { return e.id === t.id; }); if (n > -1)
                e.sources[n][t.attribute] = t.value;
            else {
                var n_108 = { id: t.id };
                n_108[t.attribute] = t.value, e.sources.push(n_108);
            } }), delete e.ssrcs), void 0 !== e.ssrcGroups && Array.isArray(e.ssrcGroups) && e.ssrcGroups.forEach(function (e) { "string" == typeof e.ssrcs && (e.ssrcs = e.ssrcs.split(" ")); }); }), t; };
            var d = ["audio", "video", "data"], u = function (e) { return e.find(function (e) { return "SIM" === e.semantics; }); }, l = function (e) { return e.find(function (e) { return "FID" === e.semantics; }); };
            function h(e, t, n, i) { if (!e || !t)
                return; var r = function (e) { return i.find(function (t) { return t.id.toString() === e; }); }; t.ssrcs.forEach(function (t) { e.sources.push(r(t)); var i = n[parseInt(t, 10)].find(function (e) { return "FID" === e.semantics; }); if (i) {
                var n_109 = i.ssrcs.find(function (e) { return e !== t; });
                e.sources.push(r(n_109)), e.ssrcGroups.push(i);
            } }), e.ssrcGroups.push(t); }
            function p(e, t, n, i) { if (!e || !t)
                return; if (e.sources = [], e.ssrcGroups = [], !n[t.id])
                return e.sources.push(t), void (e.msid = t.msid); var r = u(n[t.id]), s = l(n[t.id]); if (r)
                h(e, r, n, i);
            else if (s) {
                var r_31 = s.ssrcs.find(function (e) { return e !== t; }), o_20 = u(n[r_31]);
                o_20 ? h(e, o_20, n, i) : (s.ssrcs.forEach(function (t) { e.sources.push((function (e) { return i.find(function (t) { return t.id.toString() === e; }); })(t)); }), e.ssrcGroups.push(s));
            } e.msid = e.sources[0].msid; }
            function m(e, t, n) { if (!n.find(function (t) { return !!t.sources && t.sources.some(function (t) { return t.id === e.id; }); })) {
                if (!t[e.id])
                    return !1;
                var i_86 = u(t[e.id]), r_32 = l(t[e.id]);
                if (i_86)
                    return n.some(function (e) { return e.sources && e.sources.some(function (e) { return e.id.toString() === i_86.ssrcs[0]; }); });
                if (r_32 && e.id.toString() !== r_32.ssrcs[0]) {
                    return m({ id: r_32.ssrcs[0] }, t, n);
                }
                return !1;
            } return !0; }
            var f = /** @class */ (function () {
                function f() {
                }
                f.prototype.toPlanB = function (e) { if (!e || "string" != typeof e.sdp)
                    return console.warn("An empty description was passed as an argument."), e; var t = c(e.sdp); if (!t.media || !t.media.length)
                    return console.warn("The description has no media."), e; if (t.media.every(function (e) { return -1 !== d.indexOf(e.mid); }))
                    return console.warn("The description does not look like unified plan sdp"), e; var n = {}, i = t.media; t.media = [], i.forEach(function (e) { var t = e.type; if ("application" === t)
                    return e.mid = "data", void (n[e.mid] = e); if (void 0 === n[t]) {
                    var i_87 = r()(e);
                    i_87.sources && Array.isArray(i_87.sources) && i_87.sources.forEach(function (t) { e.msid ? t.msid = e.msid : delete t.msid; }), i_87.ssrcGroups && e.msid || (i_87.ssrcGroups = []), delete i_87.msid, i_87.mid = t, n[t] = i_87;
                }
                else
                    e.msid && (e.sources && Array.isArray(e.sources) && (n[t].sources = n[t].sources.concat(e.sources)), void 0 !== e.ssrcGroups && Array.isArray(e.ssrcGroups) && (n[t].ssrcGroups = n[t].ssrcGroups.concat(e.ssrcGroups))); }), t.media = Object.values(n); var s = []; Object.values(n).forEach(function (e) { "inactive" !== e.direction && s.push(e.mid); }), t.groups.forEach(function (e) { "BUNDLE" === e.type && (e.mids = s.join(" ")); }), t.msidSemantic = { semantic: "WMS", token: "*" }; var o = a(t); return new RTCSessionDescription({ type: e.type, sdp: o }); };
                f.prototype.toUnifiedPlan = function (e, t) {
                    if (t === void 0) { t = null; }
                    if (!e || "string" != typeof e.sdp)
                        return console.warn("An empty description was passed as an argument."), e;
                    var n = c(e.sdp);
                    if (!n.media || !n.media.length)
                        return console.warn("The description has no media."), e;
                    if (n.media.length > 3 || n.media.every(function (e) { return -1 === d.indexOf(e.mid); }))
                        return console.warn("The description does not look like plan-b"), e;
                    var i = t ? c(t.sdp) : null, s = {};
                    n.media.forEach(function (e) { var t = e.type; if ("application" === t) {
                        if (!i || !i.media) {
                            var t_167 = r()(e);
                            return t_167.mid = Object.keys(s).length.toString(), void (s[e.mid] = t_167);
                        }
                        var n_110 = i.media.findIndex(function (e) { return e.type === t; });
                        return void (n_110 && (i.media[n_110] = e, i.media[n_110].mid = n_110));
                    } var n = function (e) { var t = {}; return e && Array.isArray(e) ? (e.forEach(function (e) { e.ssrcs && Array.isArray(e.ssrcs) && e.ssrcs.forEach(function (n) { void 0 === t[n] && (t[n] = []), t[n].push(e); }); }), t) : t; }(e.ssrcGroups); e.sources && e.sources.forEach(function (o, a) { if (!o.msid)
                        return; if (!i || !i.media) {
                        if (m(o, n, Object.values(s)))
                            return;
                        var t_168 = r()(e);
                        return t_168.mid = Object.keys(s).length.toString(), t_168.direction = a || "sendonly" === e.direction ? "sendonly" : "sendrecv", t_168.bundleOnly = void 0, p(t_168, o, n, e.sources), void (s[t_168.mid] = t_168);
                    } if (m(o, n, i.media))
                        return; var c = i.media.findIndex(function (e) { return e.direction && "inactive" === e.direction && e.type === t; }); if (c > -1)
                        i.media[c].direction = "sendonly", p(i.media[c], o, n, e.sources);
                    else {
                        var t_169 = r()(e);
                        t_169.mid = i.media.length.toString(), t_169.direction = "sendonly", p(t_169, o, n, e.sources), i.media.push(t_169);
                    } }); }), n.media = i ? i.media : Object.values(s);
                    var o = [];
                    n.media.forEach(function (e) { o.push(e.mid); }), n.groups.forEach(function (e) { "BUNDLE" === e.type && (e.mids = o.join(" ")); }), n.msidSemantic = { semantic: "WMS", token: "*" }, n.origin.sessionVersion++;
                    var u = a(n);
                    return new RTCSessionDescription({ type: e.type, sdp: u });
                };
                return f;
            }());
        }, function (e, t, n) { e.exports = n(150).default; }, function (e, t, n) {
            "use strict";
            n.r(t), function (e) { var i = n(4), r = n.n(i), s = n(16), o = n(0), a = n(83), c = n(40), d = n(28), u = n(70), l = n(48), h = n(19), p = n(14), m = n(15), f = n(62), g = n(13), _ = n(3), v = n(52), S = n(51), y = n(141), E = n(21), b = n(65), T = n(142), C = n(144), R = n(30), A = n(61), w = n(145), I = n(6), P = n(146), O = n.n(P), D = n(11), N = n.n(D), M = n(50), k = n.n(M), L = n(26), x = n(147), F = n(5), j = n(36), U = n.n(j), H = n(32), B = n(67), J = n(8); function V(e, t) { if (null == e)
                return {}; var n, i, r = function (e, t) { if (null == e)
                return {}; var n, i, r = {}, s = Object.keys(e); for (i = 0; i < s.length; i++)
                n = s[i], t.indexOf(n) >= 0 || (r[n] = e[n]); return r; }(e, t); if (Object.getOwnPropertySymbols) {
                var s = Object.getOwnPropertySymbols(e);
                for (i = 0; i < s.length; i++)
                    n = s[i], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
            } return r; } var G = r.a.getLogger(e); function $(e) { var t = { audio_requested: e.devices.includes("audio"), video_requested: e.devices.includes("video"), screen_sharing_requested: e.devices.includes("desktop") }; return t.video_requested && (t.resolution = e.resolution), t; } t.default = function (e) { return "object" == typeof window.JitsiMeetJS ? Object.assign({}, window.JitsiMeetJS, e) : e; }({ version: "49c4e75f37", JitsiConnection: a.a, ProxyConnectionService: T.a, constants: { participantConnectionStatus: S.a, recording: C.a, sipVideoGW: L, transcriptionStatus: f }, events: { conference: o, connection: d, detection: E, track: m, mediaDevices: l, connectionQuality: H, e2eping: B }, errors: { conference: s, connection: c, track: p }, errorTypes: { JitsiTrackError: h.a }, logLevels: r.a.levels, mediaDevices: u.a, analytics: I.a.analytics, init: function (e) {
                    if (e === void 0) { e = {}; }
                    R.a.init(e.externalStorage), I.a.init(e), window.connectionTimes || (window.connectionTimes = {}), !0 !== e.enableAnalyticsLogging && (G.warn("Analytics disabled, disposing."), this.analytics.dispose()), e.enableWindowOnErrorHandler && N.a.addHandler(this.getGlobalOnErrorHandler.bind(this));
                    var t = e.deploymentInfo;
                    if (t && Object.keys(t).length > 0) {
                        var e_193 = {};
                        for (var n_111 in t)
                            t.hasOwnProperty(n_111) && (e_193[n_111] = t[n_111]);
                        e_193.id = "deployment_info", I.a.sendLog(JSON.stringify(e_193));
                    }
                    if (this.version) {
                        var e_194 = { id: "component_version", component: "lib-jitsi-meet", version: this.version };
                        I.a.sendLog(JSON.stringify(e_194));
                    }
                    return g.a.init(e);
                }, isDesktopSharingEnabled: function () { return g.a.isDesktopSharingEnabled(); }, isWebRtcSupported: function () { return g.a.isWebRtcSupported(); }, setLogLevel: function (e) { r.a.setLogLevel(e); }, setLogLevelById: function (e, t) { r.a.setLogLevelById(e, t); }, addGlobalLogTransport: function (e) { r.a.addGlobalTransport(e); }, removeGlobalLogTransport: function (e) { r.a.removeGlobalTransport(e); }, setGlobalLogOptions: function (e) { r.a.setGlobalOptions(e); }, createLocalTracks: function (e, t, n) {
                    var _this = this;
                    if (e === void 0) { e = {}; }
                    var i = !1;
                    var r = e.firePermissionPromptIsShownEvent, s = e.fireSlowPromiseEvent, o = V(e, ["firePermissionPromptIsShownEvent", "fireSlowPromiseEvent"]);
                    return (r || t) && !g.a.arePermissionsGrantedForAvailableDevices() ? u.a.emitEvent(l.PERMISSION_PROMPT_IS_SHOWN, _.a.getName()) : s && window.setTimeout(function () { i || u.a.emitEvent(l.SLOW_GET_USER_MEDIA); }, 1e3), window.connectionTimes || (window.connectionTimes = {}), window.connectionTimes["obtainPermissions.start"] = window.performance.now(), g.a.obtainAudioAndVideoPermissions(o).then(function (e) { if (i = !0, window.connectionTimes["obtainPermissions.end"] = window.performance.now(), I.a.sendAnalytics(Object(J.F)("success", $(o))), !g.a.options.disableAudioLevels) {
                        var _loop_14 = function (t_170) {
                            var n_112 = e[t_170], i_88 = n_112.getOriginalStream();
                            n_112.getType() === F.a && (I.a.startLocalStats(i_88, n_112.setAudioLevel.bind(n_112)), n_112.addEventListener(m.LOCAL_TRACK_STOPPED, function () { I.a.stopLocalStats(i_88); }));
                        };
                        for (var t_170 = 0; t_170 < e.length; t_170++) {
                            _loop_14(t_170);
                        }
                    } var t = g.a.getCurrentlyAvailableMediaDevices(); if (t)
                        for (var n_113 = 0; n_113 < e.length; n_113++) {
                            e[n_113]._setRealDeviceIdFromDeviceList(t);
                        } for (var _i = 0, e_195 = e; _i < e_195.length; _i++) {
                        var t_171 = e_195[_i];
                        t_171.type === F.c && "desktop" === t_171.videoType && _this.setVideoTrackContentHints(t_171.track, "detail");
                    } return e; }).catch(function (t) { if (i = !0, t.name === p.UNSUPPORTED_RESOLUTION && !_.a.usesNewGumFlow()) {
                        var e_196 = o.resolution || "720", i_89 = function (e) { if (!U.a[e])
                            return null; var t = U.a[e].order; var n = null, i = null; return Object.keys(U.a).forEach(function (e) { var r = U.a[e]; (!n || n.order < r.order && r.order < t) && (i = e, n = r); }), i === e && (i = null), i; }(e_196);
                        if (null !== i_89)
                            return o.resolution = i_89, G.debug("Retry createLocalTracks with resolution", i_89), I.a.sendAnalytics(Object(J.F)("warning", { old_resolution: e_196, new_resolution: i_89, reason: "unsupported resolution" })), _this.createLocalTracks(o, n || Object.assign({}, o));
                        if (n && t.gum.constraints && t.gum.constraints.video && t.gum.constraints.video.mandatory && t.gum.constraints.video.mandatory.sourceId)
                            return n.cameraDeviceId = void 0, _this.createLocalTracks(n);
                    } if (t.name === p.SCREENSHARING_USER_CANCELED) {
                        var e_197 = { id: "screensharing_user_canceled", message: t.message };
                        I.a.sendLog(JSON.stringify(e_197)), I.a.sendAnalytics(Object(J.F)("warning", { reason: "extension install user canceled" }));
                    }
                    else if (t.name === p.NOT_FOUND) {
                        var n_114 = { id: "usermedia_missing_device", status: t.gum.devices };
                        I.a.sendLog(JSON.stringify(n_114));
                        var i_90 = $(e);
                        i_90.reason = "device not found", i_90.devices = t.gum.devices.join("."), I.a.sendAnalytics(Object(J.F)("error", i_90));
                    }
                    else {
                        I.a.sendGetUserMediaFailed(t);
                        var n_115 = $(e);
                        n_115.reason = t.name, I.a.sendAnalytics(Object(J.F)("error", n_115));
                    } return window.connectionTimes["obtainPermissions.end"] = window.performance.now(), Promise.reject(t); });
                }, createTrackVADEmitter: function (e, t, n) { return b.a.create(e, t, n); }, createAudioMixer: function () { return new x.a; }, getActiveAudioDevice: function () { return Object(y.a)(); }, isDeviceListAvailable: function () { return G.warn("This method is deprecated, use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead"), this.mediaDevices.isDeviceListAvailable(); }, isDeviceChangeAvailable: function (e) { return G.warn("This method is deprecated, use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead"), this.mediaDevices.isDeviceChangeAvailable(e); }, isMultipleAudioInputSupported: function () { return this.mediaDevices.isMultipleAudioInputSupported(); }, isCollectingLocalStats: function () { return I.a.audioLevelsEnabled && A.a.isLocalStatsSupported(); }, enumerateDevices: function (e) { G.warn("This method is deprecated, use JitsiMeetJS.mediaDevices.enumerateDevices instead"), this.mediaDevices.enumerateDevices(e); }, getGlobalOnErrorHandler: function (e, t, n, i, r) { G.error("UnhandledError: " + e, "Script: " + t, "Line: " + n, "Column: " + i, "StackTrace: ", r), I.a.reportGlobalError(r); }, setNetworkInfo: function (_a) {
                    var e = _a.isOnline;
                    v.b.updateNetworkInfo({ isOnline: e });
                }, setVideoTrackContentHints: function (e, t) { "contentHint" in e ? (e.contentHint = t, e.contentHint !== t && G.debug("Invalid video track contentHint")) : G.debug("MediaStreamTrack contentHint attribute not supported"); }, precallTest: w.a, util: { AuthUtil: O(), ScriptUtil: k(), browser: _.a } }); }.call(this, "JitsiMeetJS.js");
        }, function (e, t, n) { var i = n(79); function r(e, t) { this.logStorage = e, this.stringifyObjects = !(!t || !t.stringifyObjects) && t.stringifyObjects, this.storeInterval = t && t.storeInterval ? t.storeInterval : 3e4, this.maxEntryLength = t && t.maxEntryLength ? t.maxEntryLength : 1e4, Object.keys(i.levels).forEach(function (e) { this[i.levels[e]] = function () { this._log.apply(this, arguments); }.bind(this, e); }.bind(this)), this.storeLogsIntervalID = null, this.queue = [], this.totalLen = 0, this.outputCache = []; } r.prototype.stringify = function (e) { try {
            return JSON.stringify(e);
        }
        catch (e) {
            return "[object with circular refs?]";
        } }, r.prototype.formatLogMessage = function (e) { for (var t = "", n = 1, r = arguments.length; n < r; n++) {
            var s = arguments[n];
            !this.stringifyObjects && e !== i.levels.ERROR || "object" != typeof s || (s = this.stringify(s)), t += s, n !== r - 1 && (t += " ");
        } return t.length ? t : null; }, r.prototype._log = function () { var e = arguments[1], t = this.formatLogMessage.apply(this, arguments); if (t) {
            var n = this.queue[this.queue.length - 1], i = n && n.text;
            i === t ? n.count += 1 : (this.queue.push({ text: t, timestamp: e, count: 1 }), this.totalLen += t.length);
        } this.totalLen >= this.maxEntryLength && this._flush(!0, !0); }, r.prototype.start = function () { this._reschedulePublishInterval(); }, r.prototype._reschedulePublishInterval = function () { this.storeLogsIntervalID && (window.clearTimeout(this.storeLogsIntervalID), this.storeLogsIntervalID = null), this.storeLogsIntervalID = window.setTimeout(this._flush.bind(this, !1, !0), this.storeInterval); }, r.prototype.flush = function () { this._flush(!1, !0); }, r.prototype._flush = function (e, t) { this.totalLen > 0 && (this.logStorage.isReady() || e) && (this.logStorage.isReady() ? (this.outputCache.length && (this.outputCache.forEach(function (e) { this.logStorage.storeLogs(e); }.bind(this)), this.outputCache = []), this.logStorage.storeLogs(this.queue)) : this.outputCache.push(this.queue), this.queue = [], this.totalLen = 0), t && this._reschedulePublishInterval(); }, r.prototype.stop = function () { this._flush(!1, !1); }, e.exports = r; }, function (e, t) { (function (t) { e.exports = t; }).call(this, {}); }, function (e, t, n) {
            var i, r, s;
            /*!
             * currentExecutingScript
             * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!
             * Copyright (c) 2015 James M. Greene
             * Licensed MIT
             * https://github.com/JamesMGreene/currentExecutingScript
             * v0.1.3
             */ this || window, r = [], void 0 === (s = "function" == typeof (i = function () { var e = /^(interactive|loaded|complete)$/, t = window.location ? window.location.href : null, n = t && t.replace(/#.*$/, "").replace(/\?.*$/, "") || null, i = document.getElementsByTagName("script"), r = "readyState" in (i[0] || document.createElement("script")), s = !window.opera || "[object Opera]" !== window.opera.toString(), o = "currentScript" in document; "stackTraceLimit" in Error && Error.stackTraceLimit !== 1 / 0 && (Error.stackTraceLimit, Error.stackTraceLimit = 1 / 0); var a = !1, c = !1; function d() { if (0 === i.length)
                return null; var t, u, l, h, p, m = [], f = d.skipStackDepth || 1; for (t = 0; t < i.length; t++)
                s && r ? e.test(i[t].readyState) && m.push(i[t]) : m.push(i[t]); if (u = new Error, a && (l = u.stack), !l && c)
                try {
                    throw u;
                }
                catch (e) {
                    l = e.stack;
                } if (l && !(p = function (e, t) { var n, r = null; if (t = t || i, "string" == typeof e && e)
                for (n = t.length; n--;)
                    if (t[n].src === e) {
                        r = t[n];
                        break;
                    } return r; }(h = function e(t, n) { var i, r = null, s = "number" == typeof n; return n = s ? Math.round(n) : 0, "string" == typeof t && t && (s ? i = t.match(/(data:text\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/) : (i = t.match(/^(?:|[^:@]*@|.+\)@(?=data:text\/javascript|blob|http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)(data:text\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/)) && i[1] || (i = t.match(/\)@(data:text\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/)), i && i[1] && (r = n > 0 ? e(t.slice(t.indexOf(i[0]) + i[0].length), n - 1) : i[1])), r; }(l, f), m)) && n && h === n && (p = function (e) { var t, n, r = null; for (t = 0, n = (e = e || i).length; t < n; t++)
                if (!e[t].hasAttribute("src")) {
                    if (r) {
                        r = null;
                        break;
                    }
                    r = e[t];
                } return r; }(m)), p || 1 === m.length && (p = m[0]), p || o && (p = document.currentScript), !p && s && r)
                for (t = m.length; t--;)
                    if ("interactive" === m[t].readyState) {
                        p = m[t];
                        break;
                    } return p || (p = m[m.length - 1] || null), p; } (function () { try {
                var e = new Error;
                throw a = "string" == typeof e.stack && !!e.stack, e;
            }
            catch (e) {
                c = "string" == typeof e.stack && !!e.stack;
            } })(), d.skipStackDepth = 1; var u = d; return u.near = d, u.far = function () { return null; }, u.origin = function () { return null; }, u; }) ? i.apply(t, r) : i) || (e.exports = s);
        }, function (e, t) { e.exports = { LOCAL_JID: "local" }; }, function (e, t, n) { !function (e) {
            "use strict";
            e.Strophe.addConnectionPlugin("disco", { _connection: null, _identities: [], _features: [], _items: [], init: function (t) { this._connection = t, this._identities = [], this._features = [], this._items = [], t.addHandler(this._onDiscoInfo.bind(this), e.Strophe.NS.DISCO_INFO, "iq", "get", null, null), t.addHandler(this._onDiscoItems.bind(this), e.Strophe.NS.DISCO_ITEMS, "iq", "get", null, null); }, addIdentity: function (e, t, n, i) { for (var r = 0; r < this._identities.length; r++)
                    if (this._identities[r].category == e && this._identities[r].type == t && this._identities[r].name == n && this._identities[r].lang == i)
                        return !1; return this._identities.push({ category: e, type: t, name: n, lang: i }), !0; }, addFeature: function (e) { for (var t = 0; t < this._features.length; t++)
                    if (this._features[t] == e)
                        return !1; return this._features.push(e), !0; }, removeFeature: function (e) { for (var t = 0; t < this._features.length; t++)
                    if (this._features[t] === e)
                        return this._features.splice(t, 1), !0; return !1; }, addItem: function (e, t, n, i) { return !(n && !i || (this._items.push({ jid: e, name: t, node: n, call_back: i }), 0)); }, info: function (t, n, i, r, s) { var o = { xmlns: e.Strophe.NS.DISCO_INFO }; n && (o.node = n); var a = e.$iq({ from: this._connection.jid, to: t, type: "get" }).c("query", o); this._connection.sendIQ(a, i, r, s); }, items: function (t, n, i, r, s) { var o = { xmlns: e.Strophe.NS.DISCO_ITEMS }; n && (o.node = n); var a = e.$iq({ from: this._connection.jid, to: t, type: "get" }).c("query", o); this._connection.sendIQ(a, i, r, s); }, _buildIQResult: function (t, n) { var i = t.getAttribute("id"), r = t.getAttribute("from"), s = e.$iq({ type: "result", id: i }); return null !== r && s.attrs({ to: r }), s.c("query", n); }, _onDiscoInfo: function (t) { var n, i = t.getElementsByTagName("query")[0].getAttribute("node"), r = { xmlns: e.Strophe.NS.DISCO_INFO }; i && (r.node = i); var s = this._buildIQResult(t, r); for (n = 0; n < this._identities.length; n++)
                    r = { category: this._identities[n].category, type: this._identities[n].type }, this._identities[n].name && (r.name = this._identities[n].name), this._identities[n].lang && (r["xml:lang"] = this._identities[n].lang), s.c("identity", r).up(); for (n = 0; n < this._features.length; n++)
                    s.c("feature", { var: this._features[n] }).up(); return this._connection.send(s.tree()), !0; }, _onDiscoItems: function (t) { var n, i, r = { xmlns: e.Strophe.NS.DISCO_ITEMS }, s = t.getElementsByTagName("query")[0].getAttribute("node"); if (s) {
                    for (r.node = s, n = [], i = 0; i < this._items.length; i++)
                        if (this._items[i].node == s) {
                            n = this._items[i].call_back(t);
                            break;
                        }
                }
                else
                    n = this._items; var o = this._buildIQResult(t, r); for (i = 0; i < n.length; i++) {
                    var a = { jid: n[i].jid };
                    n[i].name && (a.name = n[i].name), n[i].node && (a.node = n[i].node), o.c("item", a).up();
                } return this._connection.send(o.tree()), !0; } });
        }(n(2)); }, function (e, t, n) { !function (e) {
            "use strict";
            e.Strophe.addConnectionPlugin("streamManagement", { logging: !1, autoSendCountOnEveryIncomingStanza: !1, requestResponseInterval: 5, _c: null, _NS: "urn:xmpp:sm:3", _isStreamManagementEnabled: !1, _serverProcesssedStanzasCounter: null, _clientProcessedStanzasCounter: null, _clientSentStanzasCounter: null, _originalXMLOutput: null, _requestHandler: null, _incomingHandler: null, _requestResponseIntervalCount: 0, _isSupported: !1, _unacknowledgedStanzas: [], _acknowledgedStanzaListeners: [], addAcknowledgedStanzaListener: function (e) { this._acknowledgedStanzaListeners.push(e); }, enable: function (t) { if (!this._isSupported)
                    throw new Error("The server doesn't support urn:xmpp:sm:3 namespace"); if (this._connectionStatus !== e.Strophe.Status.CONNECTED)
                    throw new Error("enable() can only be called in the CONNECTED state"); this._c.send(e.$build("enable", { xmlns: this._NS, resume: t })), this._c.flush(), this._c.pause(); }, getResumeToken: function () { return this._resumeToken; }, isSupported: function () { return this._isSupported; }, resume: function () { if (!this.getResumeToken())
                    throw new Error("No resume token"); if (this._connectionStatus !== e.Strophe.Status.DISCONNECTED)
                    throw new Error("resume() can only be called in the DISCONNECTED state"); this._c.options.explicitResourceBinding = !0, this._resuming = !0, this._originalConnect.apply(this._c, this._connectArgs); }, requestAcknowledgement: function () { if (this._connectionStatus !== e.Strophe.Status.CONNECTED)
                    throw new Error("requestAcknowledgement() can only be called in the CONNECTED state"); this._requestResponseIntervalCount = 0, this._c.send(e.$build("r", { xmlns: this._NS })); }, getOutgoingCounter: function () { return this._clientSentStanzasCounter; }, getIncomingCounter: function () { return this._clientProcessedStanzasCounter; }, init: function (t) { this._c = t, e.Strophe.addNamespace("SM", this._NS), this._originalXMLOutput = this._c.xmlOutput, this._c.xmlOutput = this.xmlOutput.bind(this), this._originalConnect = this._c.connect, this._c.connect = this._interceptConnectArgs.bind(this), this._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL, this._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this), this._originalDoDisconnect = this._c._doDisconnect, this._c._doDisconnect = this._interceptDoDisconnect.bind(this), this._originalDisconnect = this._c.disconnect, this._c.disconnect = this._interceptDisconnect.bind(this); }, _interceptDisconnect: function () { this._resumeToken = void 0, this._originalDisconnect.apply(this._c, arguments); }, _interceptDoDisconnect: function () { this.getResumeToken() && !this._resuming && this._c.connected && !this._c.disconnecting && (this._resumeState = { handlers: this._c.handlers, timedHandlers: this._c.timedHandlers, removeTimeds: this._c.removeTimeds, removeHandlers: this._c.removeHandlers, addTimeds: this._c.addTimeds, addHandlers: this._c.addHandlers }, this._storedJid = this._c.jid, this.logging && e.Strophe.debug("SM stored resume state, handler count: " + this._resumeState.handlers.length)), this._c._data = [], this._originalDoDisconnect.apply(this._c, arguments); }, _interceptConnectArgs: function () { this._connectArgs = arguments, this._originalConnect.apply(this._c, arguments); }, _onStreamFeaturesAfterSASL: function (e) { return this._isSupported = e.getElementsByTagNameNS(this._NS, "sm").length > 0, this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments); }, statusChanged: function (t) { if (this._connectionStatus = t, this.getResumeToken() || t !== e.Strophe.Status.CONNECTED && t !== e.Strophe.Status.DISCONNECTED)
                    if (t === e.Strophe.Status.BINDREQUIRED) {
                        this._c.jid = this._storedJid;
                        for (var e_198 in this._resumeState)
                            this._c[e_198] = this._resumeState[e_198];
                        this._c.send(e.$build("resume", { xmlns: this._NS, h: this._clientProcessedStanzasCounter, previd: this._resumeToken })), this._c.flush();
                    }
                    else
                        t === e.Strophe.Status.ERROR && (this.logging && e.Strophe.debug("SM cleared resume token on error"), this._resumeToken = void 0);
                else
                    this.logging && e.Strophe.debug("SM reset state"), this._serverProcesssedStanzasCounter = 0, this._clientProcessedStanzasCounter = 0, this._clientSentStanzasCounter = 0, this._isStreamManagementEnabled = !1, this._requestResponseIntervalCount = 0, this._resuming = !1, t === e.Strophe.Status.DISCONNECTED && (this._isSupported = !1), this._unacknowledgedStanzas = [], this._requestHandler && this._c.deleteHandler(this._requestHandler), this._incomingHandler && this._c.deleteHandler(this._incomingHandler), this._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, "r"), this._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, "a"), this._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this)), this._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, "enabled"), this._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, "failed"), this._resumedHandler = this._c._addSysHandler(this._handleResumed.bind(this), this._NS, "resumed"); }, xmlOutput: function (t) { return (e.Strophe.isTagEqual(t, "iq") || e.Strophe.isTagEqual(t, "presence") || e.Strophe.isTagEqual(t, "message")) && this._increaseSentStanzasCounter(t), this._originalXMLOutput.call(this._c, t); }, _handleEnabled: function (e) { return this._isStreamManagementEnabled = !0, this._resumeToken = "true" === e.getAttribute("resume") && e.getAttribute("id"), this._c.resume(), !0; }, _handleResumeFailed: function (t) { var n = t && t.firstElementChild && t.firstElementChild.tagName; return this._c._changeConnectStatus(e.Strophe.Status.ERROR, n, t), this._c._doDisconnect(), !0; }, _handleResumed: function (t) { var n = parseInt(t.getAttribute("h")); if (this._handleAcknowledgedStanzas(n, this._serverProcesssedStanzasCounter), this._resuming = !1, this._c.do_bind = !1, this._c.authenticated = !0, this._c.restored = !0, this._unacknowledgedStanzas.length > 0) {
                    this.logging && e.Strophe.debug("SM Sending unacknowledged stanzas", this._unacknowledgedStanzas);
                    for (var _i = 0, _a = this._unacknowledgedStanzas; _i < _a.length; _i++) {
                        var e_199 = _a[_i];
                        this._c.send(e_199);
                    }
                }
                else
                    this.logging && e.Strophe.debug("SM No unacknowledged stanzas", this._unacknowledgedStanzas); return this._c._changeConnectStatus(e.Strophe.Status.CONNECTED, null), !0; }, _incomingStanzaHandler: function (t) { return (e.Strophe.isTagEqual(t, "iq") || e.Strophe.isTagEqual(t, "presence") || e.Strophe.isTagEqual(t, "message")) && (this._increaseReceivedStanzasCounter(), this.autoSendCountOnEveryIncomingStanza && this._answerProcessedStanzas()), !0; }, _handleAcknowledgedStanzas: function (t, n) { var i = t - n; i < 0 && this._throwError("New reported stanza count lower than previous. New: " + t + " - Previous: " + n), i > this._unacknowledgedStanzas.length && this._throwError("Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: " + i + " - Unacknowledge Stanza Count: " + this._unacknowledgedStanzas.length + " - New: " + t + " - Previous: " + n); for (var r = 0; r < i; r++)
                    for (var s = this._unacknowledgedStanzas.shift(), o = 0; o < this._acknowledgedStanzaListeners.length; o++)
                        this._acknowledgedStanzaListeners[o](s); this.logging && this._unacknowledgedStanzas.length > 0 && e.Strophe.warn("SM Unacknowledged stanzas", this._unacknowledgedStanzas), this._serverProcesssedStanzasCounter = t, this.requestResponseInterval > 0 && (this._requestResponseIntervalCount = 0); }, _handleServerRequestHandler: function () { return this._answerProcessedStanzas(), !0; }, _handleServerAck: function (e) { var t = parseInt(e.getAttribute("h")); return this._handleAcknowledgedStanzas(t, this._serverProcesssedStanzasCounter), !0; }, _answerProcessedStanzas: function () { this._isStreamManagementEnabled && this._c.send(e.$build("a", { xmlns: this._NS, h: this._clientProcessedStanzasCounter })); }, _increaseSentStanzasCounter: function (t) {
                    var _this = this;
                    if (this._isStreamManagementEnabled) {
                        if (-1 !== this._unacknowledgedStanzas.indexOf(t))
                            return;
                        this._unacknowledgedStanzas.push(t), this._clientSentStanzasCounter++, this.requestResponseInterval > 0 && (this._requestResponseIntervalCount++, this._requestResponseIntervalCount === this.requestResponseInterval && setTimeout(function () { _this._connectionStatus === e.Strophe.Status.CONNECTED && _this.requestAcknowledgement(); }, 1));
                    }
                }, _increaseReceivedStanzasCounter: function () { this._isStreamManagementEnabled && this._clientProcessedStanzasCounter++; }, _throwError: function (t) { throw e.Strophe.error(t), new Error(t); } });
        }(n(2)); }, function (e, t, n) { (function (e) { var i = void 0 !== e && e || "undefined" != typeof self && self || window, r = Function.prototype.apply; function s(e, t) { this._id = e, this._clearFn = t; } t.setTimeout = function () { return new s(r.call(setTimeout, i, arguments), clearTimeout); }, t.setInterval = function () { return new s(r.call(setInterval, i, arguments), clearInterval); }, t.clearTimeout = t.clearInterval = function (e) { e && e.close(); }, s.prototype.unref = s.prototype.ref = function () { }, s.prototype.close = function () { this._clearFn.call(i, this._id); }, t.enroll = function (e, t) { clearTimeout(e._idleTimeoutId), e._idleTimeout = t; }, t.unenroll = function (e) { clearTimeout(e._idleTimeoutId), e._idleTimeout = -1; }, t._unrefActive = t.active = function (e) { clearTimeout(e._idleTimeoutId); var t = e._idleTimeout; t >= 0 && (e._idleTimeoutId = setTimeout((function () { e._onTimeout && e._onTimeout(); }), t)); }, n(158), t.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== e && e.setImmediate || this && this.setImmediate, t.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== e && e.clearImmediate || this && this.clearImmediate; }).call(this, n(46)); }, function (e, t, n) { (function (e, t) { !function (e, n) {
            "use strict";
            if (!e.setImmediate) {
                var i, r, s, o, a, c = 1, d = {}, u = !1, l = e.document, h = Object.getPrototypeOf && Object.getPrototypeOf(e);
                h = h && h.setTimeout ? h : e, "[object process]" === {}.toString.call(e.process) ? i = function (e) { t.nextTick((function () { m(e); })); } : !function () { if (e.postMessage && !e.importScripts) {
                    var t = !0, n = e.onmessage;
                    return e.onmessage = function () { t = !1; }, e.postMessage("", "*"), e.onmessage = n, t;
                } }() ? e.MessageChannel ? ((s = new MessageChannel).port1.onmessage = function (e) { m(e.data); }, i = function (e) { s.port2.postMessage(e); }) : l && "onreadystatechange" in l.createElement("script") ? (r = l.documentElement, i = function (e) { var t = l.createElement("script"); t.onreadystatechange = function () { m(e), t.onreadystatechange = null, r.removeChild(t), t = null; }, r.appendChild(t); }) : i = function (e) { setTimeout(m, 0, e); } : (o = "setImmediate$" + Math.random() + "$", a = function (t) { t.source === e && "string" == typeof t.data && 0 === t.data.indexOf(o) && m(+t.data.slice(o.length)); }, e.addEventListener ? e.addEventListener("message", a, !1) : e.attachEvent("onmessage", a), i = function (t) { e.postMessage(o + t, "*"); }), h.setImmediate = function (e) { "function" != typeof e && (e = new Function("" + e)); for (var t = new Array(arguments.length - 1), n = 0; n < t.length; n++)
                    t[n] = arguments[n + 1]; var r = { callback: e, args: t }; return d[c] = r, i(c), c++; }, h.clearImmediate = p;
            }
            function p(e) { delete d[e]; }
            function m(e) { if (u)
                setTimeout(m, 0, e);
            else {
                var t = d[e];
                if (t) {
                    u = !0;
                    try {
                        !function (e) { var t = e.callback, n = e.args; switch (n.length) {
                            case 0:
                                t();
                                break;
                            case 1:
                                t(n[0]);
                                break;
                            case 2:
                                t(n[0], n[1]);
                                break;
                            case 3:
                                t(n[0], n[1], n[2]);
                                break;
                            default: t.apply(void 0, n);
                        } }(t);
                    }
                    finally {
                        p(e), u = !1;
                    }
                }
            } }
        }("undefined" == typeof self ? void 0 === e ? this : e : self); }).call(this, n(46), n(60)); }, function (e, t, n) { var i = function (e) { return String(Number(e)) === e ? Number(e) : e; }, r = function (e, t, n) { var r = e.name && e.names; e.push && !t[e.push] ? t[e.push] = [] : r && !t[e.name] && (t[e.name] = {}); var s = e.push ? {} : r ? t[e.name] : t; !function (e, t, n, r) { if (r && !n)
            t[r] = i(e[1]);
        else
            for (var s = 0; s < n.length; s += 1)
                null != e[s + 1] && (t[n[s]] = i(e[s + 1])); }(n.match(e.reg), s, e.names, e.name), e.push && t[e.push].push(s); }, s = n(81), o = RegExp.prototype.test.bind(/^([a-z])=(.*)/); t.parse = function (e) { var t = {}, n = [], i = t; return e.split(/(\r\n|\r|\n)/).filter(o).forEach((function (e) { var t = e[0], o = e.slice(2); "m" === t && (n.push({ rtp: [], fmtp: [] }), i = n[n.length - 1]); for (var a = 0; a < (s[t] || []).length; a += 1) {
            var c = s[t][a];
            if (c.reg.test(o))
                return r(c, i, o);
        } })), t.media = n, t; }; var a = function (e, t) { var n = t.split(/=(.+)/, 2); return 2 === n.length && (e[n[0]] = i(n[1])), e; }; t.parseParams = function (e) { return e.split(/\;\s?/).reduce(a, {}); }, t.parseFmtpConfig = t.parseParams, t.parsePayloads = function (e) { return e.split(" ").map(Number); }, t.parseRemoteCandidates = function (e) { for (var t = [], n = e.split(" ").map(i), r = 0; r < n.length; r += 3)
            t.push({ component: n[r], ip: n[r + 1], port: n[r + 2] }); return t; }, t.parseImageAttributes = function (e) { return e.split(" ").map((function (e) { return e.substring(1, e.length - 1).split(",").reduce(a, {}); })); }, t.parseSimulcastStreamList = function (e) { return e.split(";").map((function (e) { return e.split(",").map((function (e) { var t, n = !1; return "~" !== e[0] ? t = i(e) : (t = i(e.substring(1, e.length)), n = !0), { scid: t, paused: n }; })); })); }; }, function (e, t, n) { var i = n(81), r = /%[sdv%]/g, s = function (e) { var t = 1, n = arguments, i = n.length; return e.replace(r, (function (e) { if (t >= i)
            return e; var r = n[t]; switch (t += 1, e) {
            case "%%": return "%";
            case "%s": return String(r);
            case "%d": return Number(r);
            case "%v": return "";
        } })); }, o = function (e, t, n) { var i = [e + "=" + (t.format instanceof Function ? t.format(t.push ? n : n[t.name]) : t.format)]; if (t.names)
            for (var r = 0; r < t.names.length; r += 1) {
                var o = t.names[r];
                t.name ? i.push(n[t.name][o]) : i.push(n[t.names[r]]);
            }
        else
            i.push(n[t.name]); return s.apply(null, i); }, a = ["v", "o", "s", "i", "u", "e", "p", "c", "b", "t", "r", "z", "a"], c = ["i", "c", "b", "a"]; e.exports = function (e, t) { t = t || {}, null == e.version && (e.version = 0), null == e.name && (e.name = " "), e.media.forEach((function (e) { null == e.payloads && (e.payloads = ""); })); var n = t.outerOrder || a, r = t.innerOrder || c, s = []; return n.forEach((function (t) { i[t].forEach((function (n) { n.name in e && null != e[n.name] ? s.push(o(t, n, e)) : n.push in e && null != e[n.push] && e[n.push].forEach((function (e) { s.push(o(t, n, e)); })); })); })), e.media.forEach((function (e) { s.push(o("m", i.m[0], e)), r.forEach((function (t) { i[t].forEach((function (n) { n.name in e && null != e[n.name] ? s.push(o(t, n, e)) : n.push in e && null != e[n.push] && e[n.push].forEach((function (e) { s.push(o(t, n, e)); })); })); })); })), s.join("\r\n") + "\r\n"; }; }, function (e, t, n) { var i = n(25), r = n(162), s = r.parseSsrcs, o = r.writeSsrcs; function a(e, t, n) { return e.ssrcs.filter((function (e) { return e.id === t; })).filter((function (e) { return e.attribute === n; })).map((function (e) { return e.value; }))[0]; } function c(e) { this.options = e || {}, this.options.numOfLayers || (this.options.numOfLayers = 3), console.log("SdpSimulcast: using " + this.options.numOfLayers + " layers"), this.ssrcCache = []; } function d(e, t) { null != e && Array.isArray(e.media) && e.media.forEach((function (e) { "video" === e.type && t(e); })); } function u(e) { return e && null != e && e.type && "" != e.type && e.sdp && "" != e.sdp; } c.prototype.clearSsrcCache = function () { this.ssrcCache = []; }, c.prototype.setSsrcCache = function (e) { this.ssrcCache = e; }, c.prototype._parseSimLayers = function (e) { var t = e.ssrcGroups && e.ssrcGroups.find((function (e) { return "SIM" === e.semantics; })); return t ? t.ssrcs.split(" ").map((function (e) { return parseInt(e); })) : [e.ssrcs[0].id]; }, c.prototype._buildNewToOldSsrcMap = function (e, t) { for (var n = {}, i = 0; i < e.length; ++i) {
            var r = e[i], s = t[i] || null;
            n[r] = s;
        } return n; }, c.prototype._fillInSourceDataFromCache = function (e) { console.log("SdpSimulcast restoring from cache: ", this.ssrcCache); var t = this._parseSimLayers(e); console.log("SdpSimulcast Parsed new sim ssrcs: ", t); var n = a(e, t[0], "msid"), i = a(e, t[0], "cname"), r = this._buildNewToOldSsrcMap(t, this.ssrcCache); console.log("SdpSimulcast built replacement map: ", r); var s = this.ssrcCache.filter((function (e) { return -1 === Object.values(r).indexOf(e); })); return console.log("SdpSimulcast built ssrcs to add: ", s), e.ssrcs.forEach((function (e) { r[e.id] && (e.id = r[e.id]); })), s.forEach((function (t) { e.ssrcs.push({ id: t, attribute: "msid", value: n }), e.ssrcs.push({ id: t, attribute: "cname", value: i }); })), e.ssrcGroups = e.ssrcGroups || [], e.ssrcGroups.push({ semantics: "SIM", ssrcs: this.ssrcCache.join(" ") }), e; }, c.prototype._generateSourceData = function (e, t) { var n = function (e, t) { e.ssrcs.push({ id: t, attribute: "cname", value: r }), e.ssrcs.push({ id: t, attribute: "msid", value: i }); }, i = a(e, t, "msid"), r = a(e, t, "cname"); this.options.usesUnifiedPlan && !i && (i = e.msid, e.ssrcs.forEach(function (t) { e.ssrcs.push({ id: t.id, attribute: "msid", value: i }); })); for (var s = [], o = 0; o < this.options.numOfLayers - 1; ++o) {
            var c = Math.floor(4294967295 * Math.random()) + 0;
            n(e, c), s.push(c);
        } return e.ssrcGroups = e.ssrcGroups || [], e.ssrcGroups.push({ semantics: "SIM", ssrcs: t + " " + s.join(" ") }), e; }, c.prototype._restoreSimulcast = function (e) { var t, n = e.ssrcs && e.ssrcs.map((function (e) { return e.id; })).filter((function (e, t, n) { return n.indexOf(e) === t; })).length || 0, i = e.ssrcGroups && e.ssrcGroups.length || 0; if (0 === n || n > 2)
            return e; if (2 == n && 0 === i)
            return e; if (1 === n)
            t = e.ssrcs[0].id;
        else {
            var r = e.ssrcGroups.filter((function (e) { return "FID" === e.semantics; }))[0];
            if (!r)
                return e;
            t = parseInt(r.ssrcs.split(" ")[0]);
        } return console.log("SdpSimulcast: current ssrc cache: ", this.ssrcCache), console.log("SdpSimulcast: parsed primary ssrc " + t), -1 !== this.ssrcCache.indexOf(t) ? (console.log("SdpSimulcast: Have seen primary ssrc before, filling in data from cache"), e = this._fillInSourceDataFromCache(e)) : (console.log("SdpSimulcast: Have not seen primary ssrc before, generating source data"), e = this._generateSourceData(e, t)), this.ssrcCache = this._parseSimLayers(e), e; }, c.prototype.mungeRemoteDescription = function (e, t) { if (!u(e))
            return e; var n = i.parse(e.sdp), r = this; return d(n, (function (e) { r.options.explodeRemoteSimulcast ? function (e) { if (e && Array.isArray(e.ssrcGroups))
            for (var t = s(e), n = [], i = e.ssrcGroups.length; i--;)
                if ("SIM" === e.ssrcGroups[i].semantics) {
                    for (var r = e.ssrcGroups[i].ssrcs.split(" "), a = 0; a < r.length; a++) {
                        var c = r[a];
                        n.push(c);
                        var d = t[c].msid.split(" ");
                        t[c].msid = [d[0], "/", a, " ", d[1], "/", a].join(""), t[c].cname = [t[c].cname, "/", a].join(""), e.ssrcGroups.forEach((function (e) { if ("SIM" !== e.semantics) {
                            var i = e.ssrcs.split(" ");
                            -1 !== i.indexOf(c) && i.forEach((function (e) { t[e].msid = t[c].msid, t[e].cname = t[c].cname, e !== c && n.push(e); }));
                        } }));
                    }
                    e.ssrcs = o(t, n), e.ssrcGroups.splice(i, 1);
                } }(e) : function (e) { if (e && Array.isArray(e.ssrcGroups)) {
            var t = s(e);
            e.ssrcGroups.forEach((function (n) { if ("SIM" === n.semantics) {
                console.info("Imploding SIM group: " + n.ssrcs), n.nuke = !0;
                for (var i = n.ssrcs.split(" "), r = 1; r < i.length; r++) {
                    var s = i[r];
                    delete t[s], e.ssrcGroups.forEach((function (e) { if ("SIM" !== e.semantics) {
                        var n = e.ssrcs.split(" ");
                        -1 !== n.indexOf(s) && (n.forEach((function (e) { delete t[e]; })), e.nuke = !0);
                    } }));
                }
            } })), e.ssrcs = o(t);
            for (var n = e.ssrcGroups.length; n--;)
                e.ssrcGroups[n].nuke && e.ssrcGroups.splice(n, 1);
        }
        else
            console.info("Halt: There are no SSRC groups in the remote description."); }(e), !r.options.usesUnifiedPlan && t ? function (e) { e && (Array.isArray(e.invalid) || (e.invalid = []), e.invalid.some((function (e) { return "x-google-flag:conference" === e.value; })) || e.invalid.push({ value: "x-google-flag:conference" })); }(e) : function (e) { e && void 0 !== e.xGoogleFlag && (e.xGoogleFlag = void 0); }(e); })), new RTCSessionDescription({ type: e.type, sdp: i.write(n) }); }, c.prototype.mungeLocalDescription = function (e) { if (!u(e))
            return e; var t = i.parse(e.sdp), n = this; return d(t, (function (e) { "recvonly" != e.direction && "inactive" != e.direction && n._restoreSimulcast(e); })), new RTCSessionDescription({ type: e.type, sdp: i.write(t) }); }, e.exports = c; }, function (e, t) { t.writeSsrcs = function (e, t) { var n = []; if (void 0 !== e && 0 !== Object.keys(e).length) {
            Array.isArray(t) || (t = []);
            for (var i = 0; i < t.length; i++) {
                var r = t[i], s = e[r];
                Object.keys(s).forEach((function (e) { n.push({ id: r, attribute: e, value: s[e] }); }));
            }
            Object.keys(e).forEach((function (i) { if (i = parseInt(i), !(t.indexOf(i) >= 0)) {
                var r = e[i];
                Object.keys(r).forEach((function (e) { n.push({ id: i, attribute: e, value: r[e] }); }));
            } }));
        } return n; }, t.parseSsrcs = function (e) { var t = {}; return void 0 !== e.ssrcs && Array.isArray(e.ssrcs) && e.ssrcs.forEach((function (e) { t[e.id] || (t[e.id] = {}), t[e.id][e.attribute] = e.value; })), t; }; }, function (e, t) { e.exports = function (e, t, n, i) { this.blob = e, this.name = t, this.startTime = n, this.wordArray = i; }; }, function (e, t, n) { var i = n(165), r = n(82), s = n(166), o = function () { this.url = function () { var e = "config does not contain an url to a Sphinx4 https server"; if (void 0 === config.sphinxURL)
            console.log(e);
        else {
            var t_172 = config.sphinxURL;
            if (void 0 !== t_172.includes && t_172.includes("https://"))
                return t_172;
            console.log(e);
        } }(); }; o.prototype = Object.create(s.prototype), o.constructor = o, o.prototype.sendRequest = function (e, t) { console.log("sending an audio file  to " + this.url), console.log("the audio file being sent: " + e); var n = new XMLHttpRequest; n.onreadystatechange = function () { if (n.readyState === XMLHttpRequest.DONE && 200 === n.status)
            t(n.responseText);
        else if (n.readyState === XMLHttpRequest.DONE)
            throw new Error("unable to accept response from sphinx server. status: " + n.status); }, n.open("POST", this.url), n.setRequestHeader("Content-Type", r.determineCorrectFileType()), n.send(e), console.log("send " + e); }, o.prototype.formatResponse = function (e) { var t = JSON.parse(e).objects; t.shift(); var n = []; return t.forEach(function (e) { return e.filler || n.push(new i(e.word, e.start, e.end)); }), n; }, o.prototype.verify = function (e) { if (console.log("response from server:" + e.toString()), "string" != typeof e)
            return !1; var t; try {
            t = JSON.parse(e);
        }
        catch (e) {
            return console.log(e), !1;
        } if (void 0 === t.objects)
            return !1; var n = t.objects; return !(!n[0] || !n[0]["session-id"]); }, e.exports = o; }, function (e, t) { var n = function (e, t, n) { this.word = e, this.begin = t, this.end = n; }; n.prototype.getWord = function () { return this.word; }, n.prototype.getBeginTime = function () { return this.begin; }, n.prototype.getEndTime = function () { return this.end; }, e.exports = n; }, function (e, t) { var n = function () { throw new Error("TranscriptionService is abstract and cannot becreated"); }; n.prototype.send = function (e, t) {
            var _this = this;
            this.sendRequest(e.blob, function (n) { _this.verify(n) ? e.wordArray = _this.formatResponse(n) : (console.log("the retrieved response from the server is not valid!"), e.wordArray = []), t(e); });
        }, n.prototype.sendRequest = function (e, t) { throw new Error("TranscriptionService.sendRequest is abstract"); }, n.prototype.formatResponse = function (e) { throw new Error("TranscriptionService.format is abstract"); }, n.prototype.verify = function (e) { throw new Error("TranscriptionService.verify is abstract"); }, e.exports = n; }, function (e, t, n) {
            "use strict";
            n.r(t);
            var i = {};
            n.r(i), n.d(i, "shimGetUserMedia", (function () { return y; })), n.d(i, "shimGetDisplayMedia", (function () { return E; })), n.d(i, "shimMediaStream", (function () { return b; })), n.d(i, "shimOnTrack", (function () { return T; })), n.d(i, "shimGetSendersWithDtmf", (function () { return C; })), n.d(i, "shimGetStats", (function () { return R; })), n.d(i, "shimSenderReceiverGetStats", (function () { return A; })), n.d(i, "shimAddTrackRemoveTrackWithNative", (function () { return w; })), n.d(i, "shimAddTrackRemoveTrack", (function () { return I; })), n.d(i, "shimPeerConnection", (function () { return P; })), n.d(i, "fixNegotiationNeeded", (function () { return O; }));
            var r = {};
            n.r(r), n.d(r, "shimGetUserMedia", (function () { return M; })), n.d(r, "shimGetDisplayMedia", (function () { return k; })), n.d(r, "shimPeerConnection", (function () { return L; })), n.d(r, "shimReplaceTrack", (function () { return x; }));
            var s = {};
            n.r(s), n.d(s, "shimGetUserMedia", (function () { return F; })), n.d(s, "shimGetDisplayMedia", (function () { return j; })), n.d(s, "shimOnTrack", (function () { return U; })), n.d(s, "shimPeerConnection", (function () { return H; })), n.d(s, "shimSenderGetStats", (function () { return B; })), n.d(s, "shimReceiverGetStats", (function () { return J; })), n.d(s, "shimRemoveStream", (function () { return V; })), n.d(s, "shimRTCDataChannel", (function () { return G; })), n.d(s, "shimAddTransceiver", (function () { return $; })), n.d(s, "shimGetParameters", (function () { return K; })), n.d(s, "shimCreateOffer", (function () { return q; })), n.d(s, "shimCreateAnswer", (function () { return W; }));
            var o = {};
            n.r(o), n.d(o, "shimLocalStreamsAPI", (function () { return z; })), n.d(o, "shimRemoteStreamsAPI", (function () { return Q; })), n.d(o, "shimCallbacksAPI", (function () { return X; })), n.d(o, "shimGetUserMedia", (function () { return Y; })), n.d(o, "shimConstraints", (function () { return Z; })), n.d(o, "shimRTCIceServerUrls", (function () { return ee; })), n.d(o, "shimTrackEventTransceiver", (function () { return te; })), n.d(o, "shimCreateOfferLegacy", (function () { return ne; })), n.d(o, "shimAudioContext", (function () { return ie; }));
            var a = {};
            n.r(a), n.d(a, "shimRTCIceCandidate", (function () { return oe; })), n.d(a, "shimMaxMessageSize", (function () { return ae; })), n.d(a, "shimSendThrowTypeError", (function () { return ce; })), n.d(a, "shimConnectionState", (function () { return de; })), n.d(a, "removeExtmapAllowMixed", (function () { return ue; })), n.d(a, "shimAddIceCandidateNullOrEmpty", (function () { return le; }));
            var c = !0, d = !0;
            function u(e, t, n) { var i = e.match(t); return i && i.length >= n && parseInt(i[n], 10); }
            function l(e, t, n) { if (!e.RTCPeerConnection)
                return; var i = e.RTCPeerConnection.prototype, r = i.addEventListener; i.addEventListener = function (e, i) { if (e !== t)
                return r.apply(this, arguments); var s = function (e) { var t = n(e); t && (i.handleEvent ? i.handleEvent(t) : i(t)); }; return this._eventMap = this._eventMap || {}, this._eventMap[t] || (this._eventMap[t] = new Map), this._eventMap[t].set(i, s), r.apply(this, [e, s]); }; var s = i.removeEventListener; i.removeEventListener = function (e, n) { if (e !== t || !this._eventMap || !this._eventMap[t])
                return s.apply(this, arguments); if (!this._eventMap[t].has(n))
                return s.apply(this, arguments); var i = this._eventMap[t].get(n); return this._eventMap[t].delete(n), 0 === this._eventMap[t].size && delete this._eventMap[t], 0 === Object.keys(this._eventMap).length && delete this._eventMap, s.apply(this, [e, i]); }, Object.defineProperty(i, "on" + t, { get: function () { return this["_on" + t]; }, set: function (e) { this["_on" + t] && (this.removeEventListener(t, this["_on" + t]), delete this["_on" + t]), e && this.addEventListener(t, this["_on" + t] = e); }, enumerable: !0, configurable: !0 }); }
            function h(e) { return "boolean" != typeof e ? new Error("Argument type: " + typeof e + ". Please use a boolean.") : (c = e, e ? "adapter.js logging disabled" : "adapter.js logging enabled"); }
            function p(e) { return "boolean" != typeof e ? new Error("Argument type: " + typeof e + ". Please use a boolean.") : (d = !e, "adapter.js deprecation warnings " + (e ? "disabled" : "enabled")); }
            function m() { if ("object" == typeof window) {
                if (c)
                    return;
                "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
            } }
            function f(e, t) { d && console.warn(e + " is deprecated, please use " + t + " instead."); }
            function g(e) { return "[object Object]" === Object.prototype.toString.call(e); }
            function _(e) { return g(e) ? Object.keys(e).reduce((function (t, n) {
                var _a;
                var i = g(e[n]), r = i ? _(e[n]) : e[n], s = i && !Object.keys(r).length;
                return void 0 === r || s ? t : Object.assign(t, (_a = {}, _a[n] = r, _a));
            }), {}) : e; }
            function v(e, t, n) { var i = n ? "outbound-rtp" : "inbound-rtp", r = new Map; if (null === t)
                return r; var s = []; return e.forEach(function (e) { "track" === e.type && e.trackIdentifier === t.id && s.push(e); }), s.forEach(function (t) { e.forEach(function (n) { n.type === i && n.trackId === t.id && function e(t, n, i) { n && !i.has(n.id) && (i.set(n.id, n), Object.keys(n).forEach(function (r) { r.endsWith("Id") ? e(t, t.get(n[r]), i) : r.endsWith("Ids") && n[r].forEach(function (n) { e(t, t.get(n), i); }); })); }(e, n, r); }); }), r; }
            var S = m;
            function y(e, t) { var n = e && e.navigator; if (!n.mediaDevices)
                return; var i = function (e) { if ("object" != typeof e || e.mandatory || e.optional)
                return e; var t = {}; return Object.keys(e).forEach(function (n) { if ("require" === n || "advanced" === n || "mediaSource" === n)
                return; var i = "object" == typeof e[n] ? e[n] : { ideal: e[n] }; void 0 !== i.exact && "number" == typeof i.exact && (i.min = i.max = i.exact); var r = function (e, t) { return e ? e + t.charAt(0).toUpperCase() + t.slice(1) : "deviceId" === t ? "sourceId" : t; }; if (void 0 !== i.ideal) {
                t.optional = t.optional || [];
                var e_200 = {};
                "number" == typeof i.ideal ? (e_200[r("min", n)] = i.ideal, t.optional.push(e_200), e_200 = {}, e_200[r("max", n)] = i.ideal, t.optional.push(e_200)) : (e_200[r("", n)] = i.ideal, t.optional.push(e_200));
            } void 0 !== i.exact && "number" != typeof i.exact ? (t.mandatory = t.mandatory || {}, t.mandatory[r("", n)] = i.exact) : ["min", "max"].forEach(function (e) { void 0 !== i[e] && (t.mandatory = t.mandatory || {}, t.mandatory[r(e, n)] = i[e]); }); }), e.advanced && (t.optional = (t.optional || []).concat(e.advanced)), t; }, r = function (e, r) { if (t.version >= 61)
                return r(e); if ((e = JSON.parse(JSON.stringify(e))) && "object" == typeof e.audio) {
                var t_173 = function (e, t, n) { t in e && !(n in e) && (e[n] = e[t], delete e[t]); };
                t_173((e = JSON.parse(JSON.stringify(e))).audio, "autoGainControl", "googAutoGainControl"), t_173(e.audio, "noiseSuppression", "googNoiseSuppression"), e.audio = i(e.audio);
            } if (e && "object" == typeof e.video) {
                var s_27 = e.video.facingMode;
                s_27 = s_27 && ("object" == typeof s_27 ? s_27 : { ideal: s_27 });
                var o_21 = t.version < 66;
                if (s_27 && ("user" === s_27.exact || "environment" === s_27.exact || "user" === s_27.ideal || "environment" === s_27.ideal) && (!n.mediaDevices.getSupportedConstraints || !n.mediaDevices.getSupportedConstraints().facingMode || o_21)) {
                    var t_174;
                    if (delete e.video.facingMode, "environment" === s_27.exact || "environment" === s_27.ideal ? t_174 = ["back", "rear"] : "user" !== s_27.exact && "user" !== s_27.ideal || (t_174 = ["front"]), t_174)
                        return n.mediaDevices.enumerateDevices().then(function (n) { var o = (n = n.filter(function (e) { return "videoinput" === e.kind; })).find(function (e) { return t_174.some(function (t) { return e.label.toLowerCase().includes(t); }); }); return !o && n.length && t_174.includes("back") && (o = n[n.length - 1]), o && (e.video.deviceId = s_27.exact ? { exact: o.deviceId } : { ideal: o.deviceId }), e.video = i(e.video), S("chrome: " + JSON.stringify(e)), r(e); });
                }
                e.video = i(e.video);
            } return S("chrome: " + JSON.stringify(e)), r(e); }, s = function (e) { return t.version >= 64 ? e : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[e.name] || e.name, message: e.message, constraint: e.constraint || e.constraintName, toString: function () { return this.name + (this.message && ": ") + this.message; } }; }; if (n.getUserMedia = function (e, t, i) { r(e, function (e) { n.webkitGetUserMedia(e, t, function (e) { i && i(s(e)); }); }); }.bind(n), n.mediaDevices.getUserMedia) {
                var e_201 = n.mediaDevices.getUserMedia.bind(n.mediaDevices);
                n.mediaDevices.getUserMedia = function (t) { return r(t, function (t) { return e_201(t).then(function (e) { if (t.audio && !e.getAudioTracks().length || t.video && !e.getVideoTracks().length)
                    throw e.getTracks().forEach(function (e) { e.stop(); }), new DOMException("", "NotFoundError"); return e; }, function (e) { return Promise.reject(s(e)); }); }); };
            } }
            function E(e, t) { e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices || e.navigator.mediaDevices && ("function" == typeof t ? e.navigator.mediaDevices.getDisplayMedia = function (n) { return t(n).then(function (t) { var i = n.video && n.video.width, r = n.video && n.video.height, s = n.video && n.video.frameRate; return n.video = { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: t, maxFrameRate: s || 3 } }, i && (n.video.mandatory.maxWidth = i), r && (n.video.mandatory.maxHeight = r), e.navigator.mediaDevices.getUserMedia(n); }); } : console.error("shimGetDisplayMedia: getSourceId argument is not a function")); }
            function b(e) { e.MediaStream = e.MediaStream || e.webkitMediaStream; }
            function T(e) { if ("object" == typeof e && e.RTCPeerConnection && !("ontrack" in e.RTCPeerConnection.prototype)) {
                Object.defineProperty(e.RTCPeerConnection.prototype, "ontrack", { get: function () { return this._ontrack; }, set: function (e) { this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e); }, enumerable: !0, configurable: !0 });
                var t_175 = e.RTCPeerConnection.prototype.setRemoteDescription;
                e.RTCPeerConnection.prototype.setRemoteDescription = function () {
                    var _this = this;
                    return this._ontrackpoly || (this._ontrackpoly = function (t) { t.stream.addEventListener("addtrack", function (n) { var i; i = e.RTCPeerConnection.prototype.getReceivers ? _this.getReceivers().find(function (e) { return e.track && e.track.id === n.track.id; }) : { track: n.track }; var r = new Event("track"); r.track = n.track, r.receiver = i, r.transceiver = { receiver: i }, r.streams = [t.stream], _this.dispatchEvent(r); }), t.stream.getTracks().forEach(function (n) { var i; i = e.RTCPeerConnection.prototype.getReceivers ? _this.getReceivers().find(function (e) { return e.track && e.track.id === n.id; }) : { track: n }; var r = new Event("track"); r.track = n, r.receiver = i, r.transceiver = { receiver: i }, r.streams = [t.stream], _this.dispatchEvent(r); }); }, this.addEventListener("addstream", this._ontrackpoly)), t_175.apply(this, arguments);
                };
            }
            else
                l(e, "track", function (e) { return (e.transceiver || Object.defineProperty(e, "transceiver", { value: { receiver: e.receiver } }), e); }); }
            function C(e) { if ("object" == typeof e && e.RTCPeerConnection && !("getSenders" in e.RTCPeerConnection.prototype) && "createDTMFSender" in e.RTCPeerConnection.prototype) {
                var t_176 = function (e, t) { return { track: t, get dtmf() { return void 0 === this._dtmf && ("audio" === t.kind ? this._dtmf = e.createDTMFSender(t) : this._dtmf = null), this._dtmf; }, _pc: e }; };
                if (!e.RTCPeerConnection.prototype.getSenders) {
                    e.RTCPeerConnection.prototype.getSenders = function () { return this._senders = this._senders || [], this._senders.slice(); };
                    var n_116 = e.RTCPeerConnection.prototype.addTrack;
                    e.RTCPeerConnection.prototype.addTrack = function (e, i) { var r = n_116.apply(this, arguments); return r || (r = t_176(this, e), this._senders.push(r)), r; };
                    var i_91 = e.RTCPeerConnection.prototype.removeTrack;
                    e.RTCPeerConnection.prototype.removeTrack = function (e) { i_91.apply(this, arguments); var t = this._senders.indexOf(e); -1 !== t && this._senders.splice(t, 1); };
                }
                var n_117 = e.RTCPeerConnection.prototype.addStream;
                e.RTCPeerConnection.prototype.addStream = function (e) {
                    var _this = this;
                    this._senders = this._senders || [], n_117.apply(this, [e]), e.getTracks().forEach(function (e) { _this._senders.push(t_176(_this, e)); });
                };
                var i_92 = e.RTCPeerConnection.prototype.removeStream;
                e.RTCPeerConnection.prototype.removeStream = function (e) {
                    var _this = this;
                    this._senders = this._senders || [], i_92.apply(this, [e]), e.getTracks().forEach(function (e) { var t = _this._senders.find(function (t) { return t.track === e; }); t && _this._senders.splice(_this._senders.indexOf(t), 1); });
                };
            }
            else if ("object" == typeof e && e.RTCPeerConnection && "getSenders" in e.RTCPeerConnection.prototype && "createDTMFSender" in e.RTCPeerConnection.prototype && e.RTCRtpSender && !("dtmf" in e.RTCRtpSender.prototype)) {
                var t_177 = e.RTCPeerConnection.prototype.getSenders;
                e.RTCPeerConnection.prototype.getSenders = function () {
                    var _this = this;
                    var e = t_177.apply(this, []);
                    return e.forEach(function (e) { return e._pc = _this; }), e;
                }, Object.defineProperty(e.RTCRtpSender.prototype, "dtmf", { get: function () { return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf; } });
            } }
            function R(e) { if (!e.RTCPeerConnection)
                return; var t = e.RTCPeerConnection.prototype.getStats; e.RTCPeerConnection.prototype.getStats = function () {
                var _this = this;
                var e = arguments[0], n = arguments[1], i = arguments[2];
                if (arguments.length > 0 && "function" == typeof e)
                    return t.apply(this, arguments);
                if (0 === t.length && (0 === arguments.length || "function" != typeof e))
                    return t.apply(this, []);
                var r = function (e) { var t = {}; return e.result().forEach(function (e) { var n = { id: e.id, timestamp: e.timestamp, type: { localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[e.type] || e.type }; e.names().forEach(function (t) { n[t] = e.stat(t); }), t[n.id] = n; }), t; }, s = function (e) { return new Map(Object.keys(e).map(function (t) { return [t, e[t]]; })); };
                if (arguments.length >= 2) {
                    var i_93 = function (e) { n(s(r(e))); };
                    return t.apply(this, [i_93, e]);
                }
                return new Promise(function (e, n) { t.apply(_this, [function (t) { e(s(r(t))); }, n]); }).then(n, i);
            }; }
            function A(e) { if (!("object" == typeof e && e.RTCPeerConnection && e.RTCRtpSender && e.RTCRtpReceiver))
                return; if (!("getStats" in e.RTCRtpSender.prototype)) {
                var t_178 = e.RTCPeerConnection.prototype.getSenders;
                t_178 && (e.RTCPeerConnection.prototype.getSenders = function () {
                    var _this = this;
                    var e = t_178.apply(this, []);
                    return e.forEach(function (e) { return e._pc = _this; }), e;
                });
                var n_118 = e.RTCPeerConnection.prototype.addTrack;
                n_118 && (e.RTCPeerConnection.prototype.addTrack = function () { var e = n_118.apply(this, arguments); return e._pc = this, e; }), e.RTCRtpSender.prototype.getStats = function () { var e = this; return this._pc.getStats().then(function (t) { return v(t, e.track, !0); }); };
            } if (!("getStats" in e.RTCRtpReceiver.prototype)) {
                var t_179 = e.RTCPeerConnection.prototype.getReceivers;
                t_179 && (e.RTCPeerConnection.prototype.getReceivers = function () {
                    var _this = this;
                    var e = t_179.apply(this, []);
                    return e.forEach(function (e) { return e._pc = _this; }), e;
                }), l(e, "track", function (e) { return (e.receiver._pc = e.srcElement, e); }), e.RTCRtpReceiver.prototype.getStats = function () { var e = this; return this._pc.getStats().then(function (t) { return v(t, e.track, !1); }); };
            } if (!("getStats" in e.RTCRtpSender.prototype) || !("getStats" in e.RTCRtpReceiver.prototype))
                return; var t = e.RTCPeerConnection.prototype.getStats; e.RTCPeerConnection.prototype.getStats = function () { if (arguments.length > 0 && arguments[0] instanceof e.MediaStreamTrack) {
                var e_202 = arguments[0];
                var t_180, n_119, i_94;
                return this.getSenders().forEach(function (n) { n.track === e_202 && (t_180 ? i_94 = !0 : t_180 = n); }), this.getReceivers().forEach(function (t) { return (t.track === e_202 && (n_119 ? i_94 = !0 : n_119 = t), t.track === e_202); }), i_94 || t_180 && n_119 ? Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : t_180 ? t_180.getStats() : n_119 ? n_119.getStats() : Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
            } return t.apply(this, arguments); }; }
            function w(e) { e.RTCPeerConnection.prototype.getLocalStreams = function () {
                var _this = this;
                return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map(function (e) { return _this._shimmedLocalStreams[e][0]; });
            }; var t = e.RTCPeerConnection.prototype.addTrack; e.RTCPeerConnection.prototype.addTrack = function (e, n) { if (!n)
                return t.apply(this, arguments); this._shimmedLocalStreams = this._shimmedLocalStreams || {}; var i = t.apply(this, arguments); return this._shimmedLocalStreams[n.id] ? -1 === this._shimmedLocalStreams[n.id].indexOf(i) && this._shimmedLocalStreams[n.id].push(i) : this._shimmedLocalStreams[n.id] = [n, i], i; }; var n = e.RTCPeerConnection.prototype.addStream; e.RTCPeerConnection.prototype.addStream = function (e) {
                var _this = this;
                this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e.getTracks().forEach(function (e) { if (_this.getSenders().find(function (t) { return t.track === e; }))
                    throw new DOMException("Track already exists.", "InvalidAccessError"); });
                var t = this.getSenders();
                n.apply(this, arguments);
                var i = this.getSenders().filter(function (e) { return -1 === t.indexOf(e); });
                this._shimmedLocalStreams[e.id] = [e].concat(i);
            }; var i = e.RTCPeerConnection.prototype.removeStream; e.RTCPeerConnection.prototype.removeStream = function (e) { return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e.id], i.apply(this, arguments); }; var r = e.RTCPeerConnection.prototype.removeTrack; e.RTCPeerConnection.prototype.removeTrack = function (e) {
                var _this = this;
                return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e && Object.keys(this._shimmedLocalStreams).forEach(function (t) { var n = _this._shimmedLocalStreams[t].indexOf(e); -1 !== n && _this._shimmedLocalStreams[t].splice(n, 1), 1 === _this._shimmedLocalStreams[t].length && delete _this._shimmedLocalStreams[t]; }), r.apply(this, arguments);
            }; }
            function I(e, t) { if (!e.RTCPeerConnection)
                return; if (e.RTCPeerConnection.prototype.addTrack && t.version >= 65)
                return w(e); var n = e.RTCPeerConnection.prototype.getLocalStreams; e.RTCPeerConnection.prototype.getLocalStreams = function () {
                var _this = this;
                var e = n.apply(this);
                return this._reverseStreams = this._reverseStreams || {}, e.map(function (e) { return _this._reverseStreams[e.id]; });
            }; var i = e.RTCPeerConnection.prototype.addStream; e.RTCPeerConnection.prototype.addStream = function (t) {
                var _this = this;
                if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t.getTracks().forEach(function (e) { if (_this.getSenders().find(function (t) { return t.track === e; }))
                    throw new DOMException("Track already exists.", "InvalidAccessError"); }), !this._reverseStreams[t.id]) {
                    var n_120 = new e.MediaStream(t.getTracks());
                    this._streams[t.id] = n_120, this._reverseStreams[n_120.id] = t, t = n_120;
                }
                i.apply(this, [t]);
            }; var r = e.RTCPeerConnection.prototype.removeStream; function s(e, t) { var n = t.sdp; return Object.keys(e._reverseStreams || []).forEach(function (t) { var i = e._reverseStreams[t], r = e._streams[i.id]; n = n.replace(new RegExp(r.id, "g"), i.id); }), new RTCSessionDescription({ type: t.type, sdp: n }); } function o(e, t) { var n = t.sdp; return Object.keys(e._reverseStreams || []).forEach(function (t) { var i = e._reverseStreams[t], r = e._streams[i.id]; n = n.replace(new RegExp(i.id, "g"), r.id); }), new RTCSessionDescription({ type: t.type, sdp: n }); } e.RTCPeerConnection.prototype.removeStream = function (e) { this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, r.apply(this, [this._streams[e.id] || e]), delete this._reverseStreams[this._streams[e.id] ? this._streams[e.id].id : e.id], delete this._streams[e.id]; }, e.RTCPeerConnection.prototype.addTrack = function (t, n) {
                var _this = this;
                if ("closed" === this.signalingState)
                    throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
                var i = [].slice.call(arguments, 1);
                if (1 !== i.length || !i[0].getTracks().find(function (e) { return e === t; }))
                    throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
                var r = this.getSenders().find(function (e) { return e.track === t; });
                if (r)
                    throw new DOMException("Track already exists.", "InvalidAccessError");
                this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
                var s = this._streams[n.id];
                if (s)
                    s.addTrack(t), Promise.resolve().then(function () { _this.dispatchEvent(new Event("negotiationneeded")); });
                else {
                    var i_95 = new e.MediaStream([t]);
                    this._streams[n.id] = i_95, this._reverseStreams[i_95.id] = n, this.addStream(i_95);
                }
                return this.getSenders().find(function (e) { return e.track === t; });
            }, ["createOffer", "createAnswer"].forEach((function (t) {
                var _a;
                var n = e.RTCPeerConnection.prototype[t], i = (_a = {}, _a[t] = function () {
                    var _this = this;
                    var e = arguments;
                    return arguments.length && "function" == typeof arguments[0] ? n.apply(this, [function (t) { var n = s(_this, t); e[0].apply(null, [n]); }, function (t) { e[1] && e[1].apply(null, t); }, arguments[2]]) : n.apply(this, arguments).then(function (e) { return s(_this, e); });
                }, _a);
                e.RTCPeerConnection.prototype[t] = i[t];
            })); var a = e.RTCPeerConnection.prototype.setLocalDescription; e.RTCPeerConnection.prototype.setLocalDescription = function () { return arguments.length && arguments[0].type ? (arguments[0] = o(this, arguments[0]), a.apply(this, arguments)) : a.apply(this, arguments); }; var c = Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype, "localDescription"); Object.defineProperty(e.RTCPeerConnection.prototype, "localDescription", { get: function () { var e = c.get.apply(this); return "" === e.type ? e : s(this, e); } }), e.RTCPeerConnection.prototype.removeTrack = function (e) {
                var _this = this;
                if ("closed" === this.signalingState)
                    throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
                if (!e._pc)
                    throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
                if (!(e._pc === this))
                    throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
                var t;
                this._streams = this._streams || {}, Object.keys(this._streams).forEach(function (n) { _this._streams[n].getTracks().find(function (t) { return e.track === t; }) && (t = _this._streams[n]); }), t && (1 === t.getTracks().length ? this.removeStream(this._reverseStreams[t.id]) : t.removeTrack(e.track), this.dispatchEvent(new Event("negotiationneeded")));
            }; }
            function P(e, t) { !e.RTCPeerConnection && e.webkitRTCPeerConnection && (e.RTCPeerConnection = e.webkitRTCPeerConnection), e.RTCPeerConnection && t.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach((function (t) {
                var _a;
                var n = e.RTCPeerConnection.prototype[t], i = (_a = {}, _a[t] = function () { return arguments[0] = new ("addIceCandidate" === t ? e.RTCIceCandidate : e.RTCSessionDescription)(arguments[0]), n.apply(this, arguments); }, _a);
                e.RTCPeerConnection.prototype[t] = i[t];
            })); }
            function O(e, t) { l(e, "negotiationneeded", function (e) { var n = e.target; if (!(t.version < 72 || n.getConfiguration && "plan-b" === n.getConfiguration().sdpSemantics) || "stable" === n.signalingState)
                return e; }); }
            var D = n(117), N = n.n(D);
            function M(e) { var t = e && e.navigator, n = t.mediaDevices.getUserMedia.bind(t.mediaDevices); t.mediaDevices.getUserMedia = function (e) { return n(e).catch(function (e) { return Promise.reject(function (e) { return { name: { PermissionDeniedError: "NotAllowedError" }[e.name] || e.name, message: e.message, constraint: e.constraint, toString: function () { return this.name; } }; }(e)); }); }; }
            function k(e) { "getDisplayMedia" in e.navigator && e.navigator.mediaDevices && (e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices || (e.navigator.mediaDevices.getDisplayMedia = e.navigator.getDisplayMedia.bind(e.navigator))); }
            function L(e, t) { if (e.RTCIceGatherer && (e.RTCIceCandidate || (e.RTCIceCandidate = function (e) { return e; }), e.RTCSessionDescription || (e.RTCSessionDescription = function (e) { return e; }), t.version < 15025)) {
                var t_181 = Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype, "enabled");
                Object.defineProperty(e.MediaStreamTrack.prototype, "enabled", { set: function (e) { t_181.set.call(this, e); var n = new Event("enabled"); n.enabled = e, this.dispatchEvent(n); } });
            } e.RTCRtpSender && !("dtmf" in e.RTCRtpSender.prototype) && Object.defineProperty(e.RTCRtpSender.prototype, "dtmf", { get: function () { return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = new e.RTCDtmfSender(this) : "video" === this.track.kind && (this._dtmf = null)), this._dtmf; } }), e.RTCDtmfSender && !e.RTCDTMFSender && (e.RTCDTMFSender = e.RTCDtmfSender); var n = N()(e, t.version); e.RTCPeerConnection = function (e) { return e && e.iceServers && (e.iceServers = function (e, t) { var n = !1; return (e = JSON.parse(JSON.stringify(e))).filter(function (e) { if (e && (e.urls || e.url)) {
                var t_182 = e.urls || e.url;
                e.url && !e.urls && f("RTCIceServer.url", "RTCIceServer.urls");
                var i_96 = "string" == typeof t_182;
                return i_96 && (t_182 = [t_182]), t_182 = t_182.filter(function (e) { if (0 === e.indexOf("stun:"))
                    return !1; var t = e.startsWith("turn") && !e.startsWith("turn:[") && e.includes("transport=udp"); return t && !n ? (n = !0, !0) : t && !n; }), delete e.url, e.urls = i_96 ? t_182[0] : t_182, !!t_182.length;
            } }); }(e.iceServers, t.version), m("ICE servers after filtering:", e.iceServers)), new n(e); }, e.RTCPeerConnection.prototype = n.prototype; }
            function x(e) { e.RTCRtpSender && !("replaceTrack" in e.RTCRtpSender.prototype) && (e.RTCRtpSender.prototype.replaceTrack = e.RTCRtpSender.prototype.setTrack); }
            function F(e, t) { var n = e && e.navigator, i = e && e.MediaStreamTrack; if (n.getUserMedia = function (e, t, i) { f("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), n.mediaDevices.getUserMedia(e).then(t, i); }, !(t.version > 55 && "autoGainControl" in n.mediaDevices.getSupportedConstraints())) {
                var e_203 = function (e, t, n) { t in e && !(n in e) && (e[n] = e[t], delete e[t]); }, t_183 = n.mediaDevices.getUserMedia.bind(n.mediaDevices);
                if (n.mediaDevices.getUserMedia = function (n) { return "object" == typeof n && "object" == typeof n.audio && (n = JSON.parse(JSON.stringify(n)), e_203(n.audio, "autoGainControl", "mozAutoGainControl"), e_203(n.audio, "noiseSuppression", "mozNoiseSuppression")), t_183(n); }, i && i.prototype.getSettings) {
                    var t_184 = i.prototype.getSettings;
                    i.prototype.getSettings = function () { var n = t_184.apply(this, arguments); return e_203(n, "mozAutoGainControl", "autoGainControl"), e_203(n, "mozNoiseSuppression", "noiseSuppression"), n; };
                }
                if (i && i.prototype.applyConstraints) {
                    var t_185 = i.prototype.applyConstraints;
                    i.prototype.applyConstraints = function (n) { return "audio" === this.kind && "object" == typeof n && (n = JSON.parse(JSON.stringify(n)), e_203(n, "autoGainControl", "mozAutoGainControl"), e_203(n, "noiseSuppression", "mozNoiseSuppression")), t_185.apply(this, [n]); };
                }
            } }
            function j(e, t) { e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices || e.navigator.mediaDevices && (e.navigator.mediaDevices.getDisplayMedia = function (n) { if (!n || !n.video) {
                var e_204 = new DOMException("getDisplayMedia without video constraints is undefined");
                return e_204.name = "NotFoundError", e_204.code = 8, Promise.reject(e_204);
            } return !0 === n.video ? n.video = { mediaSource: t } : n.video.mediaSource = t, e.navigator.mediaDevices.getUserMedia(n); }); }
            function U(e) { "object" == typeof e && e.RTCTrackEvent && "receiver" in e.RTCTrackEvent.prototype && !("transceiver" in e.RTCTrackEvent.prototype) && Object.defineProperty(e.RTCTrackEvent.prototype, "transceiver", { get: function () { return { receiver: this.receiver }; } }); }
            function H(e, t) { if ("object" != typeof e || !e.RTCPeerConnection && !e.mozRTCPeerConnection)
                return; !e.RTCPeerConnection && e.mozRTCPeerConnection && (e.RTCPeerConnection = e.mozRTCPeerConnection), t.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach((function (t) {
                var _a;
                var n = e.RTCPeerConnection.prototype[t], i = (_a = {}, _a[t] = function () { return arguments[0] = new ("addIceCandidate" === t ? e.RTCIceCandidate : e.RTCSessionDescription)(arguments[0]), n.apply(this, arguments); }, _a);
                e.RTCPeerConnection.prototype[t] = i[t];
            })); var n = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }, i = e.RTCPeerConnection.prototype.getStats; e.RTCPeerConnection.prototype.getStats = function () { var e = arguments[0], r = arguments[1], s = arguments[2]; return i.apply(this, [e || null]).then(function (e) { if (t.version < 53 && !r)
                try {
                    e.forEach(function (e) { e.type = n[e.type] || e.type; });
                }
                catch (t) {
                    if ("TypeError" !== t.name)
                        throw t;
                    e.forEach(function (t, i) { e.set(i, Object.assign({}, t, { type: n[t.type] || t.type })); });
                } return e; }).then(r, s); }; }
            function B(e) { if ("object" != typeof e || !e.RTCPeerConnection || !e.RTCRtpSender)
                return; if (e.RTCRtpSender && "getStats" in e.RTCRtpSender.prototype)
                return; var t = e.RTCPeerConnection.prototype.getSenders; t && (e.RTCPeerConnection.prototype.getSenders = function () {
                var _this = this;
                var e = t.apply(this, []);
                return e.forEach(function (e) { return e._pc = _this; }), e;
            }); var n = e.RTCPeerConnection.prototype.addTrack; n && (e.RTCPeerConnection.prototype.addTrack = function () { var e = n.apply(this, arguments); return e._pc = this, e; }), e.RTCRtpSender.prototype.getStats = function () { return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map); }; }
            function J(e) { if ("object" != typeof e || !e.RTCPeerConnection || !e.RTCRtpSender)
                return; if (e.RTCRtpSender && "getStats" in e.RTCRtpReceiver.prototype)
                return; var t = e.RTCPeerConnection.prototype.getReceivers; t && (e.RTCPeerConnection.prototype.getReceivers = function () {
                var _this = this;
                var e = t.apply(this, []);
                return e.forEach(function (e) { return e._pc = _this; }), e;
            }), l(e, "track", function (e) { return (e.receiver._pc = e.srcElement, e); }), e.RTCRtpReceiver.prototype.getStats = function () { return this._pc.getStats(this.track); }; }
            function V(e) { e.RTCPeerConnection && !("removeStream" in e.RTCPeerConnection.prototype) && (e.RTCPeerConnection.prototype.removeStream = function (e) {
                var _this = this;
                f("removeStream", "removeTrack"), this.getSenders().forEach(function (t) { t.track && e.getTracks().includes(t.track) && _this.removeTrack(t); });
            }); }
            function G(e) { e.DataChannel && !e.RTCDataChannel && (e.RTCDataChannel = e.DataChannel); }
            function $(e) { if ("object" != typeof e || !e.RTCPeerConnection)
                return; var t = e.RTCPeerConnection.prototype.addTransceiver; t && (e.RTCPeerConnection.prototype.addTransceiver = function () { this.setParametersPromises = []; var e = arguments[1], n = e && "sendEncodings" in e; n && e.sendEncodings.forEach(function (e) { if ("rid" in e) {
                if (!/^[a-z0-9]{0,16}$/i.test(e.rid))
                    throw new TypeError("Invalid RID value provided.");
            } if ("scaleResolutionDownBy" in e && !(parseFloat(e.scaleResolutionDownBy) >= 1))
                throw new RangeError("scale_resolution_down_by must be >= 1.0"); if ("maxFramerate" in e && !(parseFloat(e.maxFramerate) >= 0))
                throw new RangeError("max_framerate must be >= 0.0"); }); var i = t.apply(this, arguments); if (n) {
                var t_186 = i.sender, n_121 = t_186.getParameters();
                (!("encodings" in n_121) || 1 === n_121.encodings.length && 0 === Object.keys(n_121.encodings[0]).length) && (n_121.encodings = e.sendEncodings, t_186.sendEncodings = e.sendEncodings, this.setParametersPromises.push(t_186.setParameters(n_121).then(function () { delete t_186.sendEncodings; }).catch(function () { delete t_186.sendEncodings; })));
            } return i; }); }
            function K(e) { if ("object" != typeof e || !e.RTCRtpSender)
                return; var t = e.RTCRtpSender.prototype.getParameters; t && (e.RTCRtpSender.prototype.getParameters = function () { var e = t.apply(this, arguments); return "encodings" in e || (e.encodings = [].concat(this.sendEncodings || [{}])), e; }); }
            function q(e) { if ("object" != typeof e || !e.RTCPeerConnection)
                return; var t = e.RTCPeerConnection.prototype.createOffer; e.RTCPeerConnection.prototype.createOffer = function () {
                var _this = this;
                return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(function () { return t.apply(_this, arguments); }).finally(function () { _this.setParametersPromises = []; }) : t.apply(this, arguments);
            }; }
            function W(e) { if ("object" != typeof e || !e.RTCPeerConnection)
                return; var t = e.RTCPeerConnection.prototype.createAnswer; e.RTCPeerConnection.prototype.createAnswer = function () {
                var _this = this;
                return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(function () { return t.apply(_this, arguments); }).finally(function () { _this.setParametersPromises = []; }) : t.apply(this, arguments);
            }; }
            function z(e) { if ("object" == typeof e && e.RTCPeerConnection) {
                if ("getLocalStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getLocalStreams = function () { return this._localStreams || (this._localStreams = []), this._localStreams; }), !("addStream" in e.RTCPeerConnection.prototype)) {
                    var t_187 = e.RTCPeerConnection.prototype.addTrack;
                    e.RTCPeerConnection.prototype.addStream = function (e) {
                        var _this = this;
                        this._localStreams || (this._localStreams = []), this._localStreams.includes(e) || this._localStreams.push(e), e.getAudioTracks().forEach(function (n) { return t_187.call(_this, n, e); }), e.getVideoTracks().forEach(function (n) { return t_187.call(_this, n, e); });
                    }, e.RTCPeerConnection.prototype.addTrack = function (e) {
                        var _this = this;
                        var n = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            n[_i - 1] = arguments[_i];
                        }
                        return n && n.forEach(function (e) { _this._localStreams ? _this._localStreams.includes(e) || _this._localStreams.push(e) : _this._localStreams = [e]; }), t_187.apply(this, arguments);
                    };
                }
                "removeStream" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.removeStream = function (e) {
                    var _this = this;
                    this._localStreams || (this._localStreams = []);
                    var t = this._localStreams.indexOf(e);
                    if (-1 === t)
                        return;
                    this._localStreams.splice(t, 1);
                    var n = e.getTracks();
                    this.getSenders().forEach(function (e) { n.includes(e.track) && _this.removeTrack(e); });
                });
            } }
            function Q(e) { if ("object" == typeof e && e.RTCPeerConnection && ("getRemoteStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getRemoteStreams = function () { return this._remoteStreams ? this._remoteStreams : []; }), !("onaddstream" in e.RTCPeerConnection.prototype))) {
                Object.defineProperty(e.RTCPeerConnection.prototype, "onaddstream", { get: function () { return this._onaddstream; }, set: function (e) {
                        var _this = this;
                        this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e), this.addEventListener("track", this._onaddstreampoly = function (e) { e.streams.forEach(function (e) { if (_this._remoteStreams || (_this._remoteStreams = []), _this._remoteStreams.includes(e))
                            return; _this._remoteStreams.push(e); var t = new Event("addstream"); t.stream = e, _this.dispatchEvent(t); }); });
                    } });
                var t_188 = e.RTCPeerConnection.prototype.setRemoteDescription;
                e.RTCPeerConnection.prototype.setRemoteDescription = function () { var e = this; return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function (t) { t.streams.forEach(function (t) { if (e._remoteStreams || (e._remoteStreams = []), e._remoteStreams.indexOf(t) >= 0)
                    return; e._remoteStreams.push(t); var n = new Event("addstream"); n.stream = t, e.dispatchEvent(n); }); }), t_188.apply(e, arguments); };
            } }
            function X(e) { if ("object" != typeof e || !e.RTCPeerConnection)
                return; var t = e.RTCPeerConnection.prototype, n = t.createOffer, i = t.createAnswer, r = t.setLocalDescription, s = t.setRemoteDescription, o = t.addIceCandidate; t.createOffer = function (e, t) { var i = arguments.length >= 2 ? arguments[2] : arguments[0], r = n.apply(this, [i]); return t ? (r.then(e, t), Promise.resolve()) : r; }, t.createAnswer = function (e, t) { var n = arguments.length >= 2 ? arguments[2] : arguments[0], r = i.apply(this, [n]); return t ? (r.then(e, t), Promise.resolve()) : r; }; var a = function (e, t, n) { var i = r.apply(this, [e]); return n ? (i.then(t, n), Promise.resolve()) : i; }; t.setLocalDescription = a, a = function (e, t, n) { var i = s.apply(this, [e]); return n ? (i.then(t, n), Promise.resolve()) : i; }, t.setRemoteDescription = a, a = function (e, t, n) { var i = o.apply(this, [e]); return n ? (i.then(t, n), Promise.resolve()) : i; }, t.addIceCandidate = a; }
            function Y(e) { var t = e && e.navigator; if (t.mediaDevices && t.mediaDevices.getUserMedia) {
                var e_205 = t.mediaDevices, n_122 = e_205.getUserMedia.bind(e_205);
                t.mediaDevices.getUserMedia = function (e) { return n_122(Z(e)); };
            } !t.getUserMedia && t.mediaDevices && t.mediaDevices.getUserMedia && (t.getUserMedia = function (e, n, i) { t.mediaDevices.getUserMedia(e).then(n, i); }.bind(t)); }
            function Z(e) { return e && void 0 !== e.video ? Object.assign({}, e, { video: _(e.video) }) : e; }
            function ee(e) { if (!e.RTCPeerConnection)
                return; var t = e.RTCPeerConnection; e.RTCPeerConnection = function (e, n) { if (e && e.iceServers) {
                var t_189 = [];
                for (var n_123 = 0; n_123 < e.iceServers.length; n_123++) {
                    var i_97 = e.iceServers[n_123];
                    !i_97.hasOwnProperty("urls") && i_97.hasOwnProperty("url") ? (f("RTCIceServer.url", "RTCIceServer.urls"), i_97 = JSON.parse(JSON.stringify(i_97)), i_97.urls = i_97.url, delete i_97.url, t_189.push(i_97)) : t_189.push(e.iceServers[n_123]);
                }
                e.iceServers = t_189;
            } return new t(e, n); }, e.RTCPeerConnection.prototype = t.prototype, "generateCertificate" in t && Object.defineProperty(e.RTCPeerConnection, "generateCertificate", { get: function () { return t.generateCertificate; } }); }
            function te(e) { "object" == typeof e && e.RTCTrackEvent && "receiver" in e.RTCTrackEvent.prototype && !("transceiver" in e.RTCTrackEvent.prototype) && Object.defineProperty(e.RTCTrackEvent.prototype, "transceiver", { get: function () { return { receiver: this.receiver }; } }); }
            function ne(e) { var t = e.RTCPeerConnection.prototype.createOffer; e.RTCPeerConnection.prototype.createOffer = function (e) { if (e) {
                void 0 !== e.offerToReceiveAudio && (e.offerToReceiveAudio = !!e.offerToReceiveAudio);
                var t_190 = this.getTransceivers().find(function (e) { return "audio" === e.receiver.track.kind; });
                !1 === e.offerToReceiveAudio && t_190 ? "sendrecv" === t_190.direction ? t_190.setDirection ? t_190.setDirection("sendonly") : t_190.direction = "sendonly" : "recvonly" === t_190.direction && (t_190.setDirection ? t_190.setDirection("inactive") : t_190.direction = "inactive") : !0 !== e.offerToReceiveAudio || t_190 || this.addTransceiver("audio"), void 0 !== e.offerToReceiveVideo && (e.offerToReceiveVideo = !!e.offerToReceiveVideo);
                var n_124 = this.getTransceivers().find(function (e) { return "video" === e.receiver.track.kind; });
                !1 === e.offerToReceiveVideo && n_124 ? "sendrecv" === n_124.direction ? n_124.setDirection ? n_124.setDirection("sendonly") : n_124.direction = "sendonly" : "recvonly" === n_124.direction && (n_124.setDirection ? n_124.setDirection("inactive") : n_124.direction = "inactive") : !0 !== e.offerToReceiveVideo || n_124 || this.addTransceiver("video");
            } return t.apply(this, arguments); }; }
            function ie(e) { "object" != typeof e || e.AudioContext || (e.AudioContext = e.webkitAudioContext); }
            var re = n(53), se = n.n(re);
            function oe(e) { if (!e.RTCIceCandidate || e.RTCIceCandidate && "foundation" in e.RTCIceCandidate.prototype)
                return; var t = e.RTCIceCandidate; e.RTCIceCandidate = function (e) { if ("object" == typeof e && e.candidate && 0 === e.candidate.indexOf("a=") && ((e = JSON.parse(JSON.stringify(e))).candidate = e.candidate.substr(2)), e.candidate && e.candidate.length) {
                var n_125 = new t(e), i_98 = se.a.parseCandidate(e.candidate), r_33 = Object.assign(n_125, i_98);
                return r_33.toJSON = function () { return { candidate: r_33.candidate, sdpMid: r_33.sdpMid, sdpMLineIndex: r_33.sdpMLineIndex, usernameFragment: r_33.usernameFragment }; }, r_33;
            } return new t(e); }, e.RTCIceCandidate.prototype = t.prototype, l(e, "icecandidate", function (t) { return (t.candidate && Object.defineProperty(t, "candidate", { value: new e.RTCIceCandidate(t.candidate), writable: "false" }), t); }); }
            function ae(e, t) { if (!e.RTCPeerConnection)
                return; "sctp" in e.RTCPeerConnection.prototype || Object.defineProperty(e.RTCPeerConnection.prototype, "sctp", { get: function () { return void 0 === this._sctp ? null : this._sctp; } }); var n = function (e) { if (!e || !e.sdp)
                return !1; var t = se.a.splitSections(e.sdp); return t.shift(), t.some(function (e) { var t = se.a.parseMLine(e); return t && "application" === t.kind && -1 !== t.protocol.indexOf("SCTP"); }); }, i = function (e) { var t = e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/); if (null === t || t.length < 2)
                return -1; var n = parseInt(t[1], 10); return n != n ? -1 : n; }, r = function (e) { var n = 65536; return "firefox" === t.browser && (n = t.version < 57 ? -1 === e ? 16384 : 2147483637 : t.version < 60 ? 57 === t.version ? 65535 : 65536 : 2147483637), n; }, s = function (e, n) { var i = 65536; "firefox" === t.browser && 57 === t.version && (i = 65535); var r = se.a.matchPrefix(e.sdp, "a=max-message-size:"); return r.length > 0 ? i = parseInt(r[0].substr(19), 10) : "firefox" === t.browser && -1 !== n && (i = 2147483637), i; }, o = e.RTCPeerConnection.prototype.setRemoteDescription; e.RTCPeerConnection.prototype.setRemoteDescription = function () { if (this._sctp = null, "chrome" === t.browser && t.version >= 76) {
                var e_206 = this.getConfiguration().sdpSemantics;
                "plan-b" === e_206 && Object.defineProperty(this, "sctp", { get: function () { return void 0 === this._sctp ? null : this._sctp; }, enumerable: !0, configurable: !0 });
            } if (n(arguments[0])) {
                var e_207 = i(arguments[0]), t_191 = r(e_207), n_126 = s(arguments[0], e_207);
                var o_22;
                o_22 = 0 === t_191 && 0 === n_126 ? Number.POSITIVE_INFINITY : 0 === t_191 || 0 === n_126 ? Math.max(t_191, n_126) : Math.min(t_191, n_126);
                var a_13 = {};
                Object.defineProperty(a_13, "maxMessageSize", { get: function () { return o_22; } }), this._sctp = a_13;
            } return o.apply(this, arguments); }; }
            function ce(e) { if (!e.RTCPeerConnection || !("createDataChannel" in e.RTCPeerConnection.prototype))
                return; function t(e, t) { var n = e.send; e.send = function () { var i = arguments[0], r = i.length || i.size || i.byteLength; if ("open" === e.readyState && t.sctp && r > t.sctp.maxMessageSize)
                throw new TypeError("Message too large (can send a maximum of " + t.sctp.maxMessageSize + " bytes)"); return n.apply(e, arguments); }; } var n = e.RTCPeerConnection.prototype.createDataChannel; e.RTCPeerConnection.prototype.createDataChannel = function () { var e = n.apply(this, arguments); return t(e, this), e; }, l(e, "datachannel", function (e) { return (t(e.channel, e.target), e); }); }
            function de(e) { if (!e.RTCPeerConnection || "connectionState" in e.RTCPeerConnection.prototype)
                return; var t = e.RTCPeerConnection.prototype; Object.defineProperty(t, "connectionState", { get: function () { return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState; }, enumerable: !0, configurable: !0 }), Object.defineProperty(t, "onconnectionstatechange", { get: function () { return this._onconnectionstatechange || null; }, set: function (e) { this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e); }, enumerable: !0, configurable: !0 }), ["setLocalDescription", "setRemoteDescription"].forEach(function (e) { var n = t[e]; t[e] = function () { return this._connectionstatechangepoly || (this._connectionstatechangepoly = function (e) { var t = e.target; if (t._lastConnectionState !== t.connectionState) {
                t._lastConnectionState = t.connectionState;
                var n_127 = new Event("connectionstatechange", e);
                t.dispatchEvent(n_127);
            } return e; }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), n.apply(this, arguments); }; }); }
            function ue(e, t) { if (!e.RTCPeerConnection)
                return; if ("chrome" === t.browser && t.version >= 71)
                return; if ("safari" === t.browser && t.version >= 605)
                return; var n = e.RTCPeerConnection.prototype.setRemoteDescription; e.RTCPeerConnection.prototype.setRemoteDescription = function (t) { if (t && t.sdp && -1 !== t.sdp.indexOf("\na=extmap-allow-mixed")) {
                var n_128 = t.sdp.split("\n").filter(function (e) { return "a=extmap-allow-mixed" !== e.trim(); }).join("\n");
                e.RTCSessionDescription && t instanceof e.RTCSessionDescription ? arguments[0] = new e.RTCSessionDescription({ type: t.type, sdp: n_128 }) : t.sdp = n_128;
            } return n.apply(this, arguments); }; }
            function le(e, t) { if (!e.RTCPeerConnection || !e.RTCPeerConnection.prototype)
                return; var n = e.RTCPeerConnection.prototype.addIceCandidate; n && 0 !== n.length && (e.RTCPeerConnection.prototype.addIceCandidate = function () { return arguments[0] ? ("chrome" === t.browser && t.version < 78 || "firefox" === t.browser && t.version < 68 || "safari" === t.browser) && arguments[0] && "" === arguments[0].candidate ? Promise.resolve() : n.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve()); }); }
            var he = function (_a, t) {
                var _b = _a === void 0 ? {} : _a, e = _b.window;
                if (t === void 0) { t = { shimChrome: !0, shimFirefox: !0, shimEdge: !0, shimSafari: !0 }; }
                var n = m, c = function (e) { var t = { browser: null, version: null }; if (void 0 === e || !e.navigator)
                    return t.browser = "Not a browser.", t; var n = e.navigator; if (n.mozGetUserMedia)
                    t.browser = "firefox", t.version = u(n.userAgent, /Firefox\/(\d+)\./, 1);
                else if (n.webkitGetUserMedia || !1 === e.isSecureContext && e.webkitRTCPeerConnection && !e.RTCIceGatherer)
                    t.browser = "chrome", t.version = u(n.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
                else if (n.mediaDevices && n.userAgent.match(/Edge\/(\d+).(\d+)$/))
                    t.browser = "edge", t.version = u(n.userAgent, /Edge\/(\d+).(\d+)$/, 2);
                else {
                    if (!e.RTCPeerConnection || !n.userAgent.match(/AppleWebKit\/(\d+)\./))
                        return t.browser = "Not a supported browser.", t;
                    t.browser = "safari", t.version = u(n.userAgent, /AppleWebKit\/(\d+)\./, 1), t.supportsUnifiedPlan = e.RTCRtpTransceiver && "currentDirection" in e.RTCRtpTransceiver.prototype;
                } return t; }(e), d = { browserDetails: c, commonShim: a, extractVersion: u, disableLog: h, disableWarnings: p };
                switch (c.browser) {
                    case "chrome":
                        if (!i || !P || !t.shimChrome)
                            return n("Chrome shim is not included in this adapter release."), d;
                        if (null === c.version)
                            return n("Chrome shim can not determine version, not shimming."), d;
                        n("adapter.js shimming chrome."), d.browserShim = i, le(e, c), y(e, c), b(e), P(e, c), T(e), I(e, c), C(e), R(e), A(e), O(e, c), oe(e), de(e), ae(e, c), ce(e), ue(e, c);
                        break;
                    case "firefox":
                        if (!s || !H || !t.shimFirefox)
                            return n("Firefox shim is not included in this adapter release."), d;
                        n("adapter.js shimming firefox."), d.browserShim = s, le(e, c), F(e, c), H(e, c), U(e), V(e), B(e), J(e), G(e), $(e), K(e), q(e), W(e), oe(e), de(e), ae(e, c), ce(e);
                        break;
                    case "edge":
                        if (!r || !L || !t.shimEdge)
                            return n("MS edge shim is not included in this adapter release."), d;
                        n("adapter.js shimming edge."), d.browserShim = r, M(e), k(e), L(e, c), x(e), ae(e, c), ce(e);
                        break;
                    case "safari":
                        if (!o || !t.shimSafari)
                            return n("Safari shim is not included in this adapter release."), d;
                        n("adapter.js shimming safari."), d.browserShim = o, le(e, c), ee(e), ne(e), X(e), z(e), Q(e), te(e), Y(e), ie(e), oe(e), ae(e, c), ce(e), ue(e, c);
                        break;
                    default: n("Unsupported browser!");
                }
                return d;
            }({ window: "undefined" == typeof window ? void 0 : window });
            t.default = he;
        }]);
}));
//# sourceMappingURL=lib-jitsi-meet.min.map
//# sourceMappingURL=lib-jitsi-meet.js.map